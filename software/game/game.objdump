
game.elf:     file format elf32-littlenios2
game.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0000f8e0 memsz 0x0000f8e0 flags r-x
    LOAD off    0x00010900 vaddr 0x0200f900 paddr 0x02011484 align 2**12
         filesz 0x00001b84 memsz 0x00001b84 flags rw-
    LOAD off    0x00013008 vaddr 0x02013008 paddr 0x02013008 align 2**12
         filesz 0x00000000 memsz 0x0000030c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ef3c  020001b4  020001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000810  0200f0f0  0200f0f0  000100f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b84  0200f900  02011484  00010900  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000030c  02013008  02013008  00013008  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00012484  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f38  00000000  00000000  000124b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001759  00000000  00000000  000133e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002bb77  00000000  00000000  00014b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009952  00000000  00000000  000406b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000175d1  00000000  00000000  0004a00a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001db8  00000000  00000000  000615dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000026cb  00000000  00000000  00063394  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ce4b  00000000  00000000  00065a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000728ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a88  00000000  00000000  00072910  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00076a6f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00076a72  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00076a77  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00076a78  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00076a7c  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00076a80  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00076a84  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00076a8f  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00076a9a  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000f  00000000  00000000  00076aa5  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001b  00000000  00000000  00076ab4  2**0
                  CONTENTS, READONLY
 28 .jdi          0000476f  00000000  00000000  00076acf  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003e62a  00000000  00000000  0007b23e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b4 l    d  .text	00000000 .text
0200f0f0 l    d  .rodata	00000000 .rodata
0200f900 l    d  .rwdata	00000000 .rwdata
02013008 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
020001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 game.c
02013008 l     O .bss	00000004 game_level
0201300c l     O .bss	00000004 score
02013010 l     O .bss	00000004 attempts
02013014 l     O .bss	00000004 current_position
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
02001098 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 difftime.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
0200f900 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 refill.c
02002e10 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
020030b8 l     F .text	00000058 __sprint_r
0200f49a l     O .rodata	00000010 blanks.3452
0200f48a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
02005204 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02006c00 l     F .text	00000058 std
02006d0c l     F .text	00000008 __fp_lock
02006d14 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
02011450 l     O .rwdata	00000004 charset
0200f4cc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0200f614 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0200a3c8 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0200b470 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0200b4d0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0200b5d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0200b90c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0200b9ec l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0200bb48 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0200bc54 l     F .text	000000dc alt_file_locked
0200beb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0200c038 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0201146c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0200c4a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
020102bc l     O .rwdata	00001060 jtag_uart_0
0201131c l     O .rwdata	00000120 lcd_display
0200c5ac l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0200c7ec l     F .text	00000228 altera_avalon_jtag_uart_irq
0200ca14 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
02011478 l     O .rwdata	00000004 colstart
0200d090 l     F .text	000000b8 lcd_write_command
0200d148 l     F .text	000000d4 lcd_write_data
0200d21c l     F .text	000000c4 lcd_clear_screen
0200d2e0 l     F .text	000001ec lcd_repaint_screen
0200d4cc l     F .text	000000c8 lcd_scroll_up
0200d594 l     F .text	000002d0 lcd_handle_escape
0200dd70 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0200dfd0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0200e468 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0200eaf8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0200f77d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0200eed8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0200f08c l     F .text	00000040 alt_sim_halt
020082e4 g     F .text	00000094 _mprec_log10
020083d0 g     F .text	00000088 __any_on
02007a30 g     F .text	00000070 _isatty_r
0200f5ec g     O .rodata	00000028 __mprec_tinytens
0200bba8 g     F .text	0000006c alt_main
02002b04 g     F .text	000000a0 _puts_r
02013084 g     O .bss	00000100 alt_irq
02007b64 g     F .text	00000078 _lseek_r
02011484 g       *ABS*	00000000 __flash_rwdata_start
02006ec0 g     F .text	000000a0 __sflags
0200aee8 g     F .text	00000088 __eqdf2
020079bc g     F .text	00000074 _gettimeofday_r
02013314 g       *ABS*	00000000 __alt_heap_start
02002a8c g     F .text	00000044 printf
02002ea4 g     F .text	00000068 __sseek
02006c68 g     F .text	000000a4 __sinit
02007ac4 g     F .text	00000084 _setlocale_r
02006d68 g     F .text	00000068 __sfmoreglue
0200bc34 g     F .text	00000020 __malloc_unlock
02000c94 g     F .text	00000174 __divsf3
02007d60 g     F .text	000000e0 memmove
02006d58 g     F .text	00000010 _cleanup
02008458 g     F .text	000000bc _Balloc
0200aff8 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000001c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
020020cc g     F .text	00000074 _fstat_r
02013018 g     O .bss	00000004 errno
02013048 g     O .bss	00000004 alt_argv
0201943c g       *ABS*	00000000 _gp
0200c358 g     F .text	00000030 usleep
0201013c g     O .rwdata	00000180 alt_fd_list
0200e590 g     F .text	00000094 alt_find_dev
02007cc0 g     F .text	000000a0 memcpy
02006d4c g     F .text	0000000c _cleanup_r
02000fa0 g     F .text	000000f8 __floatsidf
0200ebbc g     F .text	00000078 alt_io_redirect
02000f18 g     F .text	00000088 __ltdf2
0200f0f0 g       *ABS*	00000000 __DTOR_END__
02002ba4 g     F .text	00000014 puts
0200ec34 g     F .text	00000020 altera_nios2_irq_init
02008234 g     F .text	000000b0 __ratio
0200cc2c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02002ad0 g     F .text	00000034 _printf_r
020011d4 g     F .text	00000008 __udivsi3
0200b84c g     F .text	000000c0 isatty
0200f4fc g     O .rodata	000000c8 __mprec_tens
02007aa0 g     F .text	00000008 __locale_charset
02013034 g     O .bss	00000008 alt_timezone
0200ec54 g     F .text	00000090 alt_icache_flush
0201301c g     O .bss	00000004 __malloc_top_pad
0201144c g     O .rwdata	00000004 __mb_cur_max
02007aa8 g     F .text	0000000c _localeconv_r
02008b50 g     F .text	0000003c __i2b
020073a0 g     F .text	0000049c __sfvwrite_r
02002e2c g     F .text	00000070 _sbrk_r
02008ecc g     F .text	00000078 _read_r
02010108 g     O .rwdata	0000000c __lc_ctype
02011464 g     O .rwdata	00000004 alt_max_fd
020018e0 g     F .text	00000138 __unpack_d
02009718 g     F .text	00000110 _fclose_r
02006bcc g     F .text	00000034 fflush
02013020 g     O .bss	00000004 __malloc_max_sbrked_mem
0200a858 g     F .text	00000074 __adddf3
02008114 g     F .text	00000120 __b2d
02009e18 g     F .text	000005b0 __umoddi3
0200ba58 g     F .text	000000f0 lseek
02011440 g     O .rwdata	00000004 _global_impure_ptr
02008f44 g     F .text	000005f4 _realloc_r
02013314 g       *ABS*	00000000 __bss_end
0200ea00 g     F .text	000000f8 alt_iic_isr_register
0200c24c g     F .text	0000010c alt_tick
0200983c g     F .text	000005dc __udivdi3
0200f5c4 g     O .rodata	00000028 __mprec_bigtens
02008dac g     F .text	00000120 __s2b
0200b1e0 g     F .text	00000194 __floatunsidf
02008034 g     F .text	00000060 __mcmp
02011480 g     O .rwdata	00000004 __ctype_ptr
02006d34 g     F .text	00000018 __fp_lock_all
0200e9b8 g     F .text	00000048 alt_ic_irq_enabled
0200c1b4 g     F .text	00000098 alt_alarm_stop
020002dc g     F .text	00000088 show_welcome_screen
02013058 g     O .bss	00000004 alt_irq_active
020000ec g     F .exceptions	000000c8 alt_irq_handler
02010114 g     O .rwdata	00000028 alt_dev_null
020004a8 g     F .text	000002ac start_game
0200145c g     F .text	000000c8 __unpack_f
0200e370 g     F .text	00000044 alt_dcache_flush_all
02007f00 g     F .text	00000070 __hi0bits
0200b108 g     F .text	000000d8 __fixdfsi
02011484 g       *ABS*	00000000 __ram_rwdata_end
0201145c g     O .rwdata	00000008 alt_dev_list
0200c388 g     F .text	00000120 write
0200f900 g       *ABS*	00000000 __ram_rodata_end
0200b4fc g     F .text	000000d4 fstat
02001c0c g     F .text	0000002c fprintf
02008c8c g     F .text	00000120 __pow5mult
02013028 g     O .bss	00000004 __nlocale_changed
020011dc g     F .text	00000008 __umodsi3
02013314 g       *ABS*	00000000 end
020012fc g     F .text	00000160 __pack_f
0200d864 g     F .text	0000050c altera_avalon_lcd_16207_write
02000838 g     F .text	00000214 show_result
020020a8 g     F .text	00000024 fseek
0200c72c g     F .text	000000c0 altera_avalon_jtag_uart_init
0200f0ec g       *ABS*	00000000 __CTOR_LIST__
02800000 g       *ABS*	00000000 __alt_stack_pointer
0200e040 g     F .text	00000090 alt_avalon_timer_sc_init
0200127c g     F .text	00000080 __clzsi2
0200ce50 g     F .text	00000240 altera_avalon_jtag_uart_write
02006c58 g     F .text	00000004 __sfp_lock_acquire
02007bdc g     F .text	000000e4 memchr
02003110 g     F .text	00001eac ___vfprintf_internal_r
0200708c g     F .text	00000314 _free_r
0200eedc g     F .text	000001b0 __call_exitprocs
0201302c g     O .bss	00000004 __mlocale_changed
02011448 g     O .rwdata	00000004 __malloc_sbrk_base
020001b4 g     F .text	0000004c _start
02013050 g     O .bss	00000004 _alt_tick_rate
02002bd4 g     F .text	00000078 rand
0200881c g     F .text	0000014c __lshift
02013054 g     O .bss	00000004 _alt_nticks
0200bf18 g     F .text	00000120 read
0200c53c g     F .text	00000070 alt_sys_init
02000e80 g     F .text	00000098 __floatsisf
02000364 g     F .text	00000144 show_level_selection
02002a14 g     F .text	00000078 _open_r
0200eda4 g     F .text	00000134 __register_exitproc
02008968 g     F .text	000001e8 __multiply
0200cac4 g     F .text	00000074 altera_avalon_jtag_uart_close
0200f900 g       *ABS*	00000000 __ram_rwdata_start
0200f0f0 g       *ABS*	00000000 __ram_rodata_start
0201305c g     O .bss	00000028 __malloc_current_mallinfo
02008514 g     F .text	0000017c __d2b
0200c5e4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0200e744 g     F .text	000000b8 alt_get_fd
0200e224 g     F .text	0000014c alt_busy_sleep
02001a18 g     F .text	000000c8 __fpcmp_parts_d
02005194 g     F .text	00000070 _close_r
02000754 g     F .text	000000b0 display_target
0200ed30 g     F .text	00000074 memcmp
0200c694 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
02013314 g       *ABS*	00000000 __alt_stack_base
0200c6dc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02005058 g     F .text	0000013c __swsetup_r
0200ac90 g     F .text	00000258 __divdf3
02006dd0 g     F .text	000000f0 __sfp
02008378 g     F .text	00000058 __copybits
0200fd00 g     O .rwdata	00000408 __malloc_av_
02006c64 g     F .text	00000004 __sinit_lock_release
0200a8cc g     F .text	000003c4 __muldf3
02002f88 g     F .text	00000060 __sread
0200f314 g     O .rodata	00000010 __thenan_sf
0200e624 g     F .text	00000120 alt_find_file
0200e3b4 g     F .text	000000b4 alt_dev_llist_insert
0200bc14 g     F .text	00000020 __malloc_lock
02001c38 g     F .text	00000034 _fprintf_r
0200c0f8 g     F .text	000000bc sbrk
020069d0 g     F .text	000001fc _fflush_r
02009664 g     F .text	000000b4 _calloc_r
0200b630 g     F .text	0000021c gettimeofday
02001bf0 g     F .text	0000001c fopen
02013008 g       *ABS*	00000000 __bss_start
02007e40 g     F .text	00000098 memset
02000200 g     F .text	000000dc main
02000a4c g     F .text	00000068 delay_ms
0201304c g     O .bss	00000004 alt_envp
02013024 g     O .bss	00000004 __malloc_max_total_mem
0200c63c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
02002bb8 g     F .text	0000001c srand
02000e08 g     F .text	00000078 __ltsf2
0200de3c g     F .text	0000013c altera_avalon_lcd_16207_init
02002e9c g     F .text	00000008 __sclose
02800000 g       *ABS*	00000000 __alt_heap_limit
02009828 g     F .text	00000014 fclose
02013184 g     O .bss	00000190 _atexit0
0200541c g     F .text	000015b4 _dtoa_r
020022d4 g     F .text	00000740 _malloc_r
0200305c g     F .text	0000005c time
02011468 g     O .rwdata	00000004 alt_errno
02007904 g     F .text	000000b8 _fwalk
02001114 g     F .text	00000060 __divsi3
0200f620 g     O .rodata	00000014 __thenan_df
02006f60 g     F .text	0000012c _malloc_trim_r
0200f0f0 g       *ABS*	00000000 __CTOR_END__
02000ab4 g     F .text	000001e0 __mulsf3
020095a8 g     F .text	000000bc strcmp
0200f0f0 g       *ABS*	00000000 __flash_rodata_start
0200f0f0 g       *ABS*	00000000 __DTOR_LIST__
0200af70 g     F .text	00000088 __nedf2
0200c508 g     F .text	00000034 alt_irq_init
0200c098 g     F .text	00000060 alt_release_fd
0200f324 g     O .rodata	00000100 __clz_tab
02013030 g     O .bss	00000004 _PathLocale
02001ae0 g     F .text	0000001c difftime
0200ece4 g     F .text	00000014 atexit
02004fe0 g     F .text	00000078 _write_r
02007b48 g     F .text	0000001c setlocale
0201143c g     O .rwdata	00000004 _impure_ptr
02013044 g     O .bss	00000004 alt_argc
0200e52c g     F .text	00000064 _do_dtors
02001c6c g     F .text	0000043c _fseek_r
02002c4c g     F .text	000001c4 __srefill_r
02000000 g       *ABS*	00000000 __alt_mem_sdram_0
02000020 g       .exceptions	00000000 alt_irq_entry
02008094 g     F .text	00000080 __ulp
02009538 g     F .text	00000040 __isinfd
02006d1c g     F .text	00000018 __fp_unlock_all
0200df78 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
02011454 g     O .rwdata	00000008 alt_fs_list
0201303c g     O .bss	00000008 alt_resettime
02000020 g       *ABS*	00000000 __ram_exceptions_start
02007ab4 g     F .text	00000010 localeconv
0200e82c g     F .text	00000050 alt_ic_isr_register
02011484 g       *ABS*	00000000 _edata
02013314 g       *ABS*	00000000 _end
020001b4 g       *ABS*	00000000 __ram_exceptions_end
0200cb38 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0200e918 g     F .text	000000a0 alt_ic_irq_disable
02002f0c g     F .text	0000007c __swrite
02000804 g     F .text	00000034 get_random_position
02011444 g     O .rwdata	00000004 __malloc_trim_threshold
0200ecf8 g     F .text	00000038 exit
0200783c g     F .text	000000c8 _fwalk_reent
02008690 g     F .text	0000018c __mdiff
02001174 g     F .text	00000060 __modsi3
02800000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02006c5c g     F .text	00000004 __sfp_lock_release
0200f67c g     O .rodata	00000101 _ctype_
02001524 g     F .text	000000a8 __fpcmp_parts_f
02001afc g     F .text	000000f4 _fopen_r
0200f0cc g     F .text	00000020 _exit
02009578 g     F .text	00000030 __isnand
0200e0d0 g     F .text	00000154 alt_alarm_start
020011e4 g     F .text	00000098 __muldi3
02002140 g     F .text	00000194 __smakebuf_r
02002fe8 g     F .text	00000074 strlen
0200bd30 g     F .text	00000188 open
0200b080 g     F .text	00000088 __gedf2
0200e7fc g     F .text	00000030 alt_icache_flush_all
0201147c g     O .rwdata	00000004 alt_priority_mask
0200e87c g     F .text	0000009c alt_ic_irq_enable
02004fbc g     F .text	00000024 __vfprintf_internal
0200a7d8 g     F .text	00000080 __subdf3
02007f70 g     F .text	000000c4 __lo0bits
02011470 g     O .rwdata	00000008 alt_alarm_list
0200e4c8 g     F .text	00000064 _do_ctors
0200b374 g     F .text	000000fc close
0200b96c g     F .text	00000080 alt_load
020015cc g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
02006c60 g     F .text	00000004 __sinit_lock_acquire
02008b8c g     F .text	00000100 __multadd
02007ed8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08406d14 	ori	at,at,436
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__alt_mem_sdram_0-0x2000000>

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c08074 	movhi	r3,513
 2000134:	18cc2104 	addi	r3,r3,12420
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c08074 	movhi	r3,513
 200014c:	18cc2104 	addi	r3,r3,12420
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

020001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 20001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 20001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 20001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 20001c0:	00bffd16 	blt	zero,r2,20001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001c4:	06c0a034 	movhi	sp,640
    ori sp, sp, %lo(__alt_stack_pointer)
 20001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 20001cc:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 20001d0:	d6a50f14 	ori	gp,gp,37948
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001d4:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 20001d8:	108c0214 	ori	r2,r2,12296

    movhi r3, %hi(__bss_end)
 20001dc:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 20001e0:	18ccc514 	ori	r3,r3,13076

    beq r2, r3, 1f
 20001e4:	10c00326 	beq	r2,r3,20001f4 <_start+0x40>

0:
    stw zero, (r2)
 20001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001f0:	10fffd36 	bltu	r2,r3,20001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001f4:	200b96c0 	call	200b96c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001f8:	200bba80 	call	200bba8 <alt_main>

020001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001fc:	003fff06 	br	20001fc <alt_after_alt_main>

02000200 <main>:
void display_target(FILE *lcd, int position);
int get_random_position();
void delay_ms(int milliseconds);

int main(void)
{
 2000200:	defffc04 	addi	sp,sp,-16
 2000204:	dfc00315 	stw	ra,12(sp)
 2000208:	df000215 	stw	fp,8(sp)
 200020c:	df000204 	addi	fp,sp,8
    FILE *lcd = LCD_OPEN();
 2000210:	01008074 	movhi	r4,513
 2000214:	213c3c04 	addi	r4,r4,-3856
 2000218:	01408074 	movhi	r5,513
 200021c:	297c4104 	addi	r5,r5,-3836
 2000220:	2001bf00 	call	2001bf0 <fopen>
 2000224:	e0bffe15 	stw	r2,-8(fp)
    if(lcd == NULL) return 1;
 2000228:	e0bffe17 	ldw	r2,-8(fp)
 200022c:	1004c03a 	cmpne	r2,r2,zero
 2000230:	1000031e 	bne	r2,zero,2000240 <main+0x40>
 2000234:	00800044 	movi	r2,1
 2000238:	e0bfff15 	stw	r2,-4(fp)
 200023c:	00002106 	br	20002c4 <main+0xc4>

    while(1)
    {
        show_welcome_screen(lcd);
 2000240:	e13ffe17 	ldw	r4,-8(fp)
 2000244:	20002dc0 	call	20002dc <show_welcome_screen>
        printf("\nshow welcome screen\n");
 2000248:	01008074 	movhi	r4,513
 200024c:	213c4204 	addi	r4,r4,-3832
 2000250:	2002ba40 	call	2002ba4 <puts>
        usleep(2000000); // Wait 2 seconds
 2000254:	010007f4 	movhi	r4,31
 2000258:	21212004 	addi	r4,r4,-31616
 200025c:	200c3580 	call	200c358 <usleep>


        show_level_selection(lcd);
 2000260:	e13ffe17 	ldw	r4,-8(fp)
 2000264:	20003640 	call	2000364 <show_level_selection>
        printf("show level selection\n");
 2000268:	01008074 	movhi	r4,513
 200026c:	213c4804 	addi	r4,r4,-3808
 2000270:	2002ba40 	call	2002ba4 <puts>
        usleep(2000000); // Wait for level selection
 2000274:	010007f4 	movhi	r4,31
 2000278:	21212004 	addi	r4,r4,-31616
 200027c:	200c3580 	call	200c358 <usleep>

        start_game(lcd);
 2000280:	e13ffe17 	ldw	r4,-8(fp)
 2000284:	20004a80 	call	20004a8 <start_game>
        printf("\nstart_game\n");
 2000288:	01008074 	movhi	r4,513
 200028c:	213c4e04 	addi	r4,r4,-3784
 2000290:	2002ba40 	call	2002ba4 <puts>
        usleep(1000000); // Game duration
 2000294:	010003f4 	movhi	r4,15
 2000298:	21109004 	addi	r4,r4,16960
 200029c:	200c3580 	call	200c358 <usleep>

        show_result(lcd);
 20002a0:	e13ffe17 	ldw	r4,-8(fp)
 20002a4:	20008380 	call	2000838 <show_result>
        printf("show result\n");
 20002a8:	01008074 	movhi	r4,513
 20002ac:	213c5104 	addi	r4,r4,-3772
 20002b0:	2002ba40 	call	2002ba4 <puts>
        usleep(5000000); // Show result for 5 seconds
 20002b4:	01001334 	movhi	r4,76
 20002b8:	2112d004 	addi	r4,r4,19264
 20002bc:	200c3580 	call	200c358 <usleep>


    }
 20002c0:	003fdf06 	br	2000240 <main+0x40>

    LCD_CLOSE(lcd);
    return 0;
}
 20002c4:	e0bfff17 	ldw	r2,-4(fp)
 20002c8:	e037883a 	mov	sp,fp
 20002cc:	dfc00117 	ldw	ra,4(sp)
 20002d0:	df000017 	ldw	fp,0(sp)
 20002d4:	dec00204 	addi	sp,sp,8
 20002d8:	f800283a 	ret

020002dc <show_welcome_screen>:

void show_welcome_screen(FILE *lcd)
{
 20002dc:	defff904 	addi	sp,sp,-28
 20002e0:	dfc00615 	stw	ra,24(sp)
 20002e4:	df000515 	stw	fp,20(sp)
 20002e8:	df000504 	addi	fp,sp,20
 20002ec:	e13fff15 	stw	r4,-4(fp)
    LCD_PRINTF(lcd, "%c%s %c%s %c%s Welcome to Mouse Hunt!\n", ESC, ESC_TOP_LEFT,
 20002f0:	008006c4 	movi	r2,27
 20002f4:	d8800015 	stw	r2,0(sp)
 20002f8:	00808074 	movhi	r2,513
 20002fc:	10bc6004 	addi	r2,r2,-3712
 2000300:	d8800115 	stw	r2,4(sp)
 2000304:	008006c4 	movi	r2,27
 2000308:	d8800215 	stw	r2,8(sp)
 200030c:	00808074 	movhi	r2,513
 2000310:	10bc6104 	addi	r2,r2,-3708
 2000314:	d8800315 	stw	r2,12(sp)
 2000318:	e13fff17 	ldw	r4,-4(fp)
 200031c:	01408074 	movhi	r5,513
 2000320:	297c5404 	addi	r5,r5,-3760
 2000324:	018006c4 	movi	r6,27
 2000328:	01c08074 	movhi	r7,513
 200032c:	39fc5e04 	addi	r7,r7,-3720
 2000330:	2001c0c0 	call	2001c0c <fprintf>
              ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
    LCD_PRINTF(lcd, "%c%s Catch mice with switches!\n", ESC, ESC_COL2_INDENT5);
 2000334:	e13fff17 	ldw	r4,-4(fp)
 2000338:	01408074 	movhi	r5,513
 200033c:	297c6304 	addi	r5,r5,-3700
 2000340:	018006c4 	movi	r6,27
 2000344:	01c08074 	movhi	r7,513
 2000348:	39fc6b04 	addi	r7,r7,-3668
 200034c:	2001c0c0 	call	2001c0c <fprintf>
}
 2000350:	e037883a 	mov	sp,fp
 2000354:	dfc00117 	ldw	ra,4(sp)
 2000358:	df000017 	ldw	fp,0(sp)
 200035c:	dec00204 	addi	sp,sp,8
 2000360:	f800283a 	ret

02000364 <show_level_selection>:

void show_level_selection(FILE *lcd)
{
 2000364:	defff804 	addi	sp,sp,-32
 2000368:	dfc00715 	stw	ra,28(sp)
 200036c:	df000615 	stw	fp,24(sp)
 2000370:	df000604 	addi	fp,sp,24
 2000374:	e13fff15 	stw	r4,-4(fp)
    LCD_PRINTF(lcd, "%c%s %c%s %c%s Select level:\n", ESC, ESC_TOP_LEFT,
 2000378:	008006c4 	movi	r2,27
 200037c:	d8800015 	stw	r2,0(sp)
 2000380:	00808074 	movhi	r2,513
 2000384:	10bc6004 	addi	r2,r2,-3712
 2000388:	d8800115 	stw	r2,4(sp)
 200038c:	008006c4 	movi	r2,27
 2000390:	d8800215 	stw	r2,8(sp)
 2000394:	00808074 	movhi	r2,513
 2000398:	10bc6104 	addi	r2,r2,-3708
 200039c:	d8800315 	stw	r2,12(sp)
 20003a0:	e13fff17 	ldw	r4,-4(fp)
 20003a4:	01408074 	movhi	r5,513
 20003a8:	297c6d04 	addi	r5,r5,-3660
 20003ac:	018006c4 	movi	r6,27
 20003b0:	01c08074 	movhi	r7,513
 20003b4:	39fc5e04 	addi	r7,r7,-3720
 20003b8:	2001c0c0 	call	2001c0c <fprintf>
              ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
    LCD_PRINTF(lcd, "%c%s SW0-Junior SW1-Senior \n", ESC, ESC_COL2_INDENT5);
 20003bc:	e13fff17 	ldw	r4,-4(fp)
 20003c0:	01408074 	movhi	r5,513
 20003c4:	297c7504 	addi	r5,r5,-3628
 20003c8:	018006c4 	movi	r6,27
 20003cc:	01c08074 	movhi	r7,513
 20003d0:	39fc6b04 	addi	r7,r7,-3668
 20003d4:	2001c0c0 	call	2001c0c <fprintf>
    LCD_PRINTF(lcd, "%c%s SW2-Super \n", ESC, ESC_COL2_INDENT5);
 20003d8:	e13fff17 	ldw	r4,-4(fp)
 20003dc:	01408074 	movhi	r5,513
 20003e0:	297c7d04 	addi	r5,r5,-3596
 20003e4:	018006c4 	movi	r6,27
 20003e8:	01c08074 	movhi	r7,513
 20003ec:	39fc6b04 	addi	r7,r7,-3668
 20003f0:	2001c0c0 	call	2001c0c <fprintf>

    // Wait for level selection
    while(1)
    {
        alt_u8 buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_PIO_BASE) & 0x7;
 20003f4:	00801804 	movi	r2,96
 20003f8:	10800037 	ldwio	r2,0(r2)
 20003fc:	108001cc 	andi	r2,r2,7
 2000400:	e0bffe05 	stb	r2,-8(fp)
        if(buttons & 0x4) {
 2000404:	e0bffe03 	ldbu	r2,-8(fp)
 2000408:	1080010c 	andi	r2,r2,4
 200040c:	1005003a 	cmpeq	r2,r2,zero
 2000410:	1000061e 	bne	r2,zero,200042c <show_level_selection+0xc8>
        	game_level = JUNIOR;
 2000414:	d026f315 	stw	zero,-25652(gp)
        	printf("Level: %d \n", game_level);
 2000418:	d166f317 	ldw	r5,-25652(gp)
 200041c:	01008074 	movhi	r4,513
 2000420:	213c8204 	addi	r4,r4,-3576
 2000424:	2002a8c0 	call	2002a8c <printf>
        	break;
 2000428:	00001a06 	br	2000494 <show_level_selection+0x130>
        }
        if(buttons & 0x2) {
 200042c:	e0bffe03 	ldbu	r2,-8(fp)
 2000430:	1080008c 	andi	r2,r2,2
 2000434:	1005003a 	cmpeq	r2,r2,zero
 2000438:	1000071e 	bne	r2,zero,2000458 <show_level_selection+0xf4>
        	game_level = SENIOR;
 200043c:	00800044 	movi	r2,1
 2000440:	d0a6f315 	stw	r2,-25652(gp)
        	printf("Level: %d \n", game_level);
 2000444:	d166f317 	ldw	r5,-25652(gp)
 2000448:	01008074 	movhi	r4,513
 200044c:	213c8204 	addi	r4,r4,-3576
 2000450:	2002a8c0 	call	2002a8c <printf>
        	break; }
 2000454:	00000f06 	br	2000494 <show_level_selection+0x130>
        if(buttons & 0x1) {
 2000458:	e0bffe03 	ldbu	r2,-8(fp)
 200045c:	1080004c 	andi	r2,r2,1
 2000460:	10803fcc 	andi	r2,r2,255
 2000464:	1005003a 	cmpeq	r2,r2,zero
 2000468:	1000071e 	bne	r2,zero,2000488 <show_level_selection+0x124>
        	game_level = SUPER;
 200046c:	00800084 	movi	r2,2
 2000470:	d0a6f315 	stw	r2,-25652(gp)
        	printf("Level: %d \n", game_level);
 2000474:	d166f317 	ldw	r5,-25652(gp)
 2000478:	01008074 	movhi	r4,513
 200047c:	213c8204 	addi	r4,r4,-3576
 2000480:	2002a8c0 	call	2002a8c <printf>
        	break; }
 2000484:	00000306 	br	2000494 <show_level_selection+0x130>

        usleep(10000);
 2000488:	0109c404 	movi	r4,10000
 200048c:	200c3580 	call	200c358 <usleep>
    }
 2000490:	003fd806 	br	20003f4 <show_level_selection+0x90>
}
 2000494:	e037883a 	mov	sp,fp
 2000498:	dfc00117 	ldw	ra,4(sp)
 200049c:	df000017 	ldw	fp,0(sp)
 20004a0:	dec00204 	addi	sp,sp,8
 20004a4:	f800283a 	ret

020004a8 <start_game>:

void start_game(FILE *lcd)
{
 20004a8:	defff204 	addi	sp,sp,-56
 20004ac:	dfc00d15 	stw	ra,52(sp)
 20004b0:	df000c15 	stw	fp,48(sp)
 20004b4:	dc400b15 	stw	r17,44(sp)
 20004b8:	dc000a15 	stw	r16,40(sp)
 20004bc:	df000a04 	addi	fp,sp,40
 20004c0:	e13fff15 	stw	r4,-4(fp)
    score = 0;
 20004c4:	d026f415 	stw	zero,-25648(gp)
    attempts = 0;
 20004c8:	d026f515 	stw	zero,-25644(gp)
    int game_time = 0; // 30 seconds for the game
 20004cc:	e03ffe15 	stw	zero,-8(fp)
    if (game_level == JUNIOR){
 20004d0:	d0a6f317 	ldw	r2,-25652(gp)
 20004d4:	1004c03a 	cmpne	r2,r2,zero
 20004d8:	1000031e 	bne	r2,zero,20004e8 <start_game+0x40>
    	game_time = 30;
 20004dc:	00800784 	movi	r2,30
 20004e0:	e0bffe15 	stw	r2,-8(fp)
 20004e4:	00000806 	br	2000508 <start_game+0x60>
    }
    else if (game_time == SENIOR){
 20004e8:	e0bffe17 	ldw	r2,-8(fp)
 20004ec:	10800058 	cmpnei	r2,r2,1
 20004f0:	1000031e 	bne	r2,zero,2000500 <start_game+0x58>
    	game_time = 20;
 20004f4:	00800504 	movi	r2,20
 20004f8:	e0bffe15 	stw	r2,-8(fp)
 20004fc:	00000206 	br	2000508 <start_game+0x60>
    }
    else {
    	game_time = 10;
 2000500:	00800284 	movi	r2,10
 2000504:	e0bffe15 	stw	r2,-8(fp)
    }


    LCD_PRINTF(lcd, "%c%s %c%s %c%s Game started!\n", ESC, ESC_TOP_LEFT,
 2000508:	008006c4 	movi	r2,27
 200050c:	d8800015 	stw	r2,0(sp)
 2000510:	00808074 	movhi	r2,513
 2000514:	10bc6004 	addi	r2,r2,-3712
 2000518:	d8800115 	stw	r2,4(sp)
 200051c:	008006c4 	movi	r2,27
 2000520:	d8800215 	stw	r2,8(sp)
 2000524:	00808074 	movhi	r2,513
 2000528:	10bc6104 	addi	r2,r2,-3708
 200052c:	d8800315 	stw	r2,12(sp)
 2000530:	e13fff17 	ldw	r4,-4(fp)
 2000534:	01408074 	movhi	r5,513
 2000538:	297c8504 	addi	r5,r5,-3564
 200053c:	018006c4 	movi	r6,27
 2000540:	01c08074 	movhi	r7,513
 2000544:	39fc5e04 	addi	r7,r7,-3720
 2000548:	2001c0c0 	call	2001c0c <fprintf>
              ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);

    time_t start_time = time(NULL);
 200054c:	0009883a 	mov	r4,zero
 2000550:	200305c0 	call	200305c <time>
 2000554:	e0bffd15 	stw	r2,-12(fp)


    while(difftime(time(NULL), start_time) < game_time)
 2000558:	00006506 	br	20006f0 <start_game+0x248>
    {
        current_position = get_random_position();
 200055c:	20008040 	call	2000804 <get_random_position>
 2000560:	d0a6f615 	stw	r2,-25640(gp)
        display_target(lcd, current_position);
 2000564:	d166f617 	ldw	r5,-25640(gp)
 2000568:	e13fff17 	ldw	r4,-4(fp)
 200056c:	20007540 	call	2000754 <display_target>

        // Wait for player input or timeout (1 second)
        time_t target_start = time(NULL);
 2000570:	0009883a 	mov	r4,zero
 2000574:	200305c0 	call	200305c <time>
 2000578:	e0bffc15 	stw	r2,-16(fp)
        int caught = 0;
 200057c:	e03ffb15 	stw	zero,-20(fp)

        while(difftime(time(NULL), target_start) < 1.0)
 2000580:	00004706 	br	20006a0 <start_game+0x1f8>
        {
            alt_u8 buttons = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_PIO_BASE) & 0x7;
 2000584:	00801804 	movi	r2,96
 2000588:	10800037 	ldwio	r2,0(r2)
 200058c:	108001cc 	andi	r2,r2,7
 2000590:	e0bffa05 	stb	r2,-24(fp)

            if((buttons & 0x1) && current_position == 0) caught = 1; // SW0 for right
 2000594:	e0bffa03 	ldbu	r2,-24(fp)
 2000598:	1080004c 	andi	r2,r2,1
 200059c:	10803fcc 	andi	r2,r2,255
 20005a0:	1005003a 	cmpeq	r2,r2,zero
 20005a4:	1000051e 	bne	r2,zero,20005bc <start_game+0x114>
 20005a8:	d0a6f617 	ldw	r2,-25640(gp)
 20005ac:	1004c03a 	cmpne	r2,r2,zero
 20005b0:	1000021e 	bne	r2,zero,20005bc <start_game+0x114>
 20005b4:	00800044 	movi	r2,1
 20005b8:	e0bffb15 	stw	r2,-20(fp)
            if((buttons & 0x2) && current_position == 1) caught = 1; // SW1 for middle
 20005bc:	e0bffa03 	ldbu	r2,-24(fp)
 20005c0:	1080008c 	andi	r2,r2,2
 20005c4:	1005003a 	cmpeq	r2,r2,zero
 20005c8:	1000051e 	bne	r2,zero,20005e0 <start_game+0x138>
 20005cc:	d0a6f617 	ldw	r2,-25640(gp)
 20005d0:	10800058 	cmpnei	r2,r2,1
 20005d4:	1000021e 	bne	r2,zero,20005e0 <start_game+0x138>
 20005d8:	00800044 	movi	r2,1
 20005dc:	e0bffb15 	stw	r2,-20(fp)
            if((buttons & 0x4) && current_position == 2) caught = 1; // SW2 for left
 20005e0:	e0bffa03 	ldbu	r2,-24(fp)
 20005e4:	1080010c 	andi	r2,r2,4
 20005e8:	1005003a 	cmpeq	r2,r2,zero
 20005ec:	1000051e 	bne	r2,zero,2000604 <start_game+0x15c>
 20005f0:	d0a6f617 	ldw	r2,-25640(gp)
 20005f4:	10800098 	cmpnei	r2,r2,2
 20005f8:	1000021e 	bne	r2,zero,2000604 <start_game+0x15c>
 20005fc:	00800044 	movi	r2,1
 2000600:	e0bffb15 	stw	r2,-20(fp)

            if(caught)
 2000604:	e0bffb17 	ldw	r2,-20(fp)
 2000608:	1005003a 	cmpeq	r2,r2,zero
 200060c:	1000221e 	bne	r2,zero,2000698 <start_game+0x1f0>
            {
                LCD_PRINTF(lcd, "%c%s %c%s %c%s Correct!\n", ESC, ESC_TOP_LEFT,
 2000610:	008006c4 	movi	r2,27
 2000614:	d8800015 	stw	r2,0(sp)
 2000618:	00808074 	movhi	r2,513
 200061c:	10bc6004 	addi	r2,r2,-3712
 2000620:	d8800115 	stw	r2,4(sp)
 2000624:	008006c4 	movi	r2,27
 2000628:	d8800215 	stw	r2,8(sp)
 200062c:	00808074 	movhi	r2,513
 2000630:	10bc6104 	addi	r2,r2,-3708
 2000634:	d8800315 	stw	r2,12(sp)
 2000638:	e13fff17 	ldw	r4,-4(fp)
 200063c:	01408074 	movhi	r5,513
 2000640:	297c8d04 	addi	r5,r5,-3532
 2000644:	018006c4 	movi	r6,27
 2000648:	01c08074 	movhi	r7,513
 200064c:	39fc5e04 	addi	r7,r7,-3720
 2000650:	2001c0c0 	call	2001c0c <fprintf>
                          ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
                usleep(500000);
 2000654:	01000234 	movhi	r4,8
 2000658:	21284804 	addi	r4,r4,-24288
 200065c:	200c3580 	call	200c358 <usleep>
                score++;
 2000660:	d0a6f417 	ldw	r2,-25648(gp)
 2000664:	10800044 	addi	r2,r2,1
 2000668:	d0a6f415 	stw	r2,-25648(gp)
                attempts++;
 200066c:	d0a6f517 	ldw	r2,-25644(gp)
 2000670:	10800044 	addi	r2,r2,1
 2000674:	d0a6f515 	stw	r2,-25644(gp)
                printf("\nScore: %d", score);
 2000678:	d166f417 	ldw	r5,-25648(gp)
 200067c:	01008074 	movhi	r4,513
 2000680:	213c9404 	addi	r4,r4,-3504
 2000684:	2002a8c0 	call	2002a8c <printf>
                usleep(500000); // Show "Correct" for 0.5s
 2000688:	01000234 	movhi	r4,8
 200068c:	21284804 	addi	r4,r4,-24288
 2000690:	200c3580 	call	200c358 <usleep>
                break;
 2000694:	00001006 	br	20006d8 <start_game+0x230>
            }

            usleep(10000);
 2000698:	0109c404 	movi	r4,10000
 200069c:	200c3580 	call	200c358 <usleep>

        // Wait for player input or timeout (1 second)
        time_t target_start = time(NULL);
        int caught = 0;

        while(difftime(time(NULL), target_start) < 1.0)
 20006a0:	0009883a 	mov	r4,zero
 20006a4:	200305c0 	call	200305c <time>
 20006a8:	1009883a 	mov	r4,r2
 20006ac:	e17ffc17 	ldw	r5,-16(fp)
 20006b0:	2001ae00 	call	2001ae0 <difftime>
 20006b4:	100b883a 	mov	r5,r2
 20006b8:	180d883a 	mov	r6,r3
 20006bc:	2809883a 	mov	r4,r5
 20006c0:	300b883a 	mov	r5,r6
 20006c4:	000d883a 	mov	r6,zero
 20006c8:	01cffc34 	movhi	r7,16368
 20006cc:	2000f180 	call	2000f18 <__ltdf2>
 20006d0:	1004803a 	cmplt	r2,r2,zero
 20006d4:	103fab1e 	bne	r2,zero,2000584 <start_game+0xdc>
            }

            usleep(10000);
        }

        if(!caught)
 20006d8:	e0bffb17 	ldw	r2,-20(fp)
 20006dc:	1004c03a 	cmpne	r2,r2,zero
 20006e0:	1000031e 	bne	r2,zero,20006f0 <start_game+0x248>
        {
            attempts++;
 20006e4:	d0a6f517 	ldw	r2,-25644(gp)
 20006e8:	10800044 	addi	r2,r2,1
 20006ec:	d0a6f515 	stw	r2,-25644(gp)
              ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);

    time_t start_time = time(NULL);


    while(difftime(time(NULL), start_time) < game_time)
 20006f0:	0009883a 	mov	r4,zero
 20006f4:	200305c0 	call	200305c <time>
 20006f8:	1009883a 	mov	r4,r2
 20006fc:	e17ffd17 	ldw	r5,-12(fp)
 2000700:	2001ae00 	call	2001ae0 <difftime>
 2000704:	1021883a 	mov	r16,r2
 2000708:	1823883a 	mov	r17,r3
 200070c:	e13ffe17 	ldw	r4,-8(fp)
 2000710:	2000fa00 	call	2000fa0 <__floatsidf>
 2000714:	100f883a 	mov	r7,r2
 2000718:	1811883a 	mov	r8,r3
 200071c:	8009883a 	mov	r4,r16
 2000720:	880b883a 	mov	r5,r17
 2000724:	380d883a 	mov	r6,r7
 2000728:	400f883a 	mov	r7,r8
 200072c:	2000f180 	call	2000f18 <__ltdf2>
 2000730:	1004803a 	cmplt	r2,r2,zero
 2000734:	103f891e 	bne	r2,zero,200055c <start_game+0xb4>
        if(!caught)
        {
            attempts++;
        }
    }
}
 2000738:	e037883a 	mov	sp,fp
 200073c:	dfc00317 	ldw	ra,12(sp)
 2000740:	df000217 	ldw	fp,8(sp)
 2000744:	dc400117 	ldw	r17,4(sp)
 2000748:	dc000017 	ldw	r16,0(sp)
 200074c:	dec00404 	addi	sp,sp,16
 2000750:	f800283a 	ret

02000754 <display_target>:

void display_target(FILE *lcd, int position)
{
 2000754:	defff404 	addi	sp,sp,-48
 2000758:	dfc00b15 	stw	ra,44(sp)
 200075c:	df000a15 	stw	fp,40(sp)
 2000760:	df000a04 	addi	fp,sp,40
 2000764:	e13ffe15 	stw	r4,-8(fp)
 2000768:	e17fff15 	stw	r5,-4(fp)
    const char *patterns[3] = {"____0", "__0__", "_0___"};
 200076c:	00808074 	movhi	r2,513
 2000770:	10bc9704 	addi	r2,r2,-3492
 2000774:	e0bffb15 	stw	r2,-20(fp)
 2000778:	00808074 	movhi	r2,513
 200077c:	10bc9904 	addi	r2,r2,-3484
 2000780:	e0bffc15 	stw	r2,-16(fp)
 2000784:	00808074 	movhi	r2,513
 2000788:	10bc9b04 	addi	r2,r2,-3476
 200078c:	e0bffd15 	stw	r2,-12(fp)
    LCD_PRINTF(lcd, "%c%s %c%s %c%s %s\n", ESC, ESC_TOP_LEFT,
 2000790:	e0bfff17 	ldw	r2,-4(fp)
 2000794:	1085883a 	add	r2,r2,r2
 2000798:	1085883a 	add	r2,r2,r2
 200079c:	e0fffb04 	addi	r3,fp,-20
 20007a0:	10c5883a 	add	r2,r2,r3
 20007a4:	10c00017 	ldw	r3,0(r2)
 20007a8:	008006c4 	movi	r2,27
 20007ac:	d8800015 	stw	r2,0(sp)
 20007b0:	00808074 	movhi	r2,513
 20007b4:	10bc6004 	addi	r2,r2,-3712
 20007b8:	d8800115 	stw	r2,4(sp)
 20007bc:	008006c4 	movi	r2,27
 20007c0:	d8800215 	stw	r2,8(sp)
 20007c4:	00808074 	movhi	r2,513
 20007c8:	10bc6104 	addi	r2,r2,-3708
 20007cc:	d8800315 	stw	r2,12(sp)
 20007d0:	d8c00415 	stw	r3,16(sp)
 20007d4:	e13ffe17 	ldw	r4,-8(fp)
 20007d8:	01408074 	movhi	r5,513
 20007dc:	297c9d04 	addi	r5,r5,-3468
 20007e0:	018006c4 	movi	r6,27
 20007e4:	01c08074 	movhi	r7,513
 20007e8:	39fc5e04 	addi	r7,r7,-3720
 20007ec:	2001c0c0 	call	2001c0c <fprintf>
              ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5, patterns[position]);
}
 20007f0:	e037883a 	mov	sp,fp
 20007f4:	dfc00117 	ldw	ra,4(sp)
 20007f8:	df000017 	ldw	fp,0(sp)
 20007fc:	dec00204 	addi	sp,sp,8
 2000800:	f800283a 	ret

02000804 <get_random_position>:

int get_random_position()
{
 2000804:	defffe04 	addi	sp,sp,-8
 2000808:	dfc00115 	stw	ra,4(sp)
 200080c:	df000015 	stw	fp,0(sp)
 2000810:	d839883a 	mov	fp,sp
    return rand() % 3; // Returns 0, 1, or 2
 2000814:	2002bd40 	call	2002bd4 <rand>
 2000818:	1009883a 	mov	r4,r2
 200081c:	014000c4 	movi	r5,3
 2000820:	20011740 	call	2001174 <__modsi3>
}
 2000824:	e037883a 	mov	sp,fp
 2000828:	dfc00117 	ldw	ra,4(sp)
 200082c:	df000017 	ldw	fp,0(sp)
 2000830:	dec00204 	addi	sp,sp,8
 2000834:	f800283a 	ret

02000838 <show_result>:

void show_result(FILE *lcd)
{
 2000838:	defff104 	addi	sp,sp,-60
 200083c:	dfc00e15 	stw	ra,56(sp)
 2000840:	df000d15 	stw	fp,52(sp)
 2000844:	dc000c15 	stw	r16,48(sp)
 2000848:	df000c04 	addi	fp,sp,48
 200084c:	e13ffe15 	stw	r4,-8(fp)
    float percentage = (attempts > 0) ? (float)score / attempts * 100 : 0;
 2000850:	d0a6f517 	ldw	r2,-25644(gp)
 2000854:	10800050 	cmplti	r2,r2,1
 2000858:	10000d1e 	bne	r2,zero,2000890 <show_result+0x58>
 200085c:	d126f417 	ldw	r4,-25648(gp)
 2000860:	2000e800 	call	2000e80 <__floatsisf>
 2000864:	1021883a 	mov	r16,r2
 2000868:	d126f517 	ldw	r4,-25644(gp)
 200086c:	2000e800 	call	2000e80 <__floatsisf>
 2000870:	8009883a 	mov	r4,r16
 2000874:	100b883a 	mov	r5,r2
 2000878:	2000c940 	call	2000c94 <__divsf3>
 200087c:	1009883a 	mov	r4,r2
 2000880:	0150b234 	movhi	r5,17096
 2000884:	2000ab40 	call	2000ab4 <__mulsf3>
 2000888:	e0bfff15 	stw	r2,-4(fp)
 200088c:	00000206 	br	2000898 <show_result+0x60>
 2000890:	0005883a 	mov	r2,zero
 2000894:	e0bfff15 	stw	r2,-4(fp)
 2000898:	e0ffff17 	ldw	r3,-4(fp)
 200089c:	e0fff915 	stw	r3,-28(fp)
    int rating;

    if(percentage < 25) rating = POOR;
 20008a0:	e13ff917 	ldw	r4,-28(fp)
 20008a4:	01507234 	movhi	r5,16840
 20008a8:	2000e080 	call	2000e08 <__ltsf2>
 20008ac:	1004803a 	cmplt	r2,r2,zero
 20008b0:	1000011e 	bne	r2,zero,20008b8 <show_result+0x80>
 20008b4:	00000206 	br	20008c0 <show_result+0x88>
 20008b8:	e03ff815 	stw	zero,-32(fp)
 20008bc:	00001406 	br	2000910 <show_result+0xd8>
    else if(percentage < 50) rating = FAIR;
 20008c0:	e13ff917 	ldw	r4,-28(fp)
 20008c4:	01509234 	movhi	r5,16968
 20008c8:	2000e080 	call	2000e08 <__ltsf2>
 20008cc:	1004803a 	cmplt	r2,r2,zero
 20008d0:	1000011e 	bne	r2,zero,20008d8 <show_result+0xa0>
 20008d4:	00000306 	br	20008e4 <show_result+0xac>
 20008d8:	00800044 	movi	r2,1
 20008dc:	e0bff815 	stw	r2,-32(fp)
 20008e0:	00000b06 	br	2000910 <show_result+0xd8>
    else if(percentage < 75) rating = GOOD;
 20008e4:	e13ff917 	ldw	r4,-28(fp)
 20008e8:	0150a5b4 	movhi	r5,17046
 20008ec:	2000e080 	call	2000e08 <__ltsf2>
 20008f0:	1004803a 	cmplt	r2,r2,zero
 20008f4:	1000011e 	bne	r2,zero,20008fc <show_result+0xc4>
 20008f8:	00000306 	br	2000908 <show_result+0xd0>
 20008fc:	00800084 	movi	r2,2
 2000900:	e0bff815 	stw	r2,-32(fp)
 2000904:	00000206 	br	2000910 <show_result+0xd8>
    else rating = PERFECT;
 2000908:	008000c4 	movi	r2,3
 200090c:	e0bff815 	stw	r2,-32(fp)

    const char *ratings[] = {"Poor", "Fair", "Good", "Perfect"};
 2000910:	00808074 	movhi	r2,513
 2000914:	10bca204 	addi	r2,r2,-3448
 2000918:	e0bffa15 	stw	r2,-24(fp)
 200091c:	00808074 	movhi	r2,513
 2000920:	10bca404 	addi	r2,r2,-3440
 2000924:	e0bffb15 	stw	r2,-20(fp)
 2000928:	00808074 	movhi	r2,513
 200092c:	10bca604 	addi	r2,r2,-3432
 2000930:	e0bffc15 	stw	r2,-16(fp)
 2000934:	00808074 	movhi	r2,513
 2000938:	10bca804 	addi	r2,r2,-3424
 200093c:	e0bffd15 	stw	r2,-12(fp)

    LCD_PRINTF(lcd, "%c%s %c%s %c%s Game Over!\n", ESC, ESC_TOP_LEFT,
 2000940:	008006c4 	movi	r2,27
 2000944:	d8800015 	stw	r2,0(sp)
 2000948:	00808074 	movhi	r2,513
 200094c:	10bc6004 	addi	r2,r2,-3712
 2000950:	d8800115 	stw	r2,4(sp)
 2000954:	008006c4 	movi	r2,27
 2000958:	d8800215 	stw	r2,8(sp)
 200095c:	00808074 	movhi	r2,513
 2000960:	10bc6104 	addi	r2,r2,-3708
 2000964:	d8800315 	stw	r2,12(sp)
 2000968:	e13ffe17 	ldw	r4,-8(fp)
 200096c:	01408074 	movhi	r5,513
 2000970:	297caa04 	addi	r5,r5,-3416
 2000974:	018006c4 	movi	r6,27
 2000978:	01c08074 	movhi	r7,513
 200097c:	39fc5e04 	addi	r7,r7,-3720
 2000980:	2001c0c0 	call	2001c0c <fprintf>
              ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
    LCD_PRINTF(lcd, "%c%s Score: %d/%d\n", ESC, ESC_COL2_INDENT5, score, attempts);
 2000984:	d0a6f417 	ldw	r2,-25648(gp)
 2000988:	d0e6f517 	ldw	r3,-25644(gp)
 200098c:	d8800015 	stw	r2,0(sp)
 2000990:	d8c00115 	stw	r3,4(sp)
 2000994:	e13ffe17 	ldw	r4,-8(fp)
 2000998:	01408074 	movhi	r5,513
 200099c:	297cb104 	addi	r5,r5,-3388
 20009a0:	018006c4 	movi	r6,27
 20009a4:	01c08074 	movhi	r7,513
 20009a8:	39fc6b04 	addi	r7,r7,-3668
 20009ac:	2001c0c0 	call	2001c0c <fprintf>
    LCD_PRINTF(lcd, "%c%s Rating: %s\n", ESC, ESC_COL2_INDENT5, ratings[rating]);
 20009b0:	e0bff817 	ldw	r2,-32(fp)
 20009b4:	1085883a 	add	r2,r2,r2
 20009b8:	1085883a 	add	r2,r2,r2
 20009bc:	e0fff804 	addi	r3,fp,-32
 20009c0:	10c5883a 	add	r2,r2,r3
 20009c4:	10800204 	addi	r2,r2,8
 20009c8:	10800017 	ldw	r2,0(r2)
 20009cc:	d8800015 	stw	r2,0(sp)
 20009d0:	e13ffe17 	ldw	r4,-8(fp)
 20009d4:	01408074 	movhi	r5,513
 20009d8:	297cb604 	addi	r5,r5,-3368
 20009dc:	018006c4 	movi	r6,27
 20009e0:	01c08074 	movhi	r7,513
 20009e4:	39fc6b04 	addi	r7,r7,-3668
 20009e8:	2001c0c0 	call	2001c0c <fprintf>
    printf("Score: %d\n", score);
 20009ec:	d166f417 	ldw	r5,-25648(gp)
 20009f0:	01008074 	movhi	r4,513
 20009f4:	213cbb04 	addi	r4,r4,-3348
 20009f8:	2002a8c0 	call	2002a8c <printf>
    printf("Attempt: %d\n", attempts);
 20009fc:	d166f517 	ldw	r5,-25644(gp)
 2000a00:	01008074 	movhi	r4,513
 2000a04:	213cbe04 	addi	r4,r4,-3336
 2000a08:	2002a8c0 	call	2002a8c <printf>
    printf("Rating: %s\n", ratings[rating]);
 2000a0c:	e0bff817 	ldw	r2,-32(fp)
 2000a10:	1085883a 	add	r2,r2,r2
 2000a14:	1085883a 	add	r2,r2,r2
 2000a18:	e0fff804 	addi	r3,fp,-32
 2000a1c:	10c5883a 	add	r2,r2,r3
 2000a20:	10800204 	addi	r2,r2,8
 2000a24:	11400017 	ldw	r5,0(r2)
 2000a28:	01008074 	movhi	r4,513
 2000a2c:	213cc204 	addi	r4,r4,-3320
 2000a30:	2002a8c0 	call	2002a8c <printf>
}
 2000a34:	e037883a 	mov	sp,fp
 2000a38:	dfc00217 	ldw	ra,8(sp)
 2000a3c:	df000117 	ldw	fp,4(sp)
 2000a40:	dc000017 	ldw	r16,0(sp)
 2000a44:	dec00304 	addi	sp,sp,12
 2000a48:	f800283a 	ret

02000a4c <delay_ms>:

void delay_ms(int time)
{
 2000a4c:	defffb04 	addi	sp,sp,-20
 2000a50:	df000415 	stw	fp,16(sp)
 2000a54:	df000404 	addi	fp,sp,16
 2000a58:	e13fff15 	stw	r4,-4(fp)

   int i, j, k;
   for(i=0; i<=time; i++)
 2000a5c:	e03ffe15 	stw	zero,-8(fp)
 2000a60:	00000d06 	br	2000a98 <delay_ms+0x4c>
       for(j=0; j<=2000; j++) k = 1;
 2000a64:	e03ffd15 	stw	zero,-12(fp)
 2000a68:	00000506 	br	2000a80 <delay_ms+0x34>
 2000a6c:	00800044 	movi	r2,1
 2000a70:	e0bffc15 	stw	r2,-16(fp)
 2000a74:	e0bffd17 	ldw	r2,-12(fp)
 2000a78:	10800044 	addi	r2,r2,1
 2000a7c:	e0bffd15 	stw	r2,-12(fp)
 2000a80:	e0bffd17 	ldw	r2,-12(fp)
 2000a84:	1081f450 	cmplti	r2,r2,2001
 2000a88:	103ff81e 	bne	r2,zero,2000a6c <delay_ms+0x20>

void delay_ms(int time)
{

   int i, j, k;
   for(i=0; i<=time; i++)
 2000a8c:	e0bffe17 	ldw	r2,-8(fp)
 2000a90:	10800044 	addi	r2,r2,1
 2000a94:	e0bffe15 	stw	r2,-8(fp)
 2000a98:	e0fffe17 	ldw	r3,-8(fp)
 2000a9c:	e0bfff17 	ldw	r2,-4(fp)
 2000aa0:	10fff00e 	bge	r2,r3,2000a64 <delay_ms+0x18>
       for(j=0; j<=2000; j++) k = 1;
}
 2000aa4:	e037883a 	mov	sp,fp
 2000aa8:	df000017 	ldw	fp,0(sp)
 2000aac:	dec00104 	addi	sp,sp,4
 2000ab0:	f800283a 	ret

02000ab4 <__mulsf3>:
 2000ab4:	deffef04 	addi	sp,sp,-68
 2000ab8:	dc400f15 	stw	r17,60(sp)
 2000abc:	dc400204 	addi	r17,sp,8
 2000ac0:	dc000e15 	stw	r16,56(sp)
 2000ac4:	d9000015 	stw	r4,0(sp)
 2000ac8:	d9400115 	stw	r5,4(sp)
 2000acc:	d809883a 	mov	r4,sp
 2000ad0:	880b883a 	mov	r5,r17
 2000ad4:	dc000604 	addi	r16,sp,24
 2000ad8:	dfc01015 	stw	ra,64(sp)
 2000adc:	200145c0 	call	200145c <__unpack_f>
 2000ae0:	d9000104 	addi	r4,sp,4
 2000ae4:	800b883a 	mov	r5,r16
 2000ae8:	200145c0 	call	200145c <__unpack_f>
 2000aec:	d9000217 	ldw	r4,8(sp)
 2000af0:	00800044 	movi	r2,1
 2000af4:	01400104 	movi	r5,4
 2000af8:	1100142e 	bgeu	r2,r4,2000b4c <__mulsf3+0x98>
 2000afc:	d8c00617 	ldw	r3,24(sp)
 2000b00:	10c0052e 	bgeu	r2,r3,2000b18 <__mulsf3+0x64>
 2000b04:	21400f26 	beq	r4,r5,2000b44 <__mulsf3+0x90>
 2000b08:	19405d26 	beq	r3,r5,2000c80 <__mulsf3+0x1cc>
 2000b0c:	00800084 	movi	r2,2
 2000b10:	20800e26 	beq	r4,r2,2000b4c <__mulsf3+0x98>
 2000b14:	1880181e 	bne	r3,r2,2000b78 <__mulsf3+0xc4>
 2000b18:	d8c00717 	ldw	r3,28(sp)
 2000b1c:	d8800317 	ldw	r2,12(sp)
 2000b20:	8009883a 	mov	r4,r16
 2000b24:	10c4c03a 	cmpne	r2,r2,r3
 2000b28:	d8800715 	stw	r2,28(sp)
 2000b2c:	20012fc0 	call	20012fc <__pack_f>
 2000b30:	dfc01017 	ldw	ra,64(sp)
 2000b34:	dc400f17 	ldw	r17,60(sp)
 2000b38:	dc000e17 	ldw	r16,56(sp)
 2000b3c:	dec01104 	addi	sp,sp,68
 2000b40:	f800283a 	ret
 2000b44:	00800084 	movi	r2,2
 2000b48:	18804f26 	beq	r3,r2,2000c88 <__mulsf3+0x1d4>
 2000b4c:	d8800317 	ldw	r2,12(sp)
 2000b50:	d8c00717 	ldw	r3,28(sp)
 2000b54:	8809883a 	mov	r4,r17
 2000b58:	10c4c03a 	cmpne	r2,r2,r3
 2000b5c:	d8800315 	stw	r2,12(sp)
 2000b60:	20012fc0 	call	20012fc <__pack_f>
 2000b64:	dfc01017 	ldw	ra,64(sp)
 2000b68:	dc400f17 	ldw	r17,60(sp)
 2000b6c:	dc000e17 	ldw	r16,56(sp)
 2000b70:	dec01104 	addi	sp,sp,68
 2000b74:	f800283a 	ret
 2000b78:	d8800517 	ldw	r2,20(sp)
 2000b7c:	da000917 	ldw	r8,36(sp)
 2000b80:	0013883a 	mov	r9,zero
 2000b84:	0007883a 	mov	r3,zero
 2000b88:	480f883a 	mov	r7,r9
 2000b8c:	180b883a 	mov	r5,r3
 2000b90:	400d883a 	mov	r6,r8
 2000b94:	1009883a 	mov	r4,r2
 2000b98:	20011e40 	call	20011e4 <__muldi3>
 2000b9c:	da800417 	ldw	r10,16(sp)
 2000ba0:	d9800817 	ldw	r6,32(sp)
 2000ba4:	da400317 	ldw	r9,12(sp)
 2000ba8:	52800084 	addi	r10,r10,2
 2000bac:	3295883a 	add	r10,r6,r10
 2000bb0:	d9800717 	ldw	r6,28(sp)
 2000bb4:	180b883a 	mov	r5,r3
 2000bb8:	180f883a 	mov	r7,r3
 2000bbc:	4992c03a 	cmpne	r9,r9,r6
 2000bc0:	da400b15 	stw	r9,44(sp)
 2000bc4:	1007883a 	mov	r3,r2
 2000bc8:	da800c15 	stw	r10,48(sp)
 2000bcc:	2800070e 	bge	r5,zero,2000bec <__mulsf3+0x138>
 2000bd0:	2880004c 	andi	r2,r5,1
 2000bd4:	1005003a 	cmpeq	r2,r2,zero
 2000bd8:	500d883a 	mov	r6,r10
 2000bdc:	10001e26 	beq	r2,zero,2000c58 <__mulsf3+0x1a4>
 2000be0:	380ed07a 	srli	r7,r7,1
 2000be4:	31800044 	addi	r6,r6,1
 2000be8:	d9800c15 	stw	r6,48(sp)
 2000bec:	01100034 	movhi	r4,16384
 2000bf0:	213fffc4 	addi	r4,r4,-1
 2000bf4:	21c00b36 	bltu	r4,r7,2000c24 <__mulsf3+0x170>
 2000bf8:	d8800c17 	ldw	r2,48(sp)
 2000bfc:	00000206 	br	2000c08 <__mulsf3+0x154>
 2000c00:	18c7883a 	add	r3,r3,r3
 2000c04:	21c00636 	bltu	r4,r7,2000c20 <__mulsf3+0x16c>
 2000c08:	10bfffc4 	addi	r2,r2,-1
 2000c0c:	39cf883a 	add	r7,r7,r7
 2000c10:	183ffb0e 	bge	r3,zero,2000c00 <__mulsf3+0x14c>
 2000c14:	39c00054 	ori	r7,r7,1
 2000c18:	18c7883a 	add	r3,r3,r3
 2000c1c:	21fffa2e 	bgeu	r4,r7,2000c08 <__mulsf3+0x154>
 2000c20:	d8800c15 	stw	r2,48(sp)
 2000c24:	39001fcc 	andi	r4,r7,127
 2000c28:	00801004 	movi	r2,64
 2000c2c:	20800d26 	beq	r4,r2,2000c64 <__mulsf3+0x1b0>
 2000c30:	008000c4 	movi	r2,3
 2000c34:	d9000a04 	addi	r4,sp,40
 2000c38:	d9c00d15 	stw	r7,52(sp)
 2000c3c:	d8800a15 	stw	r2,40(sp)
 2000c40:	20012fc0 	call	20012fc <__pack_f>
 2000c44:	dfc01017 	ldw	ra,64(sp)
 2000c48:	dc400f17 	ldw	r17,60(sp)
 2000c4c:	dc000e17 	ldw	r16,56(sp)
 2000c50:	dec01104 	addi	sp,sp,68
 2000c54:	f800283a 	ret
 2000c58:	1804d07a 	srli	r2,r3,1
 2000c5c:	10e00034 	orhi	r3,r2,32768
 2000c60:	003fdf06 	br	2000be0 <__mulsf3+0x12c>
 2000c64:	3880200c 	andi	r2,r7,128
 2000c68:	103ff11e 	bne	r2,zero,2000c30 <__mulsf3+0x17c>
 2000c6c:	183ff026 	beq	r3,zero,2000c30 <__mulsf3+0x17c>
 2000c70:	3907883a 	add	r3,r7,r4
 2000c74:	00bfe004 	movi	r2,-128
 2000c78:	188e703a 	and	r7,r3,r2
 2000c7c:	003fec06 	br	2000c30 <__mulsf3+0x17c>
 2000c80:	00800084 	movi	r2,2
 2000c84:	20bfa41e 	bne	r4,r2,2000b18 <__mulsf3+0x64>
 2000c88:	01008074 	movhi	r4,513
 2000c8c:	213cc504 	addi	r4,r4,-3308
 2000c90:	003fb306 	br	2000b60 <__mulsf3+0xac>

02000c94 <__divsf3>:
 2000c94:	defff304 	addi	sp,sp,-52
 2000c98:	dc400b15 	stw	r17,44(sp)
 2000c9c:	dc400204 	addi	r17,sp,8
 2000ca0:	dc000a15 	stw	r16,40(sp)
 2000ca4:	d9000015 	stw	r4,0(sp)
 2000ca8:	d9400115 	stw	r5,4(sp)
 2000cac:	d809883a 	mov	r4,sp
 2000cb0:	880b883a 	mov	r5,r17
 2000cb4:	dc000604 	addi	r16,sp,24
 2000cb8:	dfc00c15 	stw	ra,48(sp)
 2000cbc:	200145c0 	call	200145c <__unpack_f>
 2000cc0:	d9000104 	addi	r4,sp,4
 2000cc4:	800b883a 	mov	r5,r16
 2000cc8:	200145c0 	call	200145c <__unpack_f>
 2000ccc:	d9000217 	ldw	r4,8(sp)
 2000cd0:	00800044 	movi	r2,1
 2000cd4:	01800104 	movi	r6,4
 2000cd8:	11000a2e 	bgeu	r2,r4,2000d04 <__divsf3+0x70>
 2000cdc:	d9400617 	ldw	r5,24(sp)
 2000ce0:	1140432e 	bgeu	r2,r5,2000df0 <__divsf3+0x15c>
 2000ce4:	d8800317 	ldw	r2,12(sp)
 2000ce8:	d8c00717 	ldw	r3,28(sp)
 2000cec:	10c4f03a 	xor	r2,r2,r3
 2000cf0:	d8800315 	stw	r2,12(sp)
 2000cf4:	21800226 	beq	r4,r6,2000d00 <__divsf3+0x6c>
 2000cf8:	00800084 	movi	r2,2
 2000cfc:	2080101e 	bne	r4,r2,2000d40 <__divsf3+0xac>
 2000d00:	29000726 	beq	r5,r4,2000d20 <__divsf3+0x8c>
 2000d04:	8809883a 	mov	r4,r17
 2000d08:	20012fc0 	call	20012fc <__pack_f>
 2000d0c:	dfc00c17 	ldw	ra,48(sp)
 2000d10:	dc400b17 	ldw	r17,44(sp)
 2000d14:	dc000a17 	ldw	r16,40(sp)
 2000d18:	dec00d04 	addi	sp,sp,52
 2000d1c:	f800283a 	ret
 2000d20:	01008074 	movhi	r4,513
 2000d24:	213cc504 	addi	r4,r4,-3308
 2000d28:	20012fc0 	call	20012fc <__pack_f>
 2000d2c:	dfc00c17 	ldw	ra,48(sp)
 2000d30:	dc400b17 	ldw	r17,44(sp)
 2000d34:	dc000a17 	ldw	r16,40(sp)
 2000d38:	dec00d04 	addi	sp,sp,52
 2000d3c:	f800283a 	ret
 2000d40:	29802d26 	beq	r5,r6,2000df8 <__divsf3+0x164>
 2000d44:	28801a26 	beq	r5,r2,2000db0 <__divsf3+0x11c>
 2000d48:	d8c00417 	ldw	r3,16(sp)
 2000d4c:	d8800817 	ldw	r2,32(sp)
 2000d50:	d9000517 	ldw	r4,20(sp)
 2000d54:	d9800917 	ldw	r6,36(sp)
 2000d58:	1885c83a 	sub	r2,r3,r2
 2000d5c:	d8800415 	stw	r2,16(sp)
 2000d60:	2180032e 	bgeu	r4,r6,2000d70 <__divsf3+0xdc>
 2000d64:	10bfffc4 	addi	r2,r2,-1
 2000d68:	d8800415 	stw	r2,16(sp)
 2000d6c:	2109883a 	add	r4,r4,r4
 2000d70:	01500034 	movhi	r5,16384
 2000d74:	0007883a 	mov	r3,zero
 2000d78:	0005883a 	mov	r2,zero
 2000d7c:	01c007c4 	movi	r7,31
 2000d80:	10800044 	addi	r2,r2,1
 2000d84:	21800236 	bltu	r4,r6,2000d90 <__divsf3+0xfc>
 2000d88:	1946b03a 	or	r3,r3,r5
 2000d8c:	2189c83a 	sub	r4,r4,r6
 2000d90:	280ad07a 	srli	r5,r5,1
 2000d94:	2109883a 	add	r4,r4,r4
 2000d98:	11fff91e 	bne	r2,r7,2000d80 <__divsf3+0xec>
 2000d9c:	19401fcc 	andi	r5,r3,127
 2000da0:	00801004 	movi	r2,64
 2000da4:	28800a26 	beq	r5,r2,2000dd0 <__divsf3+0x13c>
 2000da8:	d8c00515 	stw	r3,20(sp)
 2000dac:	003fd506 	br	2000d04 <__divsf3+0x70>
 2000db0:	8809883a 	mov	r4,r17
 2000db4:	d9800215 	stw	r6,8(sp)
 2000db8:	20012fc0 	call	20012fc <__pack_f>
 2000dbc:	dfc00c17 	ldw	ra,48(sp)
 2000dc0:	dc400b17 	ldw	r17,44(sp)
 2000dc4:	dc000a17 	ldw	r16,40(sp)
 2000dc8:	dec00d04 	addi	sp,sp,52
 2000dcc:	f800283a 	ret
 2000dd0:	1880200c 	andi	r2,r3,128
 2000dd4:	103ff41e 	bne	r2,zero,2000da8 <__divsf3+0x114>
 2000dd8:	203ff326 	beq	r4,zero,2000da8 <__divsf3+0x114>
 2000ddc:	1947883a 	add	r3,r3,r5
 2000de0:	00bfe004 	movi	r2,-128
 2000de4:	1886703a 	and	r3,r3,r2
 2000de8:	d8c00515 	stw	r3,20(sp)
 2000dec:	003fc506 	br	2000d04 <__divsf3+0x70>
 2000df0:	8009883a 	mov	r4,r16
 2000df4:	003fc406 	br	2000d08 <__divsf3+0x74>
 2000df8:	8809883a 	mov	r4,r17
 2000dfc:	d8000515 	stw	zero,20(sp)
 2000e00:	d8000415 	stw	zero,16(sp)
 2000e04:	003fc006 	br	2000d08 <__divsf3+0x74>

02000e08 <__ltsf2>:
 2000e08:	defff304 	addi	sp,sp,-52
 2000e0c:	dc400b15 	stw	r17,44(sp)
 2000e10:	dc400204 	addi	r17,sp,8
 2000e14:	dc000a15 	stw	r16,40(sp)
 2000e18:	d9000015 	stw	r4,0(sp)
 2000e1c:	d9400115 	stw	r5,4(sp)
 2000e20:	d809883a 	mov	r4,sp
 2000e24:	880b883a 	mov	r5,r17
 2000e28:	dc000604 	addi	r16,sp,24
 2000e2c:	dfc00c15 	stw	ra,48(sp)
 2000e30:	200145c0 	call	200145c <__unpack_f>
 2000e34:	d9000104 	addi	r4,sp,4
 2000e38:	800b883a 	mov	r5,r16
 2000e3c:	200145c0 	call	200145c <__unpack_f>
 2000e40:	d8800217 	ldw	r2,8(sp)
 2000e44:	00c00044 	movi	r3,1
 2000e48:	180d883a 	mov	r6,r3
 2000e4c:	1880062e 	bgeu	r3,r2,2000e68 <__ltsf2+0x60>
 2000e50:	d8800617 	ldw	r2,24(sp)
 2000e54:	8809883a 	mov	r4,r17
 2000e58:	800b883a 	mov	r5,r16
 2000e5c:	1880022e 	bgeu	r3,r2,2000e68 <__ltsf2+0x60>
 2000e60:	20015240 	call	2001524 <__fpcmp_parts_f>
 2000e64:	100d883a 	mov	r6,r2
 2000e68:	3005883a 	mov	r2,r6
 2000e6c:	dfc00c17 	ldw	ra,48(sp)
 2000e70:	dc400b17 	ldw	r17,44(sp)
 2000e74:	dc000a17 	ldw	r16,40(sp)
 2000e78:	dec00d04 	addi	sp,sp,52
 2000e7c:	f800283a 	ret

02000e80 <__floatsisf>:
 2000e80:	2006d7fa 	srli	r3,r4,31
 2000e84:	defffa04 	addi	sp,sp,-24
 2000e88:	008000c4 	movi	r2,3
 2000e8c:	dfc00515 	stw	ra,20(sp)
 2000e90:	dc000415 	stw	r16,16(sp)
 2000e94:	d8800015 	stw	r2,0(sp)
 2000e98:	d8c00115 	stw	r3,4(sp)
 2000e9c:	2000081e 	bne	r4,zero,2000ec0 <__floatsisf+0x40>
 2000ea0:	00800084 	movi	r2,2
 2000ea4:	d8800015 	stw	r2,0(sp)
 2000ea8:	d809883a 	mov	r4,sp
 2000eac:	20012fc0 	call	20012fc <__pack_f>
 2000eb0:	dfc00517 	ldw	ra,20(sp)
 2000eb4:	dc000417 	ldw	r16,16(sp)
 2000eb8:	dec00604 	addi	sp,sp,24
 2000ebc:	f800283a 	ret
 2000ec0:	00800784 	movi	r2,30
 2000ec4:	1807003a 	cmpeq	r3,r3,zero
 2000ec8:	d8800215 	stw	r2,8(sp)
 2000ecc:	18000e1e 	bne	r3,zero,2000f08 <__floatsisf+0x88>
 2000ed0:	00a00034 	movhi	r2,32768
 2000ed4:	20800e26 	beq	r4,r2,2000f10 <__floatsisf+0x90>
 2000ed8:	0121c83a 	sub	r16,zero,r4
 2000edc:	8009883a 	mov	r4,r16
 2000ee0:	dc000315 	stw	r16,12(sp)
 2000ee4:	200127c0 	call	200127c <__clzsi2>
 2000ee8:	117fffc4 	addi	r5,r2,-1
 2000eec:	017fee0e 	bge	zero,r5,2000ea8 <__floatsisf+0x28>
 2000ef0:	d8800217 	ldw	r2,8(sp)
 2000ef4:	8146983a 	sll	r3,r16,r5
 2000ef8:	1145c83a 	sub	r2,r2,r5
 2000efc:	d8c00315 	stw	r3,12(sp)
 2000f00:	d8800215 	stw	r2,8(sp)
 2000f04:	003fe806 	br	2000ea8 <__floatsisf+0x28>
 2000f08:	2021883a 	mov	r16,r4
 2000f0c:	003ff306 	br	2000edc <__floatsisf+0x5c>
 2000f10:	00b3c034 	movhi	r2,52992
 2000f14:	003fe606 	br	2000eb0 <__floatsisf+0x30>

02000f18 <__ltdf2>:
 2000f18:	deffef04 	addi	sp,sp,-68
 2000f1c:	dc400f15 	stw	r17,60(sp)
 2000f20:	dc400404 	addi	r17,sp,16
 2000f24:	2005883a 	mov	r2,r4
 2000f28:	2807883a 	mov	r3,r5
 2000f2c:	dc000e15 	stw	r16,56(sp)
 2000f30:	d809883a 	mov	r4,sp
 2000f34:	880b883a 	mov	r5,r17
 2000f38:	dc000904 	addi	r16,sp,36
 2000f3c:	d8c00115 	stw	r3,4(sp)
 2000f40:	d8800015 	stw	r2,0(sp)
 2000f44:	d9800215 	stw	r6,8(sp)
 2000f48:	dfc01015 	stw	ra,64(sp)
 2000f4c:	d9c00315 	stw	r7,12(sp)
 2000f50:	20018e00 	call	20018e0 <__unpack_d>
 2000f54:	d9000204 	addi	r4,sp,8
 2000f58:	800b883a 	mov	r5,r16
 2000f5c:	20018e00 	call	20018e0 <__unpack_d>
 2000f60:	d8800417 	ldw	r2,16(sp)
 2000f64:	00c00044 	movi	r3,1
 2000f68:	180d883a 	mov	r6,r3
 2000f6c:	1880062e 	bgeu	r3,r2,2000f88 <__ltdf2+0x70>
 2000f70:	d8800917 	ldw	r2,36(sp)
 2000f74:	8809883a 	mov	r4,r17
 2000f78:	800b883a 	mov	r5,r16
 2000f7c:	1880022e 	bgeu	r3,r2,2000f88 <__ltdf2+0x70>
 2000f80:	2001a180 	call	2001a18 <__fpcmp_parts_d>
 2000f84:	100d883a 	mov	r6,r2
 2000f88:	3005883a 	mov	r2,r6
 2000f8c:	dfc01017 	ldw	ra,64(sp)
 2000f90:	dc400f17 	ldw	r17,60(sp)
 2000f94:	dc000e17 	ldw	r16,56(sp)
 2000f98:	dec01104 	addi	sp,sp,68
 2000f9c:	f800283a 	ret

02000fa0 <__floatsidf>:
 2000fa0:	2006d7fa 	srli	r3,r4,31
 2000fa4:	defff604 	addi	sp,sp,-40
 2000fa8:	008000c4 	movi	r2,3
 2000fac:	dfc00915 	stw	ra,36(sp)
 2000fb0:	dcc00815 	stw	r19,32(sp)
 2000fb4:	dc800715 	stw	r18,28(sp)
 2000fb8:	dc400615 	stw	r17,24(sp)
 2000fbc:	dc000515 	stw	r16,20(sp)
 2000fc0:	d8800015 	stw	r2,0(sp)
 2000fc4:	d8c00115 	stw	r3,4(sp)
 2000fc8:	20000f1e 	bne	r4,zero,2001008 <__floatsidf+0x68>
 2000fcc:	00800084 	movi	r2,2
 2000fd0:	d8800015 	stw	r2,0(sp)
 2000fd4:	d809883a 	mov	r4,sp
 2000fd8:	20015cc0 	call	20015cc <__pack_d>
 2000fdc:	1009883a 	mov	r4,r2
 2000fe0:	180b883a 	mov	r5,r3
 2000fe4:	2005883a 	mov	r2,r4
 2000fe8:	2807883a 	mov	r3,r5
 2000fec:	dfc00917 	ldw	ra,36(sp)
 2000ff0:	dcc00817 	ldw	r19,32(sp)
 2000ff4:	dc800717 	ldw	r18,28(sp)
 2000ff8:	dc400617 	ldw	r17,24(sp)
 2000ffc:	dc000517 	ldw	r16,20(sp)
 2001000:	dec00a04 	addi	sp,sp,40
 2001004:	f800283a 	ret
 2001008:	00800f04 	movi	r2,60
 200100c:	1807003a 	cmpeq	r3,r3,zero
 2001010:	d8800215 	stw	r2,8(sp)
 2001014:	18001126 	beq	r3,zero,200105c <__floatsidf+0xbc>
 2001018:	0027883a 	mov	r19,zero
 200101c:	2025883a 	mov	r18,r4
 2001020:	d9000315 	stw	r4,12(sp)
 2001024:	dcc00415 	stw	r19,16(sp)
 2001028:	200127c0 	call	200127c <__clzsi2>
 200102c:	11000744 	addi	r4,r2,29
 2001030:	013fe80e 	bge	zero,r4,2000fd4 <__floatsidf+0x34>
 2001034:	10bfff44 	addi	r2,r2,-3
 2001038:	10000c16 	blt	r2,zero,200106c <__floatsidf+0xcc>
 200103c:	90a2983a 	sll	r17,r18,r2
 2001040:	0021883a 	mov	r16,zero
 2001044:	d8800217 	ldw	r2,8(sp)
 2001048:	dc400415 	stw	r17,16(sp)
 200104c:	dc000315 	stw	r16,12(sp)
 2001050:	1105c83a 	sub	r2,r2,r4
 2001054:	d8800215 	stw	r2,8(sp)
 2001058:	003fde06 	br	2000fd4 <__floatsidf+0x34>
 200105c:	00a00034 	movhi	r2,32768
 2001060:	20800a26 	beq	r4,r2,200108c <__floatsidf+0xec>
 2001064:	0109c83a 	sub	r4,zero,r4
 2001068:	003feb06 	br	2001018 <__floatsidf+0x78>
 200106c:	9006d07a 	srli	r3,r18,1
 2001070:	008007c4 	movi	r2,31
 2001074:	1105c83a 	sub	r2,r2,r4
 2001078:	1886d83a 	srl	r3,r3,r2
 200107c:	9922983a 	sll	r17,r19,r4
 2001080:	9120983a 	sll	r16,r18,r4
 2001084:	1c62b03a 	or	r17,r3,r17
 2001088:	003fee06 	br	2001044 <__floatsidf+0xa4>
 200108c:	0009883a 	mov	r4,zero
 2001090:	01707834 	movhi	r5,49632
 2001094:	003fd306 	br	2000fe4 <__floatsidf+0x44>

02001098 <udivmodsi4>:
 2001098:	29001b2e 	bgeu	r5,r4,2001108 <udivmodsi4+0x70>
 200109c:	28001a16 	blt	r5,zero,2001108 <udivmodsi4+0x70>
 20010a0:	00800044 	movi	r2,1
 20010a4:	0007883a 	mov	r3,zero
 20010a8:	01c007c4 	movi	r7,31
 20010ac:	00000306 	br	20010bc <udivmodsi4+0x24>
 20010b0:	19c01326 	beq	r3,r7,2001100 <udivmodsi4+0x68>
 20010b4:	18c00044 	addi	r3,r3,1
 20010b8:	28000416 	blt	r5,zero,20010cc <udivmodsi4+0x34>
 20010bc:	294b883a 	add	r5,r5,r5
 20010c0:	1085883a 	add	r2,r2,r2
 20010c4:	293ffa36 	bltu	r5,r4,20010b0 <udivmodsi4+0x18>
 20010c8:	10000d26 	beq	r2,zero,2001100 <udivmodsi4+0x68>
 20010cc:	0007883a 	mov	r3,zero
 20010d0:	21400236 	bltu	r4,r5,20010dc <udivmodsi4+0x44>
 20010d4:	2149c83a 	sub	r4,r4,r5
 20010d8:	1886b03a 	or	r3,r3,r2
 20010dc:	1004d07a 	srli	r2,r2,1
 20010e0:	280ad07a 	srli	r5,r5,1
 20010e4:	103ffa1e 	bne	r2,zero,20010d0 <udivmodsi4+0x38>
 20010e8:	30000226 	beq	r6,zero,20010f4 <udivmodsi4+0x5c>
 20010ec:	2005883a 	mov	r2,r4
 20010f0:	f800283a 	ret
 20010f4:	1809883a 	mov	r4,r3
 20010f8:	2005883a 	mov	r2,r4
 20010fc:	f800283a 	ret
 2001100:	0007883a 	mov	r3,zero
 2001104:	003ff806 	br	20010e8 <udivmodsi4+0x50>
 2001108:	00800044 	movi	r2,1
 200110c:	0007883a 	mov	r3,zero
 2001110:	003fef06 	br	20010d0 <udivmodsi4+0x38>

02001114 <__divsi3>:
 2001114:	defffe04 	addi	sp,sp,-8
 2001118:	dc000015 	stw	r16,0(sp)
 200111c:	dfc00115 	stw	ra,4(sp)
 2001120:	0021883a 	mov	r16,zero
 2001124:	20000c16 	blt	r4,zero,2001158 <__divsi3+0x44>
 2001128:	000d883a 	mov	r6,zero
 200112c:	28000e16 	blt	r5,zero,2001168 <__divsi3+0x54>
 2001130:	20010980 	call	2001098 <udivmodsi4>
 2001134:	1007883a 	mov	r3,r2
 2001138:	8005003a 	cmpeq	r2,r16,zero
 200113c:	1000011e 	bne	r2,zero,2001144 <__divsi3+0x30>
 2001140:	00c7c83a 	sub	r3,zero,r3
 2001144:	1805883a 	mov	r2,r3
 2001148:	dfc00117 	ldw	ra,4(sp)
 200114c:	dc000017 	ldw	r16,0(sp)
 2001150:	dec00204 	addi	sp,sp,8
 2001154:	f800283a 	ret
 2001158:	0109c83a 	sub	r4,zero,r4
 200115c:	04000044 	movi	r16,1
 2001160:	000d883a 	mov	r6,zero
 2001164:	283ff20e 	bge	r5,zero,2001130 <__divsi3+0x1c>
 2001168:	014bc83a 	sub	r5,zero,r5
 200116c:	8021003a 	cmpeq	r16,r16,zero
 2001170:	003fef06 	br	2001130 <__divsi3+0x1c>

02001174 <__modsi3>:
 2001174:	deffff04 	addi	sp,sp,-4
 2001178:	dfc00015 	stw	ra,0(sp)
 200117c:	01800044 	movi	r6,1
 2001180:	2807883a 	mov	r3,r5
 2001184:	20000416 	blt	r4,zero,2001198 <__modsi3+0x24>
 2001188:	28000c16 	blt	r5,zero,20011bc <__modsi3+0x48>
 200118c:	dfc00017 	ldw	ra,0(sp)
 2001190:	dec00104 	addi	sp,sp,4
 2001194:	20010981 	jmpi	2001098 <udivmodsi4>
 2001198:	0109c83a 	sub	r4,zero,r4
 200119c:	28000b16 	blt	r5,zero,20011cc <__modsi3+0x58>
 20011a0:	180b883a 	mov	r5,r3
 20011a4:	01800044 	movi	r6,1
 20011a8:	20010980 	call	2001098 <udivmodsi4>
 20011ac:	0085c83a 	sub	r2,zero,r2
 20011b0:	dfc00017 	ldw	ra,0(sp)
 20011b4:	dec00104 	addi	sp,sp,4
 20011b8:	f800283a 	ret
 20011bc:	014bc83a 	sub	r5,zero,r5
 20011c0:	dfc00017 	ldw	ra,0(sp)
 20011c4:	dec00104 	addi	sp,sp,4
 20011c8:	20010981 	jmpi	2001098 <udivmodsi4>
 20011cc:	0147c83a 	sub	r3,zero,r5
 20011d0:	003ff306 	br	20011a0 <__modsi3+0x2c>

020011d4 <__udivsi3>:
 20011d4:	000d883a 	mov	r6,zero
 20011d8:	20010981 	jmpi	2001098 <udivmodsi4>

020011dc <__umodsi3>:
 20011dc:	01800044 	movi	r6,1
 20011e0:	20010981 	jmpi	2001098 <udivmodsi4>

020011e4 <__muldi3>:
 20011e4:	2011883a 	mov	r8,r4
 20011e8:	427fffcc 	andi	r9,r8,65535
 20011ec:	4018d43a 	srli	r12,r8,16
 20011f0:	32bfffcc 	andi	r10,r6,65535
 20011f4:	3016d43a 	srli	r11,r6,16
 20011f8:	4a85383a 	mul	r2,r9,r10
 20011fc:	6295383a 	mul	r10,r12,r10
 2001200:	4ad3383a 	mul	r9,r9,r11
 2001204:	113fffcc 	andi	r4,r2,65535
 2001208:	1004d43a 	srli	r2,r2,16
 200120c:	4a93883a 	add	r9,r9,r10
 2001210:	3807883a 	mov	r3,r7
 2001214:	1245883a 	add	r2,r2,r9
 2001218:	280f883a 	mov	r7,r5
 200121c:	180b883a 	mov	r5,r3
 2001220:	1006943a 	slli	r3,r2,16
 2001224:	defffd04 	addi	sp,sp,-12
 2001228:	dc800215 	stw	r18,8(sp)
 200122c:	1907883a 	add	r3,r3,r4
 2001230:	dc400115 	stw	r17,4(sp)
 2001234:	dc000015 	stw	r16,0(sp)
 2001238:	4165383a 	mul	r18,r8,r5
 200123c:	31e3383a 	mul	r17,r6,r7
 2001240:	1012d43a 	srli	r9,r2,16
 2001244:	62d9383a 	mul	r12,r12,r11
 2001248:	181f883a 	mov	r15,r3
 200124c:	1280022e 	bgeu	r2,r10,2001258 <__muldi3+0x74>
 2001250:	00800074 	movhi	r2,1
 2001254:	6099883a 	add	r12,r12,r2
 2001258:	624d883a 	add	r6,r12,r9
 200125c:	9187883a 	add	r3,r18,r6
 2001260:	88c7883a 	add	r3,r17,r3
 2001264:	7805883a 	mov	r2,r15
 2001268:	dc800217 	ldw	r18,8(sp)
 200126c:	dc400117 	ldw	r17,4(sp)
 2001270:	dc000017 	ldw	r16,0(sp)
 2001274:	dec00304 	addi	sp,sp,12
 2001278:	f800283a 	ret

0200127c <__clzsi2>:
 200127c:	00bfffd4 	movui	r2,65535
 2001280:	11000e36 	bltu	r2,r4,20012bc <__clzsi2+0x40>
 2001284:	00803fc4 	movi	r2,255
 2001288:	01400204 	movi	r5,8
 200128c:	0007883a 	mov	r3,zero
 2001290:	11001036 	bltu	r2,r4,20012d4 <__clzsi2+0x58>
 2001294:	000b883a 	mov	r5,zero
 2001298:	20c6d83a 	srl	r3,r4,r3
 200129c:	00808074 	movhi	r2,513
 20012a0:	10bcc904 	addi	r2,r2,-3292
 20012a4:	1887883a 	add	r3,r3,r2
 20012a8:	18800003 	ldbu	r2,0(r3)
 20012ac:	00c00804 	movi	r3,32
 20012b0:	2885883a 	add	r2,r5,r2
 20012b4:	1885c83a 	sub	r2,r3,r2
 20012b8:	f800283a 	ret
 20012bc:	01400404 	movi	r5,16
 20012c0:	00804034 	movhi	r2,256
 20012c4:	10bfffc4 	addi	r2,r2,-1
 20012c8:	2807883a 	mov	r3,r5
 20012cc:	113ff22e 	bgeu	r2,r4,2001298 <__clzsi2+0x1c>
 20012d0:	01400604 	movi	r5,24
 20012d4:	2807883a 	mov	r3,r5
 20012d8:	20c6d83a 	srl	r3,r4,r3
 20012dc:	00808074 	movhi	r2,513
 20012e0:	10bcc904 	addi	r2,r2,-3292
 20012e4:	1887883a 	add	r3,r3,r2
 20012e8:	18800003 	ldbu	r2,0(r3)
 20012ec:	00c00804 	movi	r3,32
 20012f0:	2885883a 	add	r2,r5,r2
 20012f4:	1885c83a 	sub	r2,r3,r2
 20012f8:	f800283a 	ret

020012fc <__pack_f>:
 20012fc:	20c00017 	ldw	r3,0(r4)
 2001300:	01c00044 	movi	r7,1
 2001304:	21800317 	ldw	r6,12(r4)
 2001308:	21400117 	ldw	r5,4(r4)
 200130c:	38c02d2e 	bgeu	r7,r3,20013c4 <__pack_f+0xc8>
 2001310:	00800104 	movi	r2,4
 2001314:	18802826 	beq	r3,r2,20013b8 <__pack_f+0xbc>
 2001318:	00800084 	movi	r2,2
 200131c:	18800126 	beq	r3,r2,2001324 <__pack_f+0x28>
 2001320:	3000101e 	bne	r6,zero,2001364 <__pack_f+0x68>
 2001324:	000d883a 	mov	r6,zero
 2001328:	0007883a 	mov	r3,zero
 200132c:	19003fcc 	andi	r4,r3,255
 2001330:	200895fa 	slli	r4,r4,23
 2001334:	00c02034 	movhi	r3,128
 2001338:	18ffffc4 	addi	r3,r3,-1
 200133c:	30c6703a 	and	r3,r6,r3
 2001340:	10a0002c 	andhi	r2,r2,32768
 2001344:	10c4b03a 	or	r2,r2,r3
 2001348:	280a97fa 	slli	r5,r5,31
 200134c:	1104b03a 	or	r2,r2,r4
 2001350:	00e00034 	movhi	r3,32768
 2001354:	18ffffc4 	addi	r3,r3,-1
 2001358:	10c4703a 	and	r2,r2,r3
 200135c:	1144b03a 	or	r2,r2,r5
 2001360:	f800283a 	ret
 2001364:	21000217 	ldw	r4,8(r4)
 2001368:	00bfe084 	movi	r2,-126
 200136c:	20801b16 	blt	r4,r2,20013dc <__pack_f+0xe0>
 2001370:	00801fc4 	movi	r2,127
 2001374:	11001016 	blt	r2,r4,20013b8 <__pack_f+0xbc>
 2001378:	308e703a 	and	r7,r6,r2
 200137c:	2087883a 	add	r3,r4,r2
 2001380:	00801004 	movi	r2,64
 2001384:	38800526 	beq	r7,r2,200139c <__pack_f+0xa0>
 2001388:	31800fc4 	addi	r6,r6,63
 200138c:	30000716 	blt	r6,zero,20013ac <__pack_f+0xb0>
 2001390:	300490ba 	slli	r2,r6,2
 2001394:	100cd27a 	srli	r6,r2,9
 2001398:	003fe406 	br	200132c <__pack_f+0x30>
 200139c:	3080200c 	andi	r2,r6,128
 20013a0:	103ffa26 	beq	r2,zero,200138c <__pack_f+0x90>
 20013a4:	31cd883a 	add	r6,r6,r7
 20013a8:	003ff806 	br	200138c <__pack_f+0x90>
 20013ac:	300cd07a 	srli	r6,r6,1
 20013b0:	18c00044 	addi	r3,r3,1
 20013b4:	003ff606 	br	2001390 <__pack_f+0x94>
 20013b8:	000d883a 	mov	r6,zero
 20013bc:	00ffffc4 	movi	r3,-1
 20013c0:	003fda06 	br	200132c <__pack_f+0x30>
 20013c4:	31800434 	orhi	r6,r6,16
 20013c8:	00802034 	movhi	r2,128
 20013cc:	10bfffc4 	addi	r2,r2,-1
 20013d0:	308c703a 	and	r6,r6,r2
 20013d4:	00ffffc4 	movi	r3,-1
 20013d8:	003fd406 	br	200132c <__pack_f+0x30>
 20013dc:	1109c83a 	sub	r4,r2,r4
 20013e0:	00800644 	movi	r2,25
 20013e4:	11001216 	blt	r2,r4,2001430 <__pack_f+0x134>
 20013e8:	3904983a 	sll	r2,r7,r4
 20013ec:	3106d83a 	srl	r3,r6,r4
 20013f0:	10bfffc4 	addi	r2,r2,-1
 20013f4:	3084703a 	and	r2,r6,r2
 20013f8:	1004c03a 	cmpne	r2,r2,zero
 20013fc:	1886b03a 	or	r3,r3,r2
 2001400:	19001fcc 	andi	r4,r3,127
 2001404:	00801004 	movi	r2,64
 2001408:	20800c26 	beq	r4,r2,200143c <__pack_f+0x140>
 200140c:	18c00fc4 	addi	r3,r3,63
 2001410:	00900034 	movhi	r2,16384
 2001414:	10bfffc4 	addi	r2,r2,-1
 2001418:	180cd1fa 	srli	r6,r3,7
 200141c:	10c7803a 	cmpltu	r3,r2,r3
 2001420:	00802034 	movhi	r2,128
 2001424:	10bfffc4 	addi	r2,r2,-1
 2001428:	308c703a 	and	r6,r6,r2
 200142c:	003fbf06 	br	200132c <__pack_f+0x30>
 2001430:	0007883a 	mov	r3,zero
 2001434:	000d883a 	mov	r6,zero
 2001438:	003ff906 	br	2001420 <__pack_f+0x124>
 200143c:	1880200c 	andi	r2,r3,128
 2001440:	10000126 	beq	r2,zero,2001448 <__pack_f+0x14c>
 2001444:	1907883a 	add	r3,r3,r4
 2001448:	180cd1fa 	srli	r6,r3,7
 200144c:	00900034 	movhi	r2,16384
 2001450:	10bfffc4 	addi	r2,r2,-1
 2001454:	10c7803a 	cmpltu	r3,r2,r3
 2001458:	003ff106 	br	2001420 <__pack_f+0x124>

0200145c <__unpack_f>:
 200145c:	21800017 	ldw	r6,0(r4)
 2001460:	00c02034 	movhi	r3,128
 2001464:	18ffffc4 	addi	r3,r3,-1
 2001468:	3004d5fa 	srli	r2,r6,23
 200146c:	3008d7fa 	srli	r4,r6,31
 2001470:	30ce703a 	and	r7,r6,r3
 2001474:	10c03fcc 	andi	r3,r2,255
 2001478:	29000115 	stw	r4,4(r5)
 200147c:	1800131e 	bne	r3,zero,20014cc <__unpack_f+0x70>
 2001480:	38000f26 	beq	r7,zero,20014c0 <__unpack_f+0x64>
 2001484:	380691fa 	slli	r3,r7,7
 2001488:	01bfe084 	movi	r6,-126
 200148c:	008000c4 	movi	r2,3
 2001490:	01100034 	movhi	r4,16384
 2001494:	213fffc4 	addi	r4,r4,-1
 2001498:	28800015 	stw	r2,0(r5)
 200149c:	29800215 	stw	r6,8(r5)
 20014a0:	20c00536 	bltu	r4,r3,20014b8 <__unpack_f+0x5c>
 20014a4:	3005883a 	mov	r2,r6
 20014a8:	18c7883a 	add	r3,r3,r3
 20014ac:	10bfffc4 	addi	r2,r2,-1
 20014b0:	20fffd2e 	bgeu	r4,r3,20014a8 <__unpack_f+0x4c>
 20014b4:	28800215 	stw	r2,8(r5)
 20014b8:	28c00315 	stw	r3,12(r5)
 20014bc:	f800283a 	ret
 20014c0:	00800084 	movi	r2,2
 20014c4:	28800015 	stw	r2,0(r5)
 20014c8:	f800283a 	ret
 20014cc:	00803fc4 	movi	r2,255
 20014d0:	18800826 	beq	r3,r2,20014f4 <__unpack_f+0x98>
 20014d4:	380491fa 	slli	r2,r7,7
 20014d8:	18ffe044 	addi	r3,r3,-127
 20014dc:	28c00215 	stw	r3,8(r5)
 20014e0:	10900034 	orhi	r2,r2,16384
 20014e4:	28800315 	stw	r2,12(r5)
 20014e8:	008000c4 	movi	r2,3
 20014ec:	28800015 	stw	r2,0(r5)
 20014f0:	f800283a 	ret
 20014f4:	3800031e 	bne	r7,zero,2001504 <__unpack_f+0xa8>
 20014f8:	00800104 	movi	r2,4
 20014fc:	28800015 	stw	r2,0(r5)
 2001500:	f800283a 	ret
 2001504:	3080042c 	andhi	r2,r6,16
 2001508:	10000426 	beq	r2,zero,200151c <__unpack_f+0xc0>
 200150c:	00800044 	movi	r2,1
 2001510:	28800015 	stw	r2,0(r5)
 2001514:	29c00315 	stw	r7,12(r5)
 2001518:	f800283a 	ret
 200151c:	28000015 	stw	zero,0(r5)
 2001520:	003ffc06 	br	2001514 <__unpack_f+0xb8>

02001524 <__fpcmp_parts_f>:
 2001524:	21800017 	ldw	r6,0(r4)
 2001528:	00c00044 	movi	r3,1
 200152c:	19800a2e 	bgeu	r3,r6,2001558 <__fpcmp_parts_f+0x34>
 2001530:	28800017 	ldw	r2,0(r5)
 2001534:	1880082e 	bgeu	r3,r2,2001558 <__fpcmp_parts_f+0x34>
 2001538:	00c00104 	movi	r3,4
 200153c:	30c01e26 	beq	r6,r3,20015b8 <__fpcmp_parts_f+0x94>
 2001540:	10c01a26 	beq	r2,r3,20015ac <__fpcmp_parts_f+0x88>
 2001544:	00c00084 	movi	r3,2
 2001548:	30c00526 	beq	r6,r3,2001560 <__fpcmp_parts_f+0x3c>
 200154c:	10c0071e 	bne	r2,r3,200156c <__fpcmp_parts_f+0x48>
 2001550:	20800117 	ldw	r2,4(r4)
 2001554:	1000091e 	bne	r2,zero,200157c <__fpcmp_parts_f+0x58>
 2001558:	00800044 	movi	r2,1
 200155c:	f800283a 	ret
 2001560:	10c0121e 	bne	r2,r3,20015ac <__fpcmp_parts_f+0x88>
 2001564:	0005883a 	mov	r2,zero
 2001568:	f800283a 	ret
 200156c:	20c00117 	ldw	r3,4(r4)
 2001570:	28800117 	ldw	r2,4(r5)
 2001574:	18800326 	beq	r3,r2,2001584 <__fpcmp_parts_f+0x60>
 2001578:	183ff726 	beq	r3,zero,2001558 <__fpcmp_parts_f+0x34>
 200157c:	00bfffc4 	movi	r2,-1
 2001580:	f800283a 	ret
 2001584:	21800217 	ldw	r6,8(r4)
 2001588:	28800217 	ldw	r2,8(r5)
 200158c:	11bffa16 	blt	r2,r6,2001578 <__fpcmp_parts_f+0x54>
 2001590:	30800416 	blt	r6,r2,20015a4 <__fpcmp_parts_f+0x80>
 2001594:	21000317 	ldw	r4,12(r4)
 2001598:	29400317 	ldw	r5,12(r5)
 200159c:	293ff636 	bltu	r5,r4,2001578 <__fpcmp_parts_f+0x54>
 20015a0:	217ff02e 	bgeu	r4,r5,2001564 <__fpcmp_parts_f+0x40>
 20015a4:	183fec1e 	bne	r3,zero,2001558 <__fpcmp_parts_f+0x34>
 20015a8:	003ff406 	br	200157c <__fpcmp_parts_f+0x58>
 20015ac:	28800117 	ldw	r2,4(r5)
 20015b0:	103fe91e 	bne	r2,zero,2001558 <__fpcmp_parts_f+0x34>
 20015b4:	003ff106 	br	200157c <__fpcmp_parts_f+0x58>
 20015b8:	11bfe51e 	bne	r2,r6,2001550 <__fpcmp_parts_f+0x2c>
 20015bc:	28c00117 	ldw	r3,4(r5)
 20015c0:	20800117 	ldw	r2,4(r4)
 20015c4:	1885c83a 	sub	r2,r3,r2
 20015c8:	f800283a 	ret

020015cc <__pack_d>:
 20015cc:	20c00017 	ldw	r3,0(r4)
 20015d0:	defffd04 	addi	sp,sp,-12
 20015d4:	dc000015 	stw	r16,0(sp)
 20015d8:	dc800215 	stw	r18,8(sp)
 20015dc:	dc400115 	stw	r17,4(sp)
 20015e0:	00800044 	movi	r2,1
 20015e4:	22000317 	ldw	r8,12(r4)
 20015e8:	001f883a 	mov	r15,zero
 20015ec:	22400417 	ldw	r9,16(r4)
 20015f0:	24000117 	ldw	r16,4(r4)
 20015f4:	10c0552e 	bgeu	r2,r3,200174c <__pack_d+0x180>
 20015f8:	00800104 	movi	r2,4
 20015fc:	18804f26 	beq	r3,r2,200173c <__pack_d+0x170>
 2001600:	00800084 	movi	r2,2
 2001604:	18800226 	beq	r3,r2,2001610 <__pack_d+0x44>
 2001608:	4244b03a 	or	r2,r8,r9
 200160c:	10001a1e 	bne	r2,zero,2001678 <__pack_d+0xac>
 2001610:	000d883a 	mov	r6,zero
 2001614:	000f883a 	mov	r7,zero
 2001618:	0011883a 	mov	r8,zero
 200161c:	00800434 	movhi	r2,16
 2001620:	10bfffc4 	addi	r2,r2,-1
 2001624:	301d883a 	mov	r14,r6
 2001628:	3884703a 	and	r2,r7,r2
 200162c:	400a953a 	slli	r5,r8,20
 2001630:	79bffc2c 	andhi	r6,r15,65520
 2001634:	308cb03a 	or	r6,r6,r2
 2001638:	00e00434 	movhi	r3,32784
 200163c:	18ffffc4 	addi	r3,r3,-1
 2001640:	800497fa 	slli	r2,r16,31
 2001644:	30c6703a 	and	r3,r6,r3
 2001648:	1946b03a 	or	r3,r3,r5
 200164c:	01600034 	movhi	r5,32768
 2001650:	297fffc4 	addi	r5,r5,-1
 2001654:	194a703a 	and	r5,r3,r5
 2001658:	288ab03a 	or	r5,r5,r2
 200165c:	2807883a 	mov	r3,r5
 2001660:	7005883a 	mov	r2,r14
 2001664:	dc800217 	ldw	r18,8(sp)
 2001668:	dc400117 	ldw	r17,4(sp)
 200166c:	dc000017 	ldw	r16,0(sp)
 2001670:	dec00304 	addi	sp,sp,12
 2001674:	f800283a 	ret
 2001678:	21000217 	ldw	r4,8(r4)
 200167c:	00bf0084 	movi	r2,-1022
 2001680:	20803f16 	blt	r4,r2,2001780 <__pack_d+0x1b4>
 2001684:	0080ffc4 	movi	r2,1023
 2001688:	11002c16 	blt	r2,r4,200173c <__pack_d+0x170>
 200168c:	00803fc4 	movi	r2,255
 2001690:	408c703a 	and	r6,r8,r2
 2001694:	00802004 	movi	r2,128
 2001698:	0007883a 	mov	r3,zero
 200169c:	000f883a 	mov	r7,zero
 20016a0:	2280ffc4 	addi	r10,r4,1023
 20016a4:	30801e26 	beq	r6,r2,2001720 <__pack_d+0x154>
 20016a8:	00801fc4 	movi	r2,127
 20016ac:	4089883a 	add	r4,r8,r2
 20016b0:	220d803a 	cmpltu	r6,r4,r8
 20016b4:	324d883a 	add	r6,r6,r9
 20016b8:	2011883a 	mov	r8,r4
 20016bc:	3013883a 	mov	r9,r6
 20016c0:	00880034 	movhi	r2,8192
 20016c4:	10bfffc4 	addi	r2,r2,-1
 20016c8:	12400d36 	bltu	r2,r9,2001700 <__pack_d+0x134>
 20016cc:	4804963a 	slli	r2,r9,24
 20016d0:	400cd23a 	srli	r6,r8,8
 20016d4:	480ed23a 	srli	r7,r9,8
 20016d8:	013fffc4 	movi	r4,-1
 20016dc:	118cb03a 	or	r6,r2,r6
 20016e0:	01400434 	movhi	r5,16
 20016e4:	297fffc4 	addi	r5,r5,-1
 20016e8:	3104703a 	and	r2,r6,r4
 20016ec:	3946703a 	and	r3,r7,r5
 20016f0:	5201ffcc 	andi	r8,r10,2047
 20016f4:	100d883a 	mov	r6,r2
 20016f8:	180f883a 	mov	r7,r3
 20016fc:	003fc706 	br	200161c <__pack_d+0x50>
 2001700:	480897fa 	slli	r4,r9,31
 2001704:	4004d07a 	srli	r2,r8,1
 2001708:	4806d07a 	srli	r3,r9,1
 200170c:	52800044 	addi	r10,r10,1
 2001710:	2084b03a 	or	r2,r4,r2
 2001714:	1011883a 	mov	r8,r2
 2001718:	1813883a 	mov	r9,r3
 200171c:	003feb06 	br	20016cc <__pack_d+0x100>
 2001720:	383fe11e 	bne	r7,zero,20016a8 <__pack_d+0xdc>
 2001724:	01004004 	movi	r4,256
 2001728:	4104703a 	and	r2,r8,r4
 200172c:	10c4b03a 	or	r2,r2,r3
 2001730:	103fe326 	beq	r2,zero,20016c0 <__pack_d+0xf4>
 2001734:	3005883a 	mov	r2,r6
 2001738:	003fdc06 	br	20016ac <__pack_d+0xe0>
 200173c:	000d883a 	mov	r6,zero
 2001740:	000f883a 	mov	r7,zero
 2001744:	0201ffc4 	movi	r8,2047
 2001748:	003fb406 	br	200161c <__pack_d+0x50>
 200174c:	0005883a 	mov	r2,zero
 2001750:	00c00234 	movhi	r3,8
 2001754:	408cb03a 	or	r6,r8,r2
 2001758:	48ceb03a 	or	r7,r9,r3
 200175c:	013fffc4 	movi	r4,-1
 2001760:	01400434 	movhi	r5,16
 2001764:	297fffc4 	addi	r5,r5,-1
 2001768:	3104703a 	and	r2,r6,r4
 200176c:	3946703a 	and	r3,r7,r5
 2001770:	100d883a 	mov	r6,r2
 2001774:	180f883a 	mov	r7,r3
 2001778:	0201ffc4 	movi	r8,2047
 200177c:	003fa706 	br	200161c <__pack_d+0x50>
 2001780:	1109c83a 	sub	r4,r2,r4
 2001784:	00800e04 	movi	r2,56
 2001788:	11004316 	blt	r2,r4,2001898 <__pack_d+0x2cc>
 200178c:	21fff804 	addi	r7,r4,-32
 2001790:	38004516 	blt	r7,zero,20018a8 <__pack_d+0x2dc>
 2001794:	49d8d83a 	srl	r12,r9,r7
 2001798:	001b883a 	mov	r13,zero
 200179c:	0023883a 	mov	r17,zero
 20017a0:	01400044 	movi	r5,1
 20017a4:	0025883a 	mov	r18,zero
 20017a8:	38004716 	blt	r7,zero,20018c8 <__pack_d+0x2fc>
 20017ac:	29d6983a 	sll	r11,r5,r7
 20017b0:	0015883a 	mov	r10,zero
 20017b4:	00bfffc4 	movi	r2,-1
 20017b8:	5089883a 	add	r4,r10,r2
 20017bc:	588b883a 	add	r5,r11,r2
 20017c0:	228d803a 	cmpltu	r6,r4,r10
 20017c4:	314b883a 	add	r5,r6,r5
 20017c8:	4104703a 	and	r2,r8,r4
 20017cc:	4946703a 	and	r3,r9,r5
 20017d0:	10c4b03a 	or	r2,r2,r3
 20017d4:	10000226 	beq	r2,zero,20017e0 <__pack_d+0x214>
 20017d8:	04400044 	movi	r17,1
 20017dc:	0025883a 	mov	r18,zero
 20017e0:	00803fc4 	movi	r2,255
 20017e4:	644eb03a 	or	r7,r12,r17
 20017e8:	3892703a 	and	r9,r7,r2
 20017ec:	00802004 	movi	r2,128
 20017f0:	6c90b03a 	or	r8,r13,r18
 20017f4:	0015883a 	mov	r10,zero
 20017f8:	48801626 	beq	r9,r2,2001854 <__pack_d+0x288>
 20017fc:	01001fc4 	movi	r4,127
 2001800:	3905883a 	add	r2,r7,r4
 2001804:	11cd803a 	cmpltu	r6,r2,r7
 2001808:	320d883a 	add	r6,r6,r8
 200180c:	100f883a 	mov	r7,r2
 2001810:	00840034 	movhi	r2,4096
 2001814:	10bfffc4 	addi	r2,r2,-1
 2001818:	3011883a 	mov	r8,r6
 200181c:	0007883a 	mov	r3,zero
 2001820:	11801b36 	bltu	r2,r6,2001890 <__pack_d+0x2c4>
 2001824:	4004963a 	slli	r2,r8,24
 2001828:	3808d23a 	srli	r4,r7,8
 200182c:	400ad23a 	srli	r5,r8,8
 2001830:	1813883a 	mov	r9,r3
 2001834:	1108b03a 	or	r4,r2,r4
 2001838:	00bfffc4 	movi	r2,-1
 200183c:	00c00434 	movhi	r3,16
 2001840:	18ffffc4 	addi	r3,r3,-1
 2001844:	208c703a 	and	r6,r4,r2
 2001848:	28ce703a 	and	r7,r5,r3
 200184c:	4a01ffcc 	andi	r8,r9,2047
 2001850:	003f7206 	br	200161c <__pack_d+0x50>
 2001854:	503fe91e 	bne	r10,zero,20017fc <__pack_d+0x230>
 2001858:	01004004 	movi	r4,256
 200185c:	3904703a 	and	r2,r7,r4
 2001860:	0007883a 	mov	r3,zero
 2001864:	10c4b03a 	or	r2,r2,r3
 2001868:	10000626 	beq	r2,zero,2001884 <__pack_d+0x2b8>
 200186c:	3a45883a 	add	r2,r7,r9
 2001870:	11cd803a 	cmpltu	r6,r2,r7
 2001874:	320d883a 	add	r6,r6,r8
 2001878:	100f883a 	mov	r7,r2
 200187c:	3011883a 	mov	r8,r6
 2001880:	0007883a 	mov	r3,zero
 2001884:	00840034 	movhi	r2,4096
 2001888:	10bfffc4 	addi	r2,r2,-1
 200188c:	123fe52e 	bgeu	r2,r8,2001824 <__pack_d+0x258>
 2001890:	00c00044 	movi	r3,1
 2001894:	003fe306 	br	2001824 <__pack_d+0x258>
 2001898:	0009883a 	mov	r4,zero
 200189c:	0013883a 	mov	r9,zero
 20018a0:	000b883a 	mov	r5,zero
 20018a4:	003fe406 	br	2001838 <__pack_d+0x26c>
 20018a8:	4a47883a 	add	r3,r9,r9
 20018ac:	008007c4 	movi	r2,31
 20018b0:	1105c83a 	sub	r2,r2,r4
 20018b4:	1886983a 	sll	r3,r3,r2
 20018b8:	4118d83a 	srl	r12,r8,r4
 20018bc:	491ad83a 	srl	r13,r9,r4
 20018c0:	1b18b03a 	or	r12,r3,r12
 20018c4:	003fb506 	br	200179c <__pack_d+0x1d0>
 20018c8:	2806d07a 	srli	r3,r5,1
 20018cc:	008007c4 	movi	r2,31
 20018d0:	1105c83a 	sub	r2,r2,r4
 20018d4:	1896d83a 	srl	r11,r3,r2
 20018d8:	2914983a 	sll	r10,r5,r4
 20018dc:	003fb506 	br	20017b4 <__pack_d+0x1e8>

020018e0 <__unpack_d>:
 20018e0:	20c00117 	ldw	r3,4(r4)
 20018e4:	22400017 	ldw	r9,0(r4)
 20018e8:	00800434 	movhi	r2,16
 20018ec:	10bfffc4 	addi	r2,r2,-1
 20018f0:	1808d53a 	srli	r4,r3,20
 20018f4:	180cd7fa 	srli	r6,r3,31
 20018f8:	1894703a 	and	r10,r3,r2
 20018fc:	2201ffcc 	andi	r8,r4,2047
 2001900:	281b883a 	mov	r13,r5
 2001904:	4817883a 	mov	r11,r9
 2001908:	29800115 	stw	r6,4(r5)
 200190c:	5019883a 	mov	r12,r10
 2001910:	40001e1e 	bne	r8,zero,200198c <__unpack_d+0xac>
 2001914:	4a84b03a 	or	r2,r9,r10
 2001918:	10001926 	beq	r2,zero,2001980 <__unpack_d+0xa0>
 200191c:	4804d63a 	srli	r2,r9,24
 2001920:	500c923a 	slli	r6,r10,8
 2001924:	013f0084 	movi	r4,-1022
 2001928:	00c40034 	movhi	r3,4096
 200192c:	18ffffc4 	addi	r3,r3,-1
 2001930:	118cb03a 	or	r6,r2,r6
 2001934:	008000c4 	movi	r2,3
 2001938:	480a923a 	slli	r5,r9,8
 200193c:	68800015 	stw	r2,0(r13)
 2001940:	69000215 	stw	r4,8(r13)
 2001944:	19800b36 	bltu	r3,r6,2001974 <__unpack_d+0x94>
 2001948:	200f883a 	mov	r7,r4
 200194c:	1811883a 	mov	r8,r3
 2001950:	2945883a 	add	r2,r5,r5
 2001954:	1149803a 	cmpltu	r4,r2,r5
 2001958:	3187883a 	add	r3,r6,r6
 200195c:	20c9883a 	add	r4,r4,r3
 2001960:	100b883a 	mov	r5,r2
 2001964:	200d883a 	mov	r6,r4
 2001968:	39ffffc4 	addi	r7,r7,-1
 200196c:	413ff82e 	bgeu	r8,r4,2001950 <__unpack_d+0x70>
 2001970:	69c00215 	stw	r7,8(r13)
 2001974:	69800415 	stw	r6,16(r13)
 2001978:	69400315 	stw	r5,12(r13)
 200197c:	f800283a 	ret
 2001980:	00800084 	movi	r2,2
 2001984:	28800015 	stw	r2,0(r5)
 2001988:	f800283a 	ret
 200198c:	0081ffc4 	movi	r2,2047
 2001990:	40800f26 	beq	r8,r2,20019d0 <__unpack_d+0xf0>
 2001994:	480cd63a 	srli	r6,r9,24
 2001998:	5006923a 	slli	r3,r10,8
 200199c:	4804923a 	slli	r2,r9,8
 20019a0:	0009883a 	mov	r4,zero
 20019a4:	30c6b03a 	or	r3,r6,r3
 20019a8:	01440034 	movhi	r5,4096
 20019ac:	110cb03a 	or	r6,r2,r4
 20019b0:	423f0044 	addi	r8,r8,-1023
 20019b4:	194eb03a 	or	r7,r3,r5
 20019b8:	008000c4 	movi	r2,3
 20019bc:	69c00415 	stw	r7,16(r13)
 20019c0:	6a000215 	stw	r8,8(r13)
 20019c4:	68800015 	stw	r2,0(r13)
 20019c8:	69800315 	stw	r6,12(r13)
 20019cc:	f800283a 	ret
 20019d0:	4a84b03a 	or	r2,r9,r10
 20019d4:	1000031e 	bne	r2,zero,20019e4 <__unpack_d+0x104>
 20019d8:	00800104 	movi	r2,4
 20019dc:	28800015 	stw	r2,0(r5)
 20019e0:	f800283a 	ret
 20019e4:	0009883a 	mov	r4,zero
 20019e8:	01400234 	movhi	r5,8
 20019ec:	4904703a 	and	r2,r9,r4
 20019f0:	5146703a 	and	r3,r10,r5
 20019f4:	10c4b03a 	or	r2,r2,r3
 20019f8:	10000526 	beq	r2,zero,2001a10 <__unpack_d+0x130>
 20019fc:	00800044 	movi	r2,1
 2001a00:	68800015 	stw	r2,0(r13)
 2001a04:	6b000415 	stw	r12,16(r13)
 2001a08:	6ac00315 	stw	r11,12(r13)
 2001a0c:	f800283a 	ret
 2001a10:	68000015 	stw	zero,0(r13)
 2001a14:	003ffb06 	br	2001a04 <__unpack_d+0x124>

02001a18 <__fpcmp_parts_d>:
 2001a18:	21800017 	ldw	r6,0(r4)
 2001a1c:	00c00044 	movi	r3,1
 2001a20:	19800a2e 	bgeu	r3,r6,2001a4c <__fpcmp_parts_d+0x34>
 2001a24:	28800017 	ldw	r2,0(r5)
 2001a28:	1880082e 	bgeu	r3,r2,2001a4c <__fpcmp_parts_d+0x34>
 2001a2c:	00c00104 	movi	r3,4
 2001a30:	30c02626 	beq	r6,r3,2001acc <__fpcmp_parts_d+0xb4>
 2001a34:	10c02226 	beq	r2,r3,2001ac0 <__fpcmp_parts_d+0xa8>
 2001a38:	00c00084 	movi	r3,2
 2001a3c:	30c00526 	beq	r6,r3,2001a54 <__fpcmp_parts_d+0x3c>
 2001a40:	10c0071e 	bne	r2,r3,2001a60 <__fpcmp_parts_d+0x48>
 2001a44:	20800117 	ldw	r2,4(r4)
 2001a48:	1000091e 	bne	r2,zero,2001a70 <__fpcmp_parts_d+0x58>
 2001a4c:	00800044 	movi	r2,1
 2001a50:	f800283a 	ret
 2001a54:	10c01a1e 	bne	r2,r3,2001ac0 <__fpcmp_parts_d+0xa8>
 2001a58:	0005883a 	mov	r2,zero
 2001a5c:	f800283a 	ret
 2001a60:	22000117 	ldw	r8,4(r4)
 2001a64:	28800117 	ldw	r2,4(r5)
 2001a68:	40800326 	beq	r8,r2,2001a78 <__fpcmp_parts_d+0x60>
 2001a6c:	403ff726 	beq	r8,zero,2001a4c <__fpcmp_parts_d+0x34>
 2001a70:	00bfffc4 	movi	r2,-1
 2001a74:	f800283a 	ret
 2001a78:	20c00217 	ldw	r3,8(r4)
 2001a7c:	28800217 	ldw	r2,8(r5)
 2001a80:	10fffa16 	blt	r2,r3,2001a6c <__fpcmp_parts_d+0x54>
 2001a84:	18800916 	blt	r3,r2,2001aac <__fpcmp_parts_d+0x94>
 2001a88:	21c00417 	ldw	r7,16(r4)
 2001a8c:	28c00417 	ldw	r3,16(r5)
 2001a90:	21800317 	ldw	r6,12(r4)
 2001a94:	28800317 	ldw	r2,12(r5)
 2001a98:	19fff436 	bltu	r3,r7,2001a6c <__fpcmp_parts_d+0x54>
 2001a9c:	38c00526 	beq	r7,r3,2001ab4 <__fpcmp_parts_d+0x9c>
 2001aa0:	38c00236 	bltu	r7,r3,2001aac <__fpcmp_parts_d+0x94>
 2001aa4:	19ffec1e 	bne	r3,r7,2001a58 <__fpcmp_parts_d+0x40>
 2001aa8:	30bfeb2e 	bgeu	r6,r2,2001a58 <__fpcmp_parts_d+0x40>
 2001aac:	403fe71e 	bne	r8,zero,2001a4c <__fpcmp_parts_d+0x34>
 2001ab0:	003fef06 	br	2001a70 <__fpcmp_parts_d+0x58>
 2001ab4:	11bffa2e 	bgeu	r2,r6,2001aa0 <__fpcmp_parts_d+0x88>
 2001ab8:	403fe426 	beq	r8,zero,2001a4c <__fpcmp_parts_d+0x34>
 2001abc:	003fec06 	br	2001a70 <__fpcmp_parts_d+0x58>
 2001ac0:	28800117 	ldw	r2,4(r5)
 2001ac4:	103fe11e 	bne	r2,zero,2001a4c <__fpcmp_parts_d+0x34>
 2001ac8:	003fe906 	br	2001a70 <__fpcmp_parts_d+0x58>
 2001acc:	11bfdd1e 	bne	r2,r6,2001a44 <__fpcmp_parts_d+0x2c>
 2001ad0:	28c00117 	ldw	r3,4(r5)
 2001ad4:	20800117 	ldw	r2,4(r4)
 2001ad8:	1885c83a 	sub	r2,r3,r2
 2001adc:	f800283a 	ret

02001ae0 <difftime>:
 2001ae0:	deffff04 	addi	sp,sp,-4
 2001ae4:	2149c83a 	sub	r4,r4,r5
 2001ae8:	dfc00015 	stw	ra,0(sp)
 2001aec:	2000fa00 	call	2000fa0 <__floatsidf>
 2001af0:	dfc00017 	ldw	ra,0(sp)
 2001af4:	dec00104 	addi	sp,sp,4
 2001af8:	f800283a 	ret

02001afc <_fopen_r>:
 2001afc:	defffa04 	addi	sp,sp,-24
 2001b00:	dcc00415 	stw	r19,16(sp)
 2001b04:	2827883a 	mov	r19,r5
 2001b08:	300b883a 	mov	r5,r6
 2001b0c:	d80d883a 	mov	r6,sp
 2001b10:	dc800315 	stw	r18,12(sp)
 2001b14:	dc400215 	stw	r17,8(sp)
 2001b18:	dc000115 	stw	r16,4(sp)
 2001b1c:	dfc00515 	stw	ra,20(sp)
 2001b20:	2021883a 	mov	r16,r4
 2001b24:	2006ec00 	call	2006ec0 <__sflags>
 2001b28:	1025883a 	mov	r18,r2
 2001b2c:	8009883a 	mov	r4,r16
 2001b30:	0023883a 	mov	r17,zero
 2001b34:	1000081e 	bne	r2,zero,2001b58 <_fopen_r+0x5c>
 2001b38:	8805883a 	mov	r2,r17
 2001b3c:	dfc00517 	ldw	ra,20(sp)
 2001b40:	dcc00417 	ldw	r19,16(sp)
 2001b44:	dc800317 	ldw	r18,12(sp)
 2001b48:	dc400217 	ldw	r17,8(sp)
 2001b4c:	dc000117 	ldw	r16,4(sp)
 2001b50:	dec00604 	addi	sp,sp,24
 2001b54:	f800283a 	ret
 2001b58:	2006dd00 	call	2006dd0 <__sfp>
 2001b5c:	1023883a 	mov	r17,r2
 2001b60:	980b883a 	mov	r5,r19
 2001b64:	8009883a 	mov	r4,r16
 2001b68:	01c06d84 	movi	r7,438
 2001b6c:	103ff226 	beq	r2,zero,2001b38 <_fopen_r+0x3c>
 2001b70:	d9800017 	ldw	r6,0(sp)
 2001b74:	2002a140 	call	2002a14 <_open_r>
 2001b78:	10001816 	blt	r2,zero,2001bdc <_fopen_r+0xe0>
 2001b7c:	00c08034 	movhi	r3,512
 2001b80:	18cbc304 	addi	r3,r3,12044
 2001b84:	923fffcc 	andi	r8,r18,65535
 2001b88:	8880038d 	sth	r2,14(r17)
 2001b8c:	00808034 	movhi	r2,512
 2001b90:	108be204 	addi	r2,r2,12168
 2001b94:	88800815 	stw	r2,32(r17)
 2001b98:	88c00915 	stw	r3,36(r17)
 2001b9c:	00808034 	movhi	r2,512
 2001ba0:	108ba904 	addi	r2,r2,11940
 2001ba4:	00c08034 	movhi	r3,512
 2001ba8:	18cba704 	addi	r3,r3,11932
 2001bac:	4200400c 	andi	r8,r8,256
 2001bb0:	8c80030d 	sth	r18,12(r17)
 2001bb4:	8009883a 	mov	r4,r16
 2001bb8:	880b883a 	mov	r5,r17
 2001bbc:	000d883a 	mov	r6,zero
 2001bc0:	01c00084 	movi	r7,2
 2001bc4:	88800a15 	stw	r2,40(r17)
 2001bc8:	88c00b15 	stw	r3,44(r17)
 2001bcc:	8c400715 	stw	r17,28(r17)
 2001bd0:	403fd926 	beq	r8,zero,2001b38 <_fopen_r+0x3c>
 2001bd4:	2001c6c0 	call	2001c6c <_fseek_r>
 2001bd8:	003fd706 	br	2001b38 <_fopen_r+0x3c>
 2001bdc:	2006c580 	call	2006c58 <__sfp_lock_acquire>
 2001be0:	8800030d 	sth	zero,12(r17)
 2001be4:	2006c5c0 	call	2006c5c <__sfp_lock_release>
 2001be8:	0023883a 	mov	r17,zero
 2001bec:	003fd206 	br	2001b38 <_fopen_r+0x3c>

02001bf0 <fopen>:
 2001bf0:	01808074 	movhi	r6,513
 2001bf4:	31850f04 	addi	r6,r6,5180
 2001bf8:	2007883a 	mov	r3,r4
 2001bfc:	31000017 	ldw	r4,0(r6)
 2001c00:	280d883a 	mov	r6,r5
 2001c04:	180b883a 	mov	r5,r3
 2001c08:	2001afc1 	jmpi	2001afc <_fopen_r>

02001c0c <fprintf>:
 2001c0c:	defffc04 	addi	sp,sp,-16
 2001c10:	dfc00115 	stw	ra,4(sp)
 2001c14:	d9800215 	stw	r6,8(sp)
 2001c18:	d9c00315 	stw	r7,12(sp)
 2001c1c:	d8800204 	addi	r2,sp,8
 2001c20:	100d883a 	mov	r6,r2
 2001c24:	d8800015 	stw	r2,0(sp)
 2001c28:	2004fbc0 	call	2004fbc <__vfprintf_internal>
 2001c2c:	dfc00117 	ldw	ra,4(sp)
 2001c30:	dec00404 	addi	sp,sp,16
 2001c34:	f800283a 	ret

02001c38 <_fprintf_r>:
 2001c38:	defffd04 	addi	sp,sp,-12
 2001c3c:	2807883a 	mov	r3,r5
 2001c40:	dfc00115 	stw	ra,4(sp)
 2001c44:	d9c00215 	stw	r7,8(sp)
 2001c48:	d8800204 	addi	r2,sp,8
 2001c4c:	300b883a 	mov	r5,r6
 2001c50:	1809883a 	mov	r4,r3
 2001c54:	100d883a 	mov	r6,r2
 2001c58:	d8800015 	stw	r2,0(sp)
 2001c5c:	2004fbc0 	call	2004fbc <__vfprintf_internal>
 2001c60:	dfc00117 	ldw	ra,4(sp)
 2001c64:	dec00304 	addi	sp,sp,12
 2001c68:	f800283a 	ret

02001c6c <_fseek_r>:
 2001c6c:	deffe804 	addi	sp,sp,-96
 2001c70:	dd801515 	stw	r22,84(sp)
 2001c74:	dcc01215 	stw	r19,72(sp)
 2001c78:	dc801115 	stw	r18,68(sp)
 2001c7c:	dc000f15 	stw	r16,60(sp)
 2001c80:	dfc01715 	stw	ra,92(sp)
 2001c84:	ddc01615 	stw	r23,88(sp)
 2001c88:	dd401415 	stw	r21,80(sp)
 2001c8c:	dd001315 	stw	r20,76(sp)
 2001c90:	dc401015 	stw	r17,64(sp)
 2001c94:	2025883a 	mov	r18,r4
 2001c98:	2821883a 	mov	r16,r5
 2001c9c:	302d883a 	mov	r22,r6
 2001ca0:	3827883a 	mov	r19,r7
 2001ca4:	20000226 	beq	r4,zero,2001cb0 <_fseek_r+0x44>
 2001ca8:	20800e17 	ldw	r2,56(r4)
 2001cac:	10007826 	beq	r2,zero,2001e90 <_fseek_r+0x224>
 2001cb0:	8080030b 	ldhu	r2,12(r16)
 2001cb4:	00c04204 	movi	r3,264
 2001cb8:	1080420c 	andi	r2,r2,264
 2001cbc:	10c07926 	beq	r2,r3,2001ea4 <_fseek_r+0x238>
 2001cc0:	85400a17 	ldw	r21,40(r16)
 2001cc4:	a800ea26 	beq	r21,zero,2002070 <_fseek_r+0x404>
 2001cc8:	00800044 	movi	r2,1
 2001ccc:	98805f26 	beq	r19,r2,2001e4c <_fseek_r+0x1e0>
 2001cd0:	00800084 	movi	r2,2
 2001cd4:	98801026 	beq	r19,r2,2001d18 <_fseek_r+0xac>
 2001cd8:	98000f26 	beq	r19,zero,2001d18 <_fseek_r+0xac>
 2001cdc:	00800584 	movi	r2,22
 2001ce0:	013fffc4 	movi	r4,-1
 2001ce4:	90800015 	stw	r2,0(r18)
 2001ce8:	2005883a 	mov	r2,r4
 2001cec:	dfc01717 	ldw	ra,92(sp)
 2001cf0:	ddc01617 	ldw	r23,88(sp)
 2001cf4:	dd801517 	ldw	r22,84(sp)
 2001cf8:	dd401417 	ldw	r21,80(sp)
 2001cfc:	dd001317 	ldw	r20,76(sp)
 2001d00:	dcc01217 	ldw	r19,72(sp)
 2001d04:	dc801117 	ldw	r18,68(sp)
 2001d08:	dc401017 	ldw	r17,64(sp)
 2001d0c:	dc000f17 	ldw	r16,60(sp)
 2001d10:	dec01804 	addi	sp,sp,96
 2001d14:	f800283a 	ret
 2001d18:	81800417 	ldw	r6,16(r16)
 2001d1c:	0023883a 	mov	r17,zero
 2001d20:	002f883a 	mov	r23,zero
 2001d24:	3000a626 	beq	r6,zero,2001fc0 <_fseek_r+0x354>
 2001d28:	8100030b 	ldhu	r4,12(r16)
 2001d2c:	2082068c 	andi	r2,r4,2074
 2001d30:	1000081e 	bne	r2,zero,2001d54 <_fseek_r+0xe8>
 2001d34:	2081000c 	andi	r2,r4,1024
 2001d38:	10001b1e 	bne	r2,zero,2001da8 <_fseek_r+0x13c>
 2001d3c:	00808034 	movhi	r2,512
 2001d40:	108ba904 	addi	r2,r2,11940
 2001d44:	a8800926 	beq	r21,r2,2001d6c <_fseek_r+0x100>
 2001d48:	8080030b 	ldhu	r2,12(r16)
 2001d4c:	10820014 	ori	r2,r2,2048
 2001d50:	8080030d 	sth	r2,12(r16)
 2001d54:	9009883a 	mov	r4,r18
 2001d58:	800b883a 	mov	r5,r16
 2001d5c:	20069d00 	call	20069d0 <_fflush_r>
 2001d60:	1000a326 	beq	r2,zero,2001ff0 <_fseek_r+0x384>
 2001d64:	013fffc4 	movi	r4,-1
 2001d68:	003fdf06 	br	2001ce8 <_fseek_r+0x7c>
 2001d6c:	8140038f 	ldh	r5,14(r16)
 2001d70:	283ff516 	blt	r5,zero,2001d48 <_fseek_r+0xdc>
 2001d74:	9009883a 	mov	r4,r18
 2001d78:	d80d883a 	mov	r6,sp
 2001d7c:	20020cc0 	call	20020cc <_fstat_r>
 2001d80:	103ff11e 	bne	r2,zero,2001d48 <_fseek_r+0xdc>
 2001d84:	d8800117 	ldw	r2,4(sp)
 2001d88:	00e00014 	movui	r3,32768
 2001d8c:	10bc000c 	andi	r2,r2,61440
 2001d90:	10ffed1e 	bne	r2,r3,2001d48 <_fseek_r+0xdc>
 2001d94:	80c0030b 	ldhu	r3,12(r16)
 2001d98:	00810004 	movi	r2,1024
 2001d9c:	80801315 	stw	r2,76(r16)
 2001da0:	1886b03a 	or	r3,r3,r2
 2001da4:	80c0030d 	sth	r3,12(r16)
 2001da8:	9800701e 	bne	r19,zero,2001f6c <_fseek_r+0x300>
 2001dac:	b029883a 	mov	r20,r22
 2001db0:	b804c03a 	cmpne	r2,r23,zero
 2001db4:	10003f1e 	bne	r2,zero,2001eb4 <_fseek_r+0x248>
 2001db8:	8100030b 	ldhu	r4,12(r16)
 2001dbc:	2084000c 	andi	r2,r4,4096
 2001dc0:	1000a126 	beq	r2,zero,2002048 <_fseek_r+0x3dc>
 2001dc4:	81801417 	ldw	r6,80(r16)
 2001dc8:	80c00117 	ldw	r3,4(r16)
 2001dcc:	81400c17 	ldw	r5,48(r16)
 2001dd0:	30e3c83a 	sub	r17,r6,r3
 2001dd4:	28008026 	beq	r5,zero,2001fd8 <_fseek_r+0x36c>
 2001dd8:	81c00f17 	ldw	r7,60(r16)
 2001ddc:	89e3c83a 	sub	r17,r17,r7
 2001de0:	80800e17 	ldw	r2,56(r16)
 2001de4:	81800417 	ldw	r6,16(r16)
 2001de8:	88c7883a 	add	r3,r17,r3
 2001dec:	1185c83a 	sub	r2,r2,r6
 2001df0:	11cf883a 	add	r7,r2,r7
 2001df4:	1887c83a 	sub	r3,r3,r2
 2001df8:	2088000c 	andi	r2,r4,8192
 2001dfc:	10003e1e 	bne	r2,zero,2001ef8 <_fseek_r+0x28c>
 2001e00:	a0c03d16 	blt	r20,r3,2001ef8 <_fseek_r+0x28c>
 2001e04:	38c5883a 	add	r2,r7,r3
 2001e08:	a0803b2e 	bgeu	r20,r2,2001ef8 <_fseek_r+0x28c>
 2001e0c:	a0c5c83a 	sub	r2,r20,r3
 2001e10:	3887c83a 	sub	r3,r7,r2
 2001e14:	3085883a 	add	r2,r6,r2
 2001e18:	80800015 	stw	r2,0(r16)
 2001e1c:	80c00115 	stw	r3,4(r16)
 2001e20:	28000526 	beq	r5,zero,2001e38 <_fseek_r+0x1cc>
 2001e24:	80801004 	addi	r2,r16,64
 2001e28:	28800226 	beq	r5,r2,2001e34 <_fseek_r+0x1c8>
 2001e2c:	9009883a 	mov	r4,r18
 2001e30:	200708c0 	call	200708c <_free_r>
 2001e34:	80000c15 	stw	zero,48(r16)
 2001e38:	8080030b 	ldhu	r2,12(r16)
 2001e3c:	0009883a 	mov	r4,zero
 2001e40:	10bff7cc 	andi	r2,r2,65503
 2001e44:	8080030d 	sth	r2,12(r16)
 2001e48:	003fa706 	br	2001ce8 <_fseek_r+0x7c>
 2001e4c:	9009883a 	mov	r4,r18
 2001e50:	800b883a 	mov	r5,r16
 2001e54:	20069d00 	call	20069d0 <_fflush_r>
 2001e58:	8100030b 	ldhu	r4,12(r16)
 2001e5c:	2084000c 	andi	r2,r4,4096
 2001e60:	10008726 	beq	r2,zero,2002080 <_fseek_r+0x414>
 2001e64:	84401417 	ldw	r17,80(r16)
 2001e68:	2080010c 	andi	r2,r4,4
 2001e6c:	1000171e 	bne	r2,zero,2001ecc <_fseek_r+0x260>
 2001e70:	2080020c 	andi	r2,r4,8
 2001e74:	10003b26 	beq	r2,zero,2001f64 <_fseek_r+0x2f8>
 2001e78:	80800017 	ldw	r2,0(r16)
 2001e7c:	10003926 	beq	r2,zero,2001f64 <_fseek_r+0x2f8>
 2001e80:	81800417 	ldw	r6,16(r16)
 2001e84:	1185c83a 	sub	r2,r2,r6
 2001e88:	88a3883a 	add	r17,r17,r2
 2001e8c:	00001606 	br	2001ee8 <_fseek_r+0x27c>
 2001e90:	2006c680 	call	2006c68 <__sinit>
 2001e94:	8080030b 	ldhu	r2,12(r16)
 2001e98:	00c04204 	movi	r3,264
 2001e9c:	1080420c 	andi	r2,r2,264
 2001ea0:	10ff871e 	bne	r2,r3,2001cc0 <_fseek_r+0x54>
 2001ea4:	9009883a 	mov	r4,r18
 2001ea8:	800b883a 	mov	r5,r16
 2001eac:	20069d00 	call	20069d0 <_fflush_r>
 2001eb0:	003f8306 	br	2001cc0 <_fseek_r+0x54>
 2001eb4:	81400c17 	ldw	r5,48(r16)
 2001eb8:	28004526 	beq	r5,zero,2001fd0 <_fseek_r+0x364>
 2001ebc:	8100030b 	ldhu	r4,12(r16)
 2001ec0:	80c00117 	ldw	r3,4(r16)
 2001ec4:	81c00f17 	ldw	r7,60(r16)
 2001ec8:	003fc506 	br	2001de0 <_fseek_r+0x174>
 2001ecc:	80c00117 	ldw	r3,4(r16)
 2001ed0:	80800c17 	ldw	r2,48(r16)
 2001ed4:	88e3c83a 	sub	r17,r17,r3
 2001ed8:	10002226 	beq	r2,zero,2001f64 <_fseek_r+0x2f8>
 2001edc:	81c00f17 	ldw	r7,60(r16)
 2001ee0:	81800417 	ldw	r6,16(r16)
 2001ee4:	89e3c83a 	sub	r17,r17,r7
 2001ee8:	b46d883a 	add	r22,r22,r17
 2001eec:	0027883a 	mov	r19,zero
 2001ef0:	05c00044 	movi	r23,1
 2001ef4:	003f8b06 	br	2001d24 <_fseek_r+0xb8>
 2001ef8:	80801317 	ldw	r2,76(r16)
 2001efc:	81400717 	ldw	r5,28(r16)
 2001f00:	9009883a 	mov	r4,r18
 2001f04:	0085c83a 	sub	r2,zero,r2
 2001f08:	a0a2703a 	and	r17,r20,r2
 2001f0c:	880d883a 	mov	r6,r17
 2001f10:	000f883a 	mov	r7,zero
 2001f14:	a83ee83a 	callr	r21
 2001f18:	00ffffc4 	movi	r3,-1
 2001f1c:	10ff8d26 	beq	r2,r3,2001d54 <_fseek_r+0xe8>
 2001f20:	80800417 	ldw	r2,16(r16)
 2001f24:	81400c17 	ldw	r5,48(r16)
 2001f28:	80000115 	stw	zero,4(r16)
 2001f2c:	80800015 	stw	r2,0(r16)
 2001f30:	28000526 	beq	r5,zero,2001f48 <_fseek_r+0x2dc>
 2001f34:	80801004 	addi	r2,r16,64
 2001f38:	28800226 	beq	r5,r2,2001f44 <_fseek_r+0x2d8>
 2001f3c:	9009883a 	mov	r4,r18
 2001f40:	200708c0 	call	200708c <_free_r>
 2001f44:	80000c15 	stw	zero,48(r16)
 2001f48:	8080030b 	ldhu	r2,12(r16)
 2001f4c:	a463c83a 	sub	r17,r20,r17
 2001f50:	10bff7cc 	andi	r2,r2,65503
 2001f54:	8080030d 	sth	r2,12(r16)
 2001f58:	88000c1e 	bne	r17,zero,2001f8c <_fseek_r+0x320>
 2001f5c:	0009883a 	mov	r4,zero
 2001f60:	003f6106 	br	2001ce8 <_fseek_r+0x7c>
 2001f64:	81800417 	ldw	r6,16(r16)
 2001f68:	003fdf06 	br	2001ee8 <_fseek_r+0x27c>
 2001f6c:	8140038f 	ldh	r5,14(r16)
 2001f70:	9009883a 	mov	r4,r18
 2001f74:	d80d883a 	mov	r6,sp
 2001f78:	20020cc0 	call	20020cc <_fstat_r>
 2001f7c:	103f751e 	bne	r2,zero,2001d54 <_fseek_r+0xe8>
 2001f80:	d8800417 	ldw	r2,16(sp)
 2001f84:	b0a9883a 	add	r20,r22,r2
 2001f88:	003f8906 	br	2001db0 <_fseek_r+0x144>
 2001f8c:	9009883a 	mov	r4,r18
 2001f90:	800b883a 	mov	r5,r16
 2001f94:	2002c4c0 	call	2002c4c <__srefill_r>
 2001f98:	103f6e1e 	bne	r2,zero,2001d54 <_fseek_r+0xe8>
 2001f9c:	80c00117 	ldw	r3,4(r16)
 2001fa0:	1c7f6c36 	bltu	r3,r17,2001d54 <_fseek_r+0xe8>
 2001fa4:	80800017 	ldw	r2,0(r16)
 2001fa8:	1c47c83a 	sub	r3,r3,r17
 2001fac:	0009883a 	mov	r4,zero
 2001fb0:	1445883a 	add	r2,r2,r17
 2001fb4:	80c00115 	stw	r3,4(r16)
 2001fb8:	80800015 	stw	r2,0(r16)
 2001fbc:	003f4a06 	br	2001ce8 <_fseek_r+0x7c>
 2001fc0:	9009883a 	mov	r4,r18
 2001fc4:	800b883a 	mov	r5,r16
 2001fc8:	20021400 	call	2002140 <__smakebuf_r>
 2001fcc:	003f5606 	br	2001d28 <_fseek_r+0xbc>
 2001fd0:	8100030b 	ldhu	r4,12(r16)
 2001fd4:	80c00117 	ldw	r3,4(r16)
 2001fd8:	80800017 	ldw	r2,0(r16)
 2001fdc:	81800417 	ldw	r6,16(r16)
 2001fe0:	1185c83a 	sub	r2,r2,r6
 2001fe4:	10cf883a 	add	r7,r2,r3
 2001fe8:	8887c83a 	sub	r3,r17,r2
 2001fec:	003f8206 	br	2001df8 <_fseek_r+0x18c>
 2001ff0:	81400717 	ldw	r5,28(r16)
 2001ff4:	b00d883a 	mov	r6,r22
 2001ff8:	980f883a 	mov	r7,r19
 2001ffc:	9009883a 	mov	r4,r18
 2002000:	a83ee83a 	callr	r21
 2002004:	00ffffc4 	movi	r3,-1
 2002008:	10ff5626 	beq	r2,r3,2001d64 <_fseek_r+0xf8>
 200200c:	81400c17 	ldw	r5,48(r16)
 2002010:	28000526 	beq	r5,zero,2002028 <_fseek_r+0x3bc>
 2002014:	80801004 	addi	r2,r16,64
 2002018:	28800226 	beq	r5,r2,2002024 <_fseek_r+0x3b8>
 200201c:	9009883a 	mov	r4,r18
 2002020:	200708c0 	call	200708c <_free_r>
 2002024:	80000c15 	stw	zero,48(r16)
 2002028:	8080030b 	ldhu	r2,12(r16)
 200202c:	80c00417 	ldw	r3,16(r16)
 2002030:	0009883a 	mov	r4,zero
 2002034:	10bdf7cc 	andi	r2,r2,63455
 2002038:	8080030d 	sth	r2,12(r16)
 200203c:	80c00015 	stw	r3,0(r16)
 2002040:	80000115 	stw	zero,4(r16)
 2002044:	003f2806 	br	2001ce8 <_fseek_r+0x7c>
 2002048:	81400717 	ldw	r5,28(r16)
 200204c:	000d883a 	mov	r6,zero
 2002050:	9009883a 	mov	r4,r18
 2002054:	01c00044 	movi	r7,1
 2002058:	a83ee83a 	callr	r21
 200205c:	100d883a 	mov	r6,r2
 2002060:	00bfffc4 	movi	r2,-1
 2002064:	30bf3b26 	beq	r6,r2,2001d54 <_fseek_r+0xe8>
 2002068:	8100030b 	ldhu	r4,12(r16)
 200206c:	003f5606 	br	2001dc8 <_fseek_r+0x15c>
 2002070:	00800744 	movi	r2,29
 2002074:	013fffc4 	movi	r4,-1
 2002078:	90800015 	stw	r2,0(r18)
 200207c:	003f1a06 	br	2001ce8 <_fseek_r+0x7c>
 2002080:	81400717 	ldw	r5,28(r16)
 2002084:	980f883a 	mov	r7,r19
 2002088:	9009883a 	mov	r4,r18
 200208c:	000d883a 	mov	r6,zero
 2002090:	a83ee83a 	callr	r21
 2002094:	1023883a 	mov	r17,r2
 2002098:	00bfffc4 	movi	r2,-1
 200209c:	88bf3126 	beq	r17,r2,2001d64 <_fseek_r+0xf8>
 20020a0:	8100030b 	ldhu	r4,12(r16)
 20020a4:	003f7006 	br	2001e68 <_fseek_r+0x1fc>

020020a8 <fseek>:
 20020a8:	00808074 	movhi	r2,513
 20020ac:	10850f04 	addi	r2,r2,5180
 20020b0:	2013883a 	mov	r9,r4
 20020b4:	11000017 	ldw	r4,0(r2)
 20020b8:	2805883a 	mov	r2,r5
 20020bc:	300f883a 	mov	r7,r6
 20020c0:	480b883a 	mov	r5,r9
 20020c4:	100d883a 	mov	r6,r2
 20020c8:	2001c6c1 	jmpi	2001c6c <_fseek_r>

020020cc <_fstat_r>:
 20020cc:	defffd04 	addi	sp,sp,-12
 20020d0:	dc000015 	stw	r16,0(sp)
 20020d4:	04008074 	movhi	r16,513
 20020d8:	840c0604 	addi	r16,r16,12312
 20020dc:	dc400115 	stw	r17,4(sp)
 20020e0:	80000015 	stw	zero,0(r16)
 20020e4:	2023883a 	mov	r17,r4
 20020e8:	2809883a 	mov	r4,r5
 20020ec:	300b883a 	mov	r5,r6
 20020f0:	dfc00215 	stw	ra,8(sp)
 20020f4:	200b4fc0 	call	200b4fc <fstat>
 20020f8:	1007883a 	mov	r3,r2
 20020fc:	00bfffc4 	movi	r2,-1
 2002100:	18800626 	beq	r3,r2,200211c <_fstat_r+0x50>
 2002104:	1805883a 	mov	r2,r3
 2002108:	dfc00217 	ldw	ra,8(sp)
 200210c:	dc400117 	ldw	r17,4(sp)
 2002110:	dc000017 	ldw	r16,0(sp)
 2002114:	dec00304 	addi	sp,sp,12
 2002118:	f800283a 	ret
 200211c:	80800017 	ldw	r2,0(r16)
 2002120:	103ff826 	beq	r2,zero,2002104 <_fstat_r+0x38>
 2002124:	88800015 	stw	r2,0(r17)
 2002128:	1805883a 	mov	r2,r3
 200212c:	dfc00217 	ldw	ra,8(sp)
 2002130:	dc400117 	ldw	r17,4(sp)
 2002134:	dc000017 	ldw	r16,0(sp)
 2002138:	dec00304 	addi	sp,sp,12
 200213c:	f800283a 	ret

02002140 <__smakebuf_r>:
 2002140:	2880030b 	ldhu	r2,12(r5)
 2002144:	deffed04 	addi	sp,sp,-76
 2002148:	dc401015 	stw	r17,64(sp)
 200214c:	1080008c 	andi	r2,r2,2
 2002150:	dc000f15 	stw	r16,60(sp)
 2002154:	dfc01215 	stw	ra,72(sp)
 2002158:	dc801115 	stw	r18,68(sp)
 200215c:	2821883a 	mov	r16,r5
 2002160:	2023883a 	mov	r17,r4
 2002164:	10000b26 	beq	r2,zero,2002194 <__smakebuf_r+0x54>
 2002168:	28c010c4 	addi	r3,r5,67
 200216c:	00800044 	movi	r2,1
 2002170:	28800515 	stw	r2,20(r5)
 2002174:	28c00415 	stw	r3,16(r5)
 2002178:	28c00015 	stw	r3,0(r5)
 200217c:	dfc01217 	ldw	ra,72(sp)
 2002180:	dc801117 	ldw	r18,68(sp)
 2002184:	dc401017 	ldw	r17,64(sp)
 2002188:	dc000f17 	ldw	r16,60(sp)
 200218c:	dec01304 	addi	sp,sp,76
 2002190:	f800283a 	ret
 2002194:	2940038f 	ldh	r5,14(r5)
 2002198:	28002116 	blt	r5,zero,2002220 <__smakebuf_r+0xe0>
 200219c:	d80d883a 	mov	r6,sp
 20021a0:	20020cc0 	call	20020cc <_fstat_r>
 20021a4:	10001e16 	blt	r2,zero,2002220 <__smakebuf_r+0xe0>
 20021a8:	d8800117 	ldw	r2,4(sp)
 20021ac:	00e00014 	movui	r3,32768
 20021b0:	113c000c 	andi	r4,r2,61440
 20021b4:	20c03126 	beq	r4,r3,200227c <__smakebuf_r+0x13c>
 20021b8:	8080030b 	ldhu	r2,12(r16)
 20021bc:	00c80004 	movi	r3,8192
 20021c0:	10820014 	ori	r2,r2,2048
 20021c4:	8080030d 	sth	r2,12(r16)
 20021c8:	20c01e26 	beq	r4,r3,2002244 <__smakebuf_r+0x104>
 20021cc:	04810004 	movi	r18,1024
 20021d0:	8809883a 	mov	r4,r17
 20021d4:	900b883a 	mov	r5,r18
 20021d8:	20022d40 	call	20022d4 <_malloc_r>
 20021dc:	1009883a 	mov	r4,r2
 20021e0:	10003126 	beq	r2,zero,20022a8 <__smakebuf_r+0x168>
 20021e4:	80c0030b 	ldhu	r3,12(r16)
 20021e8:	00808034 	movhi	r2,512
 20021ec:	109b5304 	addi	r2,r2,27980
 20021f0:	88800f15 	stw	r2,60(r17)
 20021f4:	18c02014 	ori	r3,r3,128
 20021f8:	84800515 	stw	r18,20(r16)
 20021fc:	80c0030d 	sth	r3,12(r16)
 2002200:	81000415 	stw	r4,16(r16)
 2002204:	81000015 	stw	r4,0(r16)
 2002208:	dfc01217 	ldw	ra,72(sp)
 200220c:	dc801117 	ldw	r18,68(sp)
 2002210:	dc401017 	ldw	r17,64(sp)
 2002214:	dc000f17 	ldw	r16,60(sp)
 2002218:	dec01304 	addi	sp,sp,76
 200221c:	f800283a 	ret
 2002220:	80c0030b 	ldhu	r3,12(r16)
 2002224:	1880200c 	andi	r2,r3,128
 2002228:	10000426 	beq	r2,zero,200223c <__smakebuf_r+0xfc>
 200222c:	04801004 	movi	r18,64
 2002230:	18820014 	ori	r2,r3,2048
 2002234:	8080030d 	sth	r2,12(r16)
 2002238:	003fe506 	br	20021d0 <__smakebuf_r+0x90>
 200223c:	04810004 	movi	r18,1024
 2002240:	003ffb06 	br	2002230 <__smakebuf_r+0xf0>
 2002244:	8140038f 	ldh	r5,14(r16)
 2002248:	8809883a 	mov	r4,r17
 200224c:	2007a300 	call	2007a30 <_isatty_r>
 2002250:	103fde26 	beq	r2,zero,20021cc <__smakebuf_r+0x8c>
 2002254:	8080030b 	ldhu	r2,12(r16)
 2002258:	80c010c4 	addi	r3,r16,67
 200225c:	04810004 	movi	r18,1024
 2002260:	10800054 	ori	r2,r2,1
 2002264:	8080030d 	sth	r2,12(r16)
 2002268:	00800044 	movi	r2,1
 200226c:	80c00415 	stw	r3,16(r16)
 2002270:	80800515 	stw	r2,20(r16)
 2002274:	80c00015 	stw	r3,0(r16)
 2002278:	003fd506 	br	20021d0 <__smakebuf_r+0x90>
 200227c:	80c00a17 	ldw	r3,40(r16)
 2002280:	00808034 	movhi	r2,512
 2002284:	108ba904 	addi	r2,r2,11940
 2002288:	18bfcb1e 	bne	r3,r2,20021b8 <__smakebuf_r+0x78>
 200228c:	8080030b 	ldhu	r2,12(r16)
 2002290:	00c10004 	movi	r3,1024
 2002294:	1825883a 	mov	r18,r3
 2002298:	10c4b03a 	or	r2,r2,r3
 200229c:	8080030d 	sth	r2,12(r16)
 20022a0:	80c01315 	stw	r3,76(r16)
 20022a4:	003fca06 	br	20021d0 <__smakebuf_r+0x90>
 20022a8:	8100030b 	ldhu	r4,12(r16)
 20022ac:	2080800c 	andi	r2,r4,512
 20022b0:	103fb21e 	bne	r2,zero,200217c <__smakebuf_r+0x3c>
 20022b4:	80c010c4 	addi	r3,r16,67
 20022b8:	21000094 	ori	r4,r4,2
 20022bc:	00800044 	movi	r2,1
 20022c0:	80800515 	stw	r2,20(r16)
 20022c4:	8100030d 	sth	r4,12(r16)
 20022c8:	80c00415 	stw	r3,16(r16)
 20022cc:	80c00015 	stw	r3,0(r16)
 20022d0:	003faa06 	br	200217c <__smakebuf_r+0x3c>

020022d4 <_malloc_r>:
 20022d4:	defff604 	addi	sp,sp,-40
 20022d8:	28c002c4 	addi	r3,r5,11
 20022dc:	00800584 	movi	r2,22
 20022e0:	dc800215 	stw	r18,8(sp)
 20022e4:	dfc00915 	stw	ra,36(sp)
 20022e8:	df000815 	stw	fp,32(sp)
 20022ec:	ddc00715 	stw	r23,28(sp)
 20022f0:	dd800615 	stw	r22,24(sp)
 20022f4:	dd400515 	stw	r21,20(sp)
 20022f8:	dd000415 	stw	r20,16(sp)
 20022fc:	dcc00315 	stw	r19,12(sp)
 2002300:	dc400115 	stw	r17,4(sp)
 2002304:	dc000015 	stw	r16,0(sp)
 2002308:	2025883a 	mov	r18,r4
 200230c:	10c01236 	bltu	r2,r3,2002358 <_malloc_r+0x84>
 2002310:	04400404 	movi	r17,16
 2002314:	8940142e 	bgeu	r17,r5,2002368 <_malloc_r+0x94>
 2002318:	00800304 	movi	r2,12
 200231c:	0007883a 	mov	r3,zero
 2002320:	90800015 	stw	r2,0(r18)
 2002324:	1805883a 	mov	r2,r3
 2002328:	dfc00917 	ldw	ra,36(sp)
 200232c:	df000817 	ldw	fp,32(sp)
 2002330:	ddc00717 	ldw	r23,28(sp)
 2002334:	dd800617 	ldw	r22,24(sp)
 2002338:	dd400517 	ldw	r21,20(sp)
 200233c:	dd000417 	ldw	r20,16(sp)
 2002340:	dcc00317 	ldw	r19,12(sp)
 2002344:	dc800217 	ldw	r18,8(sp)
 2002348:	dc400117 	ldw	r17,4(sp)
 200234c:	dc000017 	ldw	r16,0(sp)
 2002350:	dec00a04 	addi	sp,sp,40
 2002354:	f800283a 	ret
 2002358:	00bffe04 	movi	r2,-8
 200235c:	18a2703a 	and	r17,r3,r2
 2002360:	883fed16 	blt	r17,zero,2002318 <_malloc_r+0x44>
 2002364:	897fec36 	bltu	r17,r5,2002318 <_malloc_r+0x44>
 2002368:	9009883a 	mov	r4,r18
 200236c:	200bc140 	call	200bc14 <__malloc_lock>
 2002370:	00807dc4 	movi	r2,503
 2002374:	14402b2e 	bgeu	r2,r17,2002424 <_malloc_r+0x150>
 2002378:	8806d27a 	srli	r3,r17,9
 200237c:	18003f1e 	bne	r3,zero,200247c <_malloc_r+0x1a8>
 2002380:	880cd0fa 	srli	r6,r17,3
 2002384:	300490fa 	slli	r2,r6,3
 2002388:	02c08074 	movhi	r11,513
 200238c:	5aff4004 	addi	r11,r11,-768
 2002390:	12cb883a 	add	r5,r2,r11
 2002394:	2c000317 	ldw	r16,12(r5)
 2002398:	580f883a 	mov	r7,r11
 200239c:	2c00041e 	bne	r5,r16,20023b0 <_malloc_r+0xdc>
 20023a0:	00000a06 	br	20023cc <_malloc_r+0xf8>
 20023a4:	1800860e 	bge	r3,zero,20025c0 <_malloc_r+0x2ec>
 20023a8:	84000317 	ldw	r16,12(r16)
 20023ac:	2c000726 	beq	r5,r16,20023cc <_malloc_r+0xf8>
 20023b0:	80800117 	ldw	r2,4(r16)
 20023b4:	00ffff04 	movi	r3,-4
 20023b8:	10c8703a 	and	r4,r2,r3
 20023bc:	2447c83a 	sub	r3,r4,r17
 20023c0:	008003c4 	movi	r2,15
 20023c4:	10fff70e 	bge	r2,r3,20023a4 <_malloc_r+0xd0>
 20023c8:	31bfffc4 	addi	r6,r6,-1
 20023cc:	32400044 	addi	r9,r6,1
 20023d0:	02808074 	movhi	r10,513
 20023d4:	52bf4204 	addi	r10,r10,-760
 20023d8:	54000217 	ldw	r16,8(r10)
 20023dc:	8280a026 	beq	r16,r10,2002660 <_malloc_r+0x38c>
 20023e0:	80800117 	ldw	r2,4(r16)
 20023e4:	00ffff04 	movi	r3,-4
 20023e8:	10ca703a 	and	r5,r2,r3
 20023ec:	2c4dc83a 	sub	r6,r5,r17
 20023f0:	008003c4 	movi	r2,15
 20023f4:	11808316 	blt	r2,r6,2002604 <_malloc_r+0x330>
 20023f8:	52800315 	stw	r10,12(r10)
 20023fc:	52800215 	stw	r10,8(r10)
 2002400:	30002916 	blt	r6,zero,20024a8 <_malloc_r+0x1d4>
 2002404:	8147883a 	add	r3,r16,r5
 2002408:	18800117 	ldw	r2,4(r3)
 200240c:	9009883a 	mov	r4,r18
 2002410:	10800054 	ori	r2,r2,1
 2002414:	18800115 	stw	r2,4(r3)
 2002418:	200bc340 	call	200bc34 <__malloc_unlock>
 200241c:	80c00204 	addi	r3,r16,8
 2002420:	003fc006 	br	2002324 <_malloc_r+0x50>
 2002424:	02c08074 	movhi	r11,513
 2002428:	5aff4004 	addi	r11,r11,-768
 200242c:	8ac5883a 	add	r2,r17,r11
 2002430:	14000317 	ldw	r16,12(r2)
 2002434:	580f883a 	mov	r7,r11
 2002438:	8806d0fa 	srli	r3,r17,3
 200243c:	14006c26 	beq	r2,r16,20025f0 <_malloc_r+0x31c>
 2002440:	80c00117 	ldw	r3,4(r16)
 2002444:	00bfff04 	movi	r2,-4
 2002448:	81800317 	ldw	r6,12(r16)
 200244c:	1886703a 	and	r3,r3,r2
 2002450:	80c7883a 	add	r3,r16,r3
 2002454:	18800117 	ldw	r2,4(r3)
 2002458:	81400217 	ldw	r5,8(r16)
 200245c:	9009883a 	mov	r4,r18
 2002460:	10800054 	ori	r2,r2,1
 2002464:	18800115 	stw	r2,4(r3)
 2002468:	31400215 	stw	r5,8(r6)
 200246c:	29800315 	stw	r6,12(r5)
 2002470:	200bc340 	call	200bc34 <__malloc_unlock>
 2002474:	80c00204 	addi	r3,r16,8
 2002478:	003faa06 	br	2002324 <_malloc_r+0x50>
 200247c:	00800104 	movi	r2,4
 2002480:	10c0052e 	bgeu	r2,r3,2002498 <_malloc_r+0x1c4>
 2002484:	00800504 	movi	r2,20
 2002488:	10c07836 	bltu	r2,r3,200266c <_malloc_r+0x398>
 200248c:	198016c4 	addi	r6,r3,91
 2002490:	300490fa 	slli	r2,r6,3
 2002494:	003fbc06 	br	2002388 <_malloc_r+0xb4>
 2002498:	8804d1ba 	srli	r2,r17,6
 200249c:	11800e04 	addi	r6,r2,56
 20024a0:	300490fa 	slli	r2,r6,3
 20024a4:	003fb806 	br	2002388 <_malloc_r+0xb4>
 20024a8:	00807fc4 	movi	r2,511
 20024ac:	1140bb36 	bltu	r2,r5,200279c <_malloc_r+0x4c8>
 20024b0:	2806d0fa 	srli	r3,r5,3
 20024b4:	573ffe04 	addi	fp,r10,-8
 20024b8:	00800044 	movi	r2,1
 20024bc:	180890fa 	slli	r4,r3,3
 20024c0:	1807d0ba 	srai	r3,r3,2
 20024c4:	e1c00117 	ldw	r7,4(fp)
 20024c8:	5909883a 	add	r4,r11,r4
 20024cc:	21400217 	ldw	r5,8(r4)
 20024d0:	10c4983a 	sll	r2,r2,r3
 20024d4:	81000315 	stw	r4,12(r16)
 20024d8:	81400215 	stw	r5,8(r16)
 20024dc:	388eb03a 	or	r7,r7,r2
 20024e0:	2c000315 	stw	r16,12(r5)
 20024e4:	24000215 	stw	r16,8(r4)
 20024e8:	e1c00115 	stw	r7,4(fp)
 20024ec:	4807883a 	mov	r3,r9
 20024f0:	4800cd16 	blt	r9,zero,2002828 <_malloc_r+0x554>
 20024f4:	1807d0ba 	srai	r3,r3,2
 20024f8:	00800044 	movi	r2,1
 20024fc:	10c8983a 	sll	r4,r2,r3
 2002500:	39004436 	bltu	r7,r4,2002614 <_malloc_r+0x340>
 2002504:	21c4703a 	and	r2,r4,r7
 2002508:	10000a1e 	bne	r2,zero,2002534 <_malloc_r+0x260>
 200250c:	2109883a 	add	r4,r4,r4
 2002510:	00bfff04 	movi	r2,-4
 2002514:	4884703a 	and	r2,r9,r2
 2002518:	3906703a 	and	r3,r7,r4
 200251c:	12400104 	addi	r9,r2,4
 2002520:	1800041e 	bne	r3,zero,2002534 <_malloc_r+0x260>
 2002524:	2109883a 	add	r4,r4,r4
 2002528:	3904703a 	and	r2,r7,r4
 200252c:	4a400104 	addi	r9,r9,4
 2002530:	103ffc26 	beq	r2,zero,2002524 <_malloc_r+0x250>
 2002534:	480490fa 	slli	r2,r9,3
 2002538:	4819883a 	mov	r12,r9
 200253c:	023fff04 	movi	r8,-4
 2002540:	589b883a 	add	r13,r11,r2
 2002544:	6807883a 	mov	r3,r13
 2002548:	014003c4 	movi	r5,15
 200254c:	1c000317 	ldw	r16,12(r3)
 2002550:	1c00041e 	bne	r3,r16,2002564 <_malloc_r+0x290>
 2002554:	0000a706 	br	20027f4 <_malloc_r+0x520>
 2002558:	3000ab0e 	bge	r6,zero,2002808 <_malloc_r+0x534>
 200255c:	84000317 	ldw	r16,12(r16)
 2002560:	1c00a426 	beq	r3,r16,20027f4 <_malloc_r+0x520>
 2002564:	80800117 	ldw	r2,4(r16)
 2002568:	1204703a 	and	r2,r2,r8
 200256c:	144dc83a 	sub	r6,r2,r17
 2002570:	29bff90e 	bge	r5,r6,2002558 <_malloc_r+0x284>
 2002574:	81000317 	ldw	r4,12(r16)
 2002578:	80c00217 	ldw	r3,8(r16)
 200257c:	89400054 	ori	r5,r17,1
 2002580:	8445883a 	add	r2,r16,r17
 2002584:	20c00215 	stw	r3,8(r4)
 2002588:	19000315 	stw	r4,12(r3)
 200258c:	81400115 	stw	r5,4(r16)
 2002590:	1187883a 	add	r3,r2,r6
 2002594:	31000054 	ori	r4,r6,1
 2002598:	50800315 	stw	r2,12(r10)
 200259c:	50800215 	stw	r2,8(r10)
 20025a0:	19800015 	stw	r6,0(r3)
 20025a4:	11000115 	stw	r4,4(r2)
 20025a8:	12800215 	stw	r10,8(r2)
 20025ac:	12800315 	stw	r10,12(r2)
 20025b0:	9009883a 	mov	r4,r18
 20025b4:	200bc340 	call	200bc34 <__malloc_unlock>
 20025b8:	80c00204 	addi	r3,r16,8
 20025bc:	003f5906 	br	2002324 <_malloc_r+0x50>
 20025c0:	8109883a 	add	r4,r16,r4
 20025c4:	20800117 	ldw	r2,4(r4)
 20025c8:	80c00217 	ldw	r3,8(r16)
 20025cc:	81400317 	ldw	r5,12(r16)
 20025d0:	10800054 	ori	r2,r2,1
 20025d4:	20800115 	stw	r2,4(r4)
 20025d8:	28c00215 	stw	r3,8(r5)
 20025dc:	19400315 	stw	r5,12(r3)
 20025e0:	9009883a 	mov	r4,r18
 20025e4:	200bc340 	call	200bc34 <__malloc_unlock>
 20025e8:	80c00204 	addi	r3,r16,8
 20025ec:	003f4d06 	br	2002324 <_malloc_r+0x50>
 20025f0:	80800204 	addi	r2,r16,8
 20025f4:	14000317 	ldw	r16,12(r2)
 20025f8:	143f911e 	bne	r2,r16,2002440 <_malloc_r+0x16c>
 20025fc:	1a400084 	addi	r9,r3,2
 2002600:	003f7306 	br	20023d0 <_malloc_r+0xfc>
 2002604:	88c00054 	ori	r3,r17,1
 2002608:	8445883a 	add	r2,r16,r17
 200260c:	80c00115 	stw	r3,4(r16)
 2002610:	003fdf06 	br	2002590 <_malloc_r+0x2bc>
 2002614:	e4000217 	ldw	r16,8(fp)
 2002618:	00bfff04 	movi	r2,-4
 200261c:	80c00117 	ldw	r3,4(r16)
 2002620:	802d883a 	mov	r22,r16
 2002624:	18aa703a 	and	r21,r3,r2
 2002628:	ac401636 	bltu	r21,r17,2002684 <_malloc_r+0x3b0>
 200262c:	ac49c83a 	sub	r4,r21,r17
 2002630:	008003c4 	movi	r2,15
 2002634:	1100130e 	bge	r2,r4,2002684 <_malloc_r+0x3b0>
 2002638:	88800054 	ori	r2,r17,1
 200263c:	8447883a 	add	r3,r16,r17
 2002640:	80800115 	stw	r2,4(r16)
 2002644:	20800054 	ori	r2,r4,1
 2002648:	18800115 	stw	r2,4(r3)
 200264c:	e0c00215 	stw	r3,8(fp)
 2002650:	9009883a 	mov	r4,r18
 2002654:	200bc340 	call	200bc34 <__malloc_unlock>
 2002658:	80c00204 	addi	r3,r16,8
 200265c:	003f3106 	br	2002324 <_malloc_r+0x50>
 2002660:	39c00117 	ldw	r7,4(r7)
 2002664:	573ffe04 	addi	fp,r10,-8
 2002668:	003fa006 	br	20024ec <_malloc_r+0x218>
 200266c:	00801504 	movi	r2,84
 2002670:	10c06736 	bltu	r2,r3,2002810 <_malloc_r+0x53c>
 2002674:	8804d33a 	srli	r2,r17,12
 2002678:	11801b84 	addi	r6,r2,110
 200267c:	300490fa 	slli	r2,r6,3
 2002680:	003f4106 	br	2002388 <_malloc_r+0xb4>
 2002684:	d0a6f817 	ldw	r2,-25632(gp)
 2002688:	d0e00317 	ldw	r3,-32756(gp)
 200268c:	053fffc4 	movi	r20,-1
 2002690:	10800404 	addi	r2,r2,16
 2002694:	88a7883a 	add	r19,r17,r2
 2002698:	1d000326 	beq	r3,r20,20026a8 <_malloc_r+0x3d4>
 200269c:	98c3ffc4 	addi	r3,r19,4095
 20026a0:	00bc0004 	movi	r2,-4096
 20026a4:	18a6703a 	and	r19,r3,r2
 20026a8:	9009883a 	mov	r4,r18
 20026ac:	980b883a 	mov	r5,r19
 20026b0:	2002e2c0 	call	2002e2c <_sbrk_r>
 20026b4:	1009883a 	mov	r4,r2
 20026b8:	15000426 	beq	r2,r20,20026cc <_malloc_r+0x3f8>
 20026bc:	854b883a 	add	r5,r16,r21
 20026c0:	1029883a 	mov	r20,r2
 20026c4:	11405a2e 	bgeu	r2,r5,2002830 <_malloc_r+0x55c>
 20026c8:	87000c26 	beq	r16,fp,20026fc <_malloc_r+0x428>
 20026cc:	e4000217 	ldw	r16,8(fp)
 20026d0:	80c00117 	ldw	r3,4(r16)
 20026d4:	00bfff04 	movi	r2,-4
 20026d8:	1884703a 	and	r2,r3,r2
 20026dc:	14400336 	bltu	r2,r17,20026ec <_malloc_r+0x418>
 20026e0:	1449c83a 	sub	r4,r2,r17
 20026e4:	008003c4 	movi	r2,15
 20026e8:	113fd316 	blt	r2,r4,2002638 <_malloc_r+0x364>
 20026ec:	9009883a 	mov	r4,r18
 20026f0:	200bc340 	call	200bc34 <__malloc_unlock>
 20026f4:	0007883a 	mov	r3,zero
 20026f8:	003f0a06 	br	2002324 <_malloc_r+0x50>
 20026fc:	05c08074 	movhi	r23,513
 2002700:	bdcc1704 	addi	r23,r23,12380
 2002704:	b8800017 	ldw	r2,0(r23)
 2002708:	988d883a 	add	r6,r19,r2
 200270c:	b9800015 	stw	r6,0(r23)
 2002710:	d0e00317 	ldw	r3,-32756(gp)
 2002714:	00bfffc4 	movi	r2,-1
 2002718:	18808e26 	beq	r3,r2,2002954 <_malloc_r+0x680>
 200271c:	2145c83a 	sub	r2,r4,r5
 2002720:	3085883a 	add	r2,r6,r2
 2002724:	b8800015 	stw	r2,0(r23)
 2002728:	20c001cc 	andi	r3,r4,7
 200272c:	18005f1e 	bne	r3,zero,20028ac <_malloc_r+0x5d8>
 2002730:	000b883a 	mov	r5,zero
 2002734:	a4c5883a 	add	r2,r20,r19
 2002738:	1083ffcc 	andi	r2,r2,4095
 200273c:	00c40004 	movi	r3,4096
 2002740:	1887c83a 	sub	r3,r3,r2
 2002744:	28e7883a 	add	r19,r5,r3
 2002748:	9009883a 	mov	r4,r18
 200274c:	980b883a 	mov	r5,r19
 2002750:	2002e2c0 	call	2002e2c <_sbrk_r>
 2002754:	1007883a 	mov	r3,r2
 2002758:	00bfffc4 	movi	r2,-1
 200275c:	18807a26 	beq	r3,r2,2002948 <_malloc_r+0x674>
 2002760:	1d05c83a 	sub	r2,r3,r20
 2002764:	9885883a 	add	r2,r19,r2
 2002768:	10c00054 	ori	r3,r2,1
 200276c:	b8800017 	ldw	r2,0(r23)
 2002770:	a021883a 	mov	r16,r20
 2002774:	a0c00115 	stw	r3,4(r20)
 2002778:	9885883a 	add	r2,r19,r2
 200277c:	b8800015 	stw	r2,0(r23)
 2002780:	e5000215 	stw	r20,8(fp)
 2002784:	b7003626 	beq	r22,fp,2002860 <_malloc_r+0x58c>
 2002788:	018003c4 	movi	r6,15
 200278c:	35404b36 	bltu	r6,r21,20028bc <_malloc_r+0x5e8>
 2002790:	00800044 	movi	r2,1
 2002794:	a0800115 	stw	r2,4(r20)
 2002798:	003fcd06 	br	20026d0 <_malloc_r+0x3fc>
 200279c:	2808d27a 	srli	r4,r5,9
 20027a0:	2000371e 	bne	r4,zero,2002880 <_malloc_r+0x5ac>
 20027a4:	2808d0fa 	srli	r4,r5,3
 20027a8:	200690fa 	slli	r3,r4,3
 20027ac:	1ad1883a 	add	r8,r3,r11
 20027b0:	41800217 	ldw	r6,8(r8)
 20027b4:	41805b26 	beq	r8,r6,2002924 <_malloc_r+0x650>
 20027b8:	30800117 	ldw	r2,4(r6)
 20027bc:	00ffff04 	movi	r3,-4
 20027c0:	10c4703a 	and	r2,r2,r3
 20027c4:	2880022e 	bgeu	r5,r2,20027d0 <_malloc_r+0x4fc>
 20027c8:	31800217 	ldw	r6,8(r6)
 20027cc:	41bffa1e 	bne	r8,r6,20027b8 <_malloc_r+0x4e4>
 20027d0:	32000317 	ldw	r8,12(r6)
 20027d4:	39c00117 	ldw	r7,4(r7)
 20027d8:	82000315 	stw	r8,12(r16)
 20027dc:	81800215 	stw	r6,8(r16)
 20027e0:	07008074 	movhi	fp,513
 20027e4:	e73f4004 	addi	fp,fp,-768
 20027e8:	34000315 	stw	r16,12(r6)
 20027ec:	44000215 	stw	r16,8(r8)
 20027f0:	003f3e06 	br	20024ec <_malloc_r+0x218>
 20027f4:	63000044 	addi	r12,r12,1
 20027f8:	608000cc 	andi	r2,r12,3
 20027fc:	10005d26 	beq	r2,zero,2002974 <_malloc_r+0x6a0>
 2002800:	18c00204 	addi	r3,r3,8
 2002804:	003f5106 	br	200254c <_malloc_r+0x278>
 2002808:	8089883a 	add	r4,r16,r2
 200280c:	003f6d06 	br	20025c4 <_malloc_r+0x2f0>
 2002810:	00805504 	movi	r2,340
 2002814:	10c02036 	bltu	r2,r3,2002898 <_malloc_r+0x5c4>
 2002818:	8804d3fa 	srli	r2,r17,15
 200281c:	11801dc4 	addi	r6,r2,119
 2002820:	300490fa 	slli	r2,r6,3
 2002824:	003ed806 	br	2002388 <_malloc_r+0xb4>
 2002828:	48c000c4 	addi	r3,r9,3
 200282c:	003f3106 	br	20024f4 <_malloc_r+0x220>
 2002830:	05c08074 	movhi	r23,513
 2002834:	bdcc1704 	addi	r23,r23,12380
 2002838:	b8800017 	ldw	r2,0(r23)
 200283c:	988d883a 	add	r6,r19,r2
 2002840:	b9800015 	stw	r6,0(r23)
 2002844:	293fb21e 	bne	r5,r4,2002710 <_malloc_r+0x43c>
 2002848:	2083ffcc 	andi	r2,r4,4095
 200284c:	103fb01e 	bne	r2,zero,2002710 <_malloc_r+0x43c>
 2002850:	e4000217 	ldw	r16,8(fp)
 2002854:	9d45883a 	add	r2,r19,r21
 2002858:	10800054 	ori	r2,r2,1
 200285c:	80800115 	stw	r2,4(r16)
 2002860:	b8c00017 	ldw	r3,0(r23)
 2002864:	d0a6f917 	ldw	r2,-25628(gp)
 2002868:	10c0012e 	bgeu	r2,r3,2002870 <_malloc_r+0x59c>
 200286c:	d0e6f915 	stw	r3,-25628(gp)
 2002870:	d0a6fa17 	ldw	r2,-25624(gp)
 2002874:	10ff962e 	bgeu	r2,r3,20026d0 <_malloc_r+0x3fc>
 2002878:	d0e6fa15 	stw	r3,-25624(gp)
 200287c:	003f9406 	br	20026d0 <_malloc_r+0x3fc>
 2002880:	00800104 	movi	r2,4
 2002884:	11001e36 	bltu	r2,r4,2002900 <_malloc_r+0x62c>
 2002888:	2804d1ba 	srli	r2,r5,6
 200288c:	11000e04 	addi	r4,r2,56
 2002890:	200690fa 	slli	r3,r4,3
 2002894:	003fc506 	br	20027ac <_malloc_r+0x4d8>
 2002898:	00815504 	movi	r2,1364
 200289c:	10c01d2e 	bgeu	r2,r3,2002914 <_malloc_r+0x640>
 20028a0:	01801f84 	movi	r6,126
 20028a4:	0080fc04 	movi	r2,1008
 20028a8:	003eb706 	br	2002388 <_malloc_r+0xb4>
 20028ac:	00800204 	movi	r2,8
 20028b0:	10cbc83a 	sub	r5,r2,r3
 20028b4:	2169883a 	add	r20,r4,r5
 20028b8:	003f9e06 	br	2002734 <_malloc_r+0x460>
 20028bc:	00bffe04 	movi	r2,-8
 20028c0:	a93ffd04 	addi	r4,r21,-12
 20028c4:	2088703a 	and	r4,r4,r2
 20028c8:	b10b883a 	add	r5,r22,r4
 20028cc:	00c00144 	movi	r3,5
 20028d0:	28c00215 	stw	r3,8(r5)
 20028d4:	28c00115 	stw	r3,4(r5)
 20028d8:	b0800117 	ldw	r2,4(r22)
 20028dc:	1080004c 	andi	r2,r2,1
 20028e0:	2084b03a 	or	r2,r4,r2
 20028e4:	b0800115 	stw	r2,4(r22)
 20028e8:	313fdd2e 	bgeu	r6,r4,2002860 <_malloc_r+0x58c>
 20028ec:	b1400204 	addi	r5,r22,8
 20028f0:	9009883a 	mov	r4,r18
 20028f4:	200708c0 	call	200708c <_free_r>
 20028f8:	e4000217 	ldw	r16,8(fp)
 20028fc:	003fd806 	br	2002860 <_malloc_r+0x58c>
 2002900:	00800504 	movi	r2,20
 2002904:	11001536 	bltu	r2,r4,200295c <_malloc_r+0x688>
 2002908:	210016c4 	addi	r4,r4,91
 200290c:	200690fa 	slli	r3,r4,3
 2002910:	003fa606 	br	20027ac <_malloc_r+0x4d8>
 2002914:	8804d4ba 	srli	r2,r17,18
 2002918:	11801f04 	addi	r6,r2,124
 200291c:	300490fa 	slli	r2,r6,3
 2002920:	003e9906 	br	2002388 <_malloc_r+0xb4>
 2002924:	2009d0ba 	srai	r4,r4,2
 2002928:	01408074 	movhi	r5,513
 200292c:	297f4004 	addi	r5,r5,-768
 2002930:	00c00044 	movi	r3,1
 2002934:	28800117 	ldw	r2,4(r5)
 2002938:	1906983a 	sll	r3,r3,r4
 200293c:	10c4b03a 	or	r2,r2,r3
 2002940:	28800115 	stw	r2,4(r5)
 2002944:	003fa306 	br	20027d4 <_malloc_r+0x500>
 2002948:	0027883a 	mov	r19,zero
 200294c:	00c00044 	movi	r3,1
 2002950:	003f8606 	br	200276c <_malloc_r+0x498>
 2002954:	d1200315 	stw	r4,-32756(gp)
 2002958:	003f7306 	br	2002728 <_malloc_r+0x454>
 200295c:	00801504 	movi	r2,84
 2002960:	11001936 	bltu	r2,r4,20029c8 <_malloc_r+0x6f4>
 2002964:	2804d33a 	srli	r2,r5,12
 2002968:	11001b84 	addi	r4,r2,110
 200296c:	200690fa 	slli	r3,r4,3
 2002970:	003f8e06 	br	20027ac <_malloc_r+0x4d8>
 2002974:	480b883a 	mov	r5,r9
 2002978:	6807883a 	mov	r3,r13
 200297c:	288000cc 	andi	r2,r5,3
 2002980:	18fffe04 	addi	r3,r3,-8
 2002984:	297fffc4 	addi	r5,r5,-1
 2002988:	10001526 	beq	r2,zero,20029e0 <_malloc_r+0x70c>
 200298c:	18800217 	ldw	r2,8(r3)
 2002990:	10fffa26 	beq	r2,r3,200297c <_malloc_r+0x6a8>
 2002994:	2109883a 	add	r4,r4,r4
 2002998:	393f1e36 	bltu	r7,r4,2002614 <_malloc_r+0x340>
 200299c:	203f1d26 	beq	r4,zero,2002614 <_malloc_r+0x340>
 20029a0:	21c4703a 	and	r2,r4,r7
 20029a4:	10000226 	beq	r2,zero,20029b0 <_malloc_r+0x6dc>
 20029a8:	6013883a 	mov	r9,r12
 20029ac:	003ee106 	br	2002534 <_malloc_r+0x260>
 20029b0:	2109883a 	add	r4,r4,r4
 20029b4:	3904703a 	and	r2,r7,r4
 20029b8:	63000104 	addi	r12,r12,4
 20029bc:	103ffc26 	beq	r2,zero,20029b0 <_malloc_r+0x6dc>
 20029c0:	6013883a 	mov	r9,r12
 20029c4:	003edb06 	br	2002534 <_malloc_r+0x260>
 20029c8:	00805504 	movi	r2,340
 20029cc:	11000836 	bltu	r2,r4,20029f0 <_malloc_r+0x71c>
 20029d0:	2804d3fa 	srli	r2,r5,15
 20029d4:	11001dc4 	addi	r4,r2,119
 20029d8:	200690fa 	slli	r3,r4,3
 20029dc:	003f7306 	br	20027ac <_malloc_r+0x4d8>
 20029e0:	0104303a 	nor	r2,zero,r4
 20029e4:	388e703a 	and	r7,r7,r2
 20029e8:	e1c00115 	stw	r7,4(fp)
 20029ec:	003fe906 	br	2002994 <_malloc_r+0x6c0>
 20029f0:	00815504 	movi	r2,1364
 20029f4:	1100032e 	bgeu	r2,r4,2002a04 <_malloc_r+0x730>
 20029f8:	01001f84 	movi	r4,126
 20029fc:	00c0fc04 	movi	r3,1008
 2002a00:	003f6a06 	br	20027ac <_malloc_r+0x4d8>
 2002a04:	2804d4ba 	srli	r2,r5,18
 2002a08:	11001f04 	addi	r4,r2,124
 2002a0c:	200690fa 	slli	r3,r4,3
 2002a10:	003f6606 	br	20027ac <_malloc_r+0x4d8>

02002a14 <_open_r>:
 2002a14:	defffd04 	addi	sp,sp,-12
 2002a18:	dc000015 	stw	r16,0(sp)
 2002a1c:	04008074 	movhi	r16,513
 2002a20:	840c0604 	addi	r16,r16,12312
 2002a24:	dc400115 	stw	r17,4(sp)
 2002a28:	80000015 	stw	zero,0(r16)
 2002a2c:	2023883a 	mov	r17,r4
 2002a30:	2809883a 	mov	r4,r5
 2002a34:	300b883a 	mov	r5,r6
 2002a38:	380d883a 	mov	r6,r7
 2002a3c:	dfc00215 	stw	ra,8(sp)
 2002a40:	200bd300 	call	200bd30 <open>
 2002a44:	1007883a 	mov	r3,r2
 2002a48:	00bfffc4 	movi	r2,-1
 2002a4c:	18800626 	beq	r3,r2,2002a68 <_open_r+0x54>
 2002a50:	1805883a 	mov	r2,r3
 2002a54:	dfc00217 	ldw	ra,8(sp)
 2002a58:	dc400117 	ldw	r17,4(sp)
 2002a5c:	dc000017 	ldw	r16,0(sp)
 2002a60:	dec00304 	addi	sp,sp,12
 2002a64:	f800283a 	ret
 2002a68:	80800017 	ldw	r2,0(r16)
 2002a6c:	103ff826 	beq	r2,zero,2002a50 <_open_r+0x3c>
 2002a70:	88800015 	stw	r2,0(r17)
 2002a74:	1805883a 	mov	r2,r3
 2002a78:	dfc00217 	ldw	ra,8(sp)
 2002a7c:	dc400117 	ldw	r17,4(sp)
 2002a80:	dc000017 	ldw	r16,0(sp)
 2002a84:	dec00304 	addi	sp,sp,12
 2002a88:	f800283a 	ret

02002a8c <printf>:
 2002a8c:	defffb04 	addi	sp,sp,-20
 2002a90:	dfc00115 	stw	ra,4(sp)
 2002a94:	d9400215 	stw	r5,8(sp)
 2002a98:	d9800315 	stw	r6,12(sp)
 2002a9c:	d9c00415 	stw	r7,16(sp)
 2002aa0:	00808074 	movhi	r2,513
 2002aa4:	10850f04 	addi	r2,r2,5180
 2002aa8:	10c00017 	ldw	r3,0(r2)
 2002aac:	200b883a 	mov	r5,r4
 2002ab0:	d8800204 	addi	r2,sp,8
 2002ab4:	19000217 	ldw	r4,8(r3)
 2002ab8:	100d883a 	mov	r6,r2
 2002abc:	d8800015 	stw	r2,0(sp)
 2002ac0:	2004fbc0 	call	2004fbc <__vfprintf_internal>
 2002ac4:	dfc00117 	ldw	ra,4(sp)
 2002ac8:	dec00504 	addi	sp,sp,20
 2002acc:	f800283a 	ret

02002ad0 <_printf_r>:
 2002ad0:	defffc04 	addi	sp,sp,-16
 2002ad4:	dfc00115 	stw	ra,4(sp)
 2002ad8:	d9800215 	stw	r6,8(sp)
 2002adc:	d9c00315 	stw	r7,12(sp)
 2002ae0:	280d883a 	mov	r6,r5
 2002ae4:	21400217 	ldw	r5,8(r4)
 2002ae8:	d8c00204 	addi	r3,sp,8
 2002aec:	180f883a 	mov	r7,r3
 2002af0:	d8c00015 	stw	r3,0(sp)
 2002af4:	20031100 	call	2003110 <___vfprintf_internal_r>
 2002af8:	dfc00117 	ldw	ra,4(sp)
 2002afc:	dec00404 	addi	sp,sp,16
 2002b00:	f800283a 	ret

02002b04 <_puts_r>:
 2002b04:	defff604 	addi	sp,sp,-40
 2002b08:	dc400715 	stw	r17,28(sp)
 2002b0c:	2023883a 	mov	r17,r4
 2002b10:	2809883a 	mov	r4,r5
 2002b14:	dfc00915 	stw	ra,36(sp)
 2002b18:	dcc00815 	stw	r19,32(sp)
 2002b1c:	2827883a 	mov	r19,r5
 2002b20:	2002fe80 	call	2002fe8 <strlen>
 2002b24:	89400217 	ldw	r5,8(r17)
 2002b28:	00c08074 	movhi	r3,513
 2002b2c:	18fd0a04 	addi	r3,r3,-3032
 2002b30:	01c00044 	movi	r7,1
 2002b34:	12000044 	addi	r8,r2,1
 2002b38:	d8c00515 	stw	r3,20(sp)
 2002b3c:	d9c00615 	stw	r7,24(sp)
 2002b40:	d8c00304 	addi	r3,sp,12
 2002b44:	01c00084 	movi	r7,2
 2002b48:	8809883a 	mov	r4,r17
 2002b4c:	d80d883a 	mov	r6,sp
 2002b50:	d8c00015 	stw	r3,0(sp)
 2002b54:	dcc00315 	stw	r19,12(sp)
 2002b58:	da000215 	stw	r8,8(sp)
 2002b5c:	d9c00115 	stw	r7,4(sp)
 2002b60:	d8800415 	stw	r2,16(sp)
 2002b64:	20073a00 	call	20073a0 <__sfvwrite_r>
 2002b68:	00ffffc4 	movi	r3,-1
 2002b6c:	10000626 	beq	r2,zero,2002b88 <_puts_r+0x84>
 2002b70:	1805883a 	mov	r2,r3
 2002b74:	dfc00917 	ldw	ra,36(sp)
 2002b78:	dcc00817 	ldw	r19,32(sp)
 2002b7c:	dc400717 	ldw	r17,28(sp)
 2002b80:	dec00a04 	addi	sp,sp,40
 2002b84:	f800283a 	ret
 2002b88:	00c00284 	movi	r3,10
 2002b8c:	1805883a 	mov	r2,r3
 2002b90:	dfc00917 	ldw	ra,36(sp)
 2002b94:	dcc00817 	ldw	r19,32(sp)
 2002b98:	dc400717 	ldw	r17,28(sp)
 2002b9c:	dec00a04 	addi	sp,sp,40
 2002ba0:	f800283a 	ret

02002ba4 <puts>:
 2002ba4:	00808074 	movhi	r2,513
 2002ba8:	10850f04 	addi	r2,r2,5180
 2002bac:	200b883a 	mov	r5,r4
 2002bb0:	11000017 	ldw	r4,0(r2)
 2002bb4:	2002b041 	jmpi	2002b04 <_puts_r>

02002bb8 <srand>:
 2002bb8:	00808074 	movhi	r2,513
 2002bbc:	10850f04 	addi	r2,r2,5180
 2002bc0:	11400017 	ldw	r5,0(r2)
 2002bc4:	0007883a 	mov	r3,zero
 2002bc8:	28c02a15 	stw	r3,168(r5)
 2002bcc:	29002915 	stw	r4,164(r5)
 2002bd0:	f800283a 	ret

02002bd4 <rand>:
 2002bd4:	defffe04 	addi	sp,sp,-8
 2002bd8:	00808074 	movhi	r2,513
 2002bdc:	10850f04 	addi	r2,r2,5180
 2002be0:	dc000015 	stw	r16,0(sp)
 2002be4:	14000017 	ldw	r16,0(r2)
 2002be8:	dfc00115 	stw	ra,4(sp)
 2002bec:	00932574 	movhi	r2,19605
 2002bf0:	109fcb44 	addi	r2,r2,32557
 2002bf4:	82002917 	ldw	r8,164(r16)
 2002bf8:	82402a17 	ldw	r9,168(r16)
 2002bfc:	00d614b4 	movhi	r3,22610
 2002c00:	18fd0b44 	addi	r3,r3,-3027
 2002c04:	4009883a 	mov	r4,r8
 2002c08:	180f883a 	mov	r7,r3
 2002c0c:	100d883a 	mov	r6,r2
 2002c10:	480b883a 	mov	r5,r9
 2002c14:	20011e40 	call	20011e4 <__muldi3>
 2002c18:	02000044 	movi	r8,1
 2002c1c:	1209883a 	add	r4,r2,r8
 2002c20:	2095803a 	cmpltu	r10,r4,r2
 2002c24:	50d5883a 	add	r10,r10,r3
 2002c28:	81002915 	stw	r4,164(r16)
 2002c2c:	01200034 	movhi	r4,32768
 2002c30:	213fffc4 	addi	r4,r4,-1
 2002c34:	2284703a 	and	r2,r4,r10
 2002c38:	82802a15 	stw	r10,168(r16)
 2002c3c:	dfc00117 	ldw	ra,4(sp)
 2002c40:	dc000017 	ldw	r16,0(sp)
 2002c44:	dec00204 	addi	sp,sp,8
 2002c48:	f800283a 	ret

02002c4c <__srefill_r>:
 2002c4c:	defffd04 	addi	sp,sp,-12
 2002c50:	dc400115 	stw	r17,4(sp)
 2002c54:	dc000015 	stw	r16,0(sp)
 2002c58:	dfc00215 	stw	ra,8(sp)
 2002c5c:	2023883a 	mov	r17,r4
 2002c60:	2821883a 	mov	r16,r5
 2002c64:	20000226 	beq	r4,zero,2002c70 <__srefill_r+0x24>
 2002c68:	20800e17 	ldw	r2,56(r4)
 2002c6c:	10004126 	beq	r2,zero,2002d74 <__srefill_r+0x128>
 2002c70:	80c0030b 	ldhu	r3,12(r16)
 2002c74:	80000115 	stw	zero,4(r16)
 2002c78:	1880080c 	andi	r2,r3,32
 2002c7c:	1000361e 	bne	r2,zero,2002d58 <__srefill_r+0x10c>
 2002c80:	1880010c 	andi	r2,r3,4
 2002c84:	1000211e 	bne	r2,zero,2002d0c <__srefill_r+0xc0>
 2002c88:	1880040c 	andi	r2,r3,16
 2002c8c:	10005026 	beq	r2,zero,2002dd0 <__srefill_r+0x184>
 2002c90:	1880020c 	andi	r2,r3,8
 2002c94:	1000541e 	bne	r2,zero,2002de8 <__srefill_r+0x19c>
 2002c98:	8080030b 	ldhu	r2,12(r16)
 2002c9c:	10800114 	ori	r2,r2,4
 2002ca0:	8080030d 	sth	r2,12(r16)
 2002ca4:	80800417 	ldw	r2,16(r16)
 2002ca8:	10004526 	beq	r2,zero,2002dc0 <__srefill_r+0x174>
 2002cac:	8080030b 	ldhu	r2,12(r16)
 2002cb0:	108000cc 	andi	r2,r2,3
 2002cb4:	1000361e 	bne	r2,zero,2002d90 <__srefill_r+0x144>
 2002cb8:	81800417 	ldw	r6,16(r16)
 2002cbc:	80c00817 	ldw	r3,32(r16)
 2002cc0:	81400717 	ldw	r5,28(r16)
 2002cc4:	81c00517 	ldw	r7,20(r16)
 2002cc8:	8809883a 	mov	r4,r17
 2002ccc:	81800015 	stw	r6,0(r16)
 2002cd0:	183ee83a 	callr	r3
 2002cd4:	80c0030b 	ldhu	r3,12(r16)
 2002cd8:	1009883a 	mov	r4,r2
 2002cdc:	80800115 	stw	r2,4(r16)
 2002ce0:	00b7ffc4 	movi	r2,-8193
 2002ce4:	1884703a 	and	r2,r3,r2
 2002ce8:	8080030d 	sth	r2,12(r16)
 2002cec:	0100230e 	bge	zero,r4,2002d7c <__srefill_r+0x130>
 2002cf0:	0009883a 	mov	r4,zero
 2002cf4:	2005883a 	mov	r2,r4
 2002cf8:	dfc00217 	ldw	ra,8(sp)
 2002cfc:	dc400117 	ldw	r17,4(sp)
 2002d00:	dc000017 	ldw	r16,0(sp)
 2002d04:	dec00304 	addi	sp,sp,12
 2002d08:	f800283a 	ret
 2002d0c:	81400c17 	ldw	r5,48(r16)
 2002d10:	283fe426 	beq	r5,zero,2002ca4 <__srefill_r+0x58>
 2002d14:	80801004 	addi	r2,r16,64
 2002d18:	28800226 	beq	r5,r2,2002d24 <__srefill_r+0xd8>
 2002d1c:	8809883a 	mov	r4,r17
 2002d20:	200708c0 	call	200708c <_free_r>
 2002d24:	80800f17 	ldw	r2,60(r16)
 2002d28:	80000c15 	stw	zero,48(r16)
 2002d2c:	80800115 	stw	r2,4(r16)
 2002d30:	103fdc26 	beq	r2,zero,2002ca4 <__srefill_r+0x58>
 2002d34:	80800e17 	ldw	r2,56(r16)
 2002d38:	0009883a 	mov	r4,zero
 2002d3c:	80800015 	stw	r2,0(r16)
 2002d40:	2005883a 	mov	r2,r4
 2002d44:	dfc00217 	ldw	ra,8(sp)
 2002d48:	dc400117 	ldw	r17,4(sp)
 2002d4c:	dc000017 	ldw	r16,0(sp)
 2002d50:	dec00304 	addi	sp,sp,12
 2002d54:	f800283a 	ret
 2002d58:	013fffc4 	movi	r4,-1
 2002d5c:	2005883a 	mov	r2,r4
 2002d60:	dfc00217 	ldw	ra,8(sp)
 2002d64:	dc400117 	ldw	r17,4(sp)
 2002d68:	dc000017 	ldw	r16,0(sp)
 2002d6c:	dec00304 	addi	sp,sp,12
 2002d70:	f800283a 	ret
 2002d74:	2006c680 	call	2006c68 <__sinit>
 2002d78:	003fbd06 	br	2002c70 <__srefill_r+0x24>
 2002d7c:	20000b1e 	bne	r4,zero,2002dac <__srefill_r+0x160>
 2002d80:	10800814 	ori	r2,r2,32
 2002d84:	013fffc4 	movi	r4,-1
 2002d88:	8080030d 	sth	r2,12(r16)
 2002d8c:	003fd906 	br	2002cf4 <__srefill_r+0xa8>
 2002d90:	00808074 	movhi	r2,513
 2002d94:	10851004 	addi	r2,r2,5184
 2002d98:	11000017 	ldw	r4,0(r2)
 2002d9c:	01408034 	movhi	r5,512
 2002da0:	294b8404 	addi	r5,r5,11792
 2002da4:	20079040 	call	2007904 <_fwalk>
 2002da8:	003fc306 	br	2002cb8 <__srefill_r+0x6c>
 2002dac:	10801014 	ori	r2,r2,64
 2002db0:	013fffc4 	movi	r4,-1
 2002db4:	8080030d 	sth	r2,12(r16)
 2002db8:	80000115 	stw	zero,4(r16)
 2002dbc:	003fcd06 	br	2002cf4 <__srefill_r+0xa8>
 2002dc0:	8809883a 	mov	r4,r17
 2002dc4:	800b883a 	mov	r5,r16
 2002dc8:	20021400 	call	2002140 <__smakebuf_r>
 2002dcc:	003fb706 	br	2002cac <__srefill_r+0x60>
 2002dd0:	18c01014 	ori	r3,r3,64
 2002dd4:	00800244 	movi	r2,9
 2002dd8:	013fffc4 	movi	r4,-1
 2002ddc:	88800015 	stw	r2,0(r17)
 2002de0:	80c0030d 	sth	r3,12(r16)
 2002de4:	003fc306 	br	2002cf4 <__srefill_r+0xa8>
 2002de8:	8809883a 	mov	r4,r17
 2002dec:	800b883a 	mov	r5,r16
 2002df0:	20069d00 	call	20069d0 <_fflush_r>
 2002df4:	103fd81e 	bne	r2,zero,2002d58 <__srefill_r+0x10c>
 2002df8:	8080030b 	ldhu	r2,12(r16)
 2002dfc:	80000215 	stw	zero,8(r16)
 2002e00:	80000615 	stw	zero,24(r16)
 2002e04:	10bffdcc 	andi	r2,r2,65527
 2002e08:	8080030d 	sth	r2,12(r16)
 2002e0c:	003fa206 	br	2002c98 <__srefill_r+0x4c>

02002e10 <lflush>:
 2002e10:	20c0030b 	ldhu	r3,12(r4)
 2002e14:	01400244 	movi	r5,9
 2002e18:	0005883a 	mov	r2,zero
 2002e1c:	18c0024c 	andi	r3,r3,9
 2002e20:	19400126 	beq	r3,r5,2002e28 <lflush+0x18>
 2002e24:	f800283a 	ret
 2002e28:	2006bcc1 	jmpi	2006bcc <fflush>

02002e2c <_sbrk_r>:
 2002e2c:	defffd04 	addi	sp,sp,-12
 2002e30:	dc000015 	stw	r16,0(sp)
 2002e34:	04008074 	movhi	r16,513
 2002e38:	840c0604 	addi	r16,r16,12312
 2002e3c:	dc400115 	stw	r17,4(sp)
 2002e40:	80000015 	stw	zero,0(r16)
 2002e44:	2023883a 	mov	r17,r4
 2002e48:	2809883a 	mov	r4,r5
 2002e4c:	dfc00215 	stw	ra,8(sp)
 2002e50:	200c0f80 	call	200c0f8 <sbrk>
 2002e54:	1007883a 	mov	r3,r2
 2002e58:	00bfffc4 	movi	r2,-1
 2002e5c:	18800626 	beq	r3,r2,2002e78 <_sbrk_r+0x4c>
 2002e60:	1805883a 	mov	r2,r3
 2002e64:	dfc00217 	ldw	ra,8(sp)
 2002e68:	dc400117 	ldw	r17,4(sp)
 2002e6c:	dc000017 	ldw	r16,0(sp)
 2002e70:	dec00304 	addi	sp,sp,12
 2002e74:	f800283a 	ret
 2002e78:	80800017 	ldw	r2,0(r16)
 2002e7c:	103ff826 	beq	r2,zero,2002e60 <_sbrk_r+0x34>
 2002e80:	88800015 	stw	r2,0(r17)
 2002e84:	1805883a 	mov	r2,r3
 2002e88:	dfc00217 	ldw	ra,8(sp)
 2002e8c:	dc400117 	ldw	r17,4(sp)
 2002e90:	dc000017 	ldw	r16,0(sp)
 2002e94:	dec00304 	addi	sp,sp,12
 2002e98:	f800283a 	ret

02002e9c <__sclose>:
 2002e9c:	2940038f 	ldh	r5,14(r5)
 2002ea0:	20051941 	jmpi	2005194 <_close_r>

02002ea4 <__sseek>:
 2002ea4:	defffe04 	addi	sp,sp,-8
 2002ea8:	dc000015 	stw	r16,0(sp)
 2002eac:	2821883a 	mov	r16,r5
 2002eb0:	2940038f 	ldh	r5,14(r5)
 2002eb4:	dfc00115 	stw	ra,4(sp)
 2002eb8:	2007b640 	call	2007b64 <_lseek_r>
 2002ebc:	1007883a 	mov	r3,r2
 2002ec0:	00bfffc4 	movi	r2,-1
 2002ec4:	18800926 	beq	r3,r2,2002eec <__sseek+0x48>
 2002ec8:	8080030b 	ldhu	r2,12(r16)
 2002ecc:	80c01415 	stw	r3,80(r16)
 2002ed0:	10840014 	ori	r2,r2,4096
 2002ed4:	8080030d 	sth	r2,12(r16)
 2002ed8:	1805883a 	mov	r2,r3
 2002edc:	dfc00117 	ldw	ra,4(sp)
 2002ee0:	dc000017 	ldw	r16,0(sp)
 2002ee4:	dec00204 	addi	sp,sp,8
 2002ee8:	f800283a 	ret
 2002eec:	8080030b 	ldhu	r2,12(r16)
 2002ef0:	10bbffcc 	andi	r2,r2,61439
 2002ef4:	8080030d 	sth	r2,12(r16)
 2002ef8:	1805883a 	mov	r2,r3
 2002efc:	dfc00117 	ldw	ra,4(sp)
 2002f00:	dc000017 	ldw	r16,0(sp)
 2002f04:	dec00204 	addi	sp,sp,8
 2002f08:	f800283a 	ret

02002f0c <__swrite>:
 2002f0c:	2880030b 	ldhu	r2,12(r5)
 2002f10:	defffb04 	addi	sp,sp,-20
 2002f14:	dcc00315 	stw	r19,12(sp)
 2002f18:	1080400c 	andi	r2,r2,256
 2002f1c:	dc800215 	stw	r18,8(sp)
 2002f20:	dc400115 	stw	r17,4(sp)
 2002f24:	dc000015 	stw	r16,0(sp)
 2002f28:	3027883a 	mov	r19,r6
 2002f2c:	3825883a 	mov	r18,r7
 2002f30:	dfc00415 	stw	ra,16(sp)
 2002f34:	2821883a 	mov	r16,r5
 2002f38:	000d883a 	mov	r6,zero
 2002f3c:	01c00084 	movi	r7,2
 2002f40:	2023883a 	mov	r17,r4
 2002f44:	10000226 	beq	r2,zero,2002f50 <__swrite+0x44>
 2002f48:	2940038f 	ldh	r5,14(r5)
 2002f4c:	2007b640 	call	2007b64 <_lseek_r>
 2002f50:	8080030b 	ldhu	r2,12(r16)
 2002f54:	8140038f 	ldh	r5,14(r16)
 2002f58:	8809883a 	mov	r4,r17
 2002f5c:	10bbffcc 	andi	r2,r2,61439
 2002f60:	980d883a 	mov	r6,r19
 2002f64:	900f883a 	mov	r7,r18
 2002f68:	8080030d 	sth	r2,12(r16)
 2002f6c:	dfc00417 	ldw	ra,16(sp)
 2002f70:	dcc00317 	ldw	r19,12(sp)
 2002f74:	dc800217 	ldw	r18,8(sp)
 2002f78:	dc400117 	ldw	r17,4(sp)
 2002f7c:	dc000017 	ldw	r16,0(sp)
 2002f80:	dec00504 	addi	sp,sp,20
 2002f84:	2004fe01 	jmpi	2004fe0 <_write_r>

02002f88 <__sread>:
 2002f88:	defffe04 	addi	sp,sp,-8
 2002f8c:	dc000015 	stw	r16,0(sp)
 2002f90:	2821883a 	mov	r16,r5
 2002f94:	2940038f 	ldh	r5,14(r5)
 2002f98:	dfc00115 	stw	ra,4(sp)
 2002f9c:	2008ecc0 	call	2008ecc <_read_r>
 2002fa0:	1007883a 	mov	r3,r2
 2002fa4:	10000816 	blt	r2,zero,2002fc8 <__sread+0x40>
 2002fa8:	80801417 	ldw	r2,80(r16)
 2002fac:	10c5883a 	add	r2,r2,r3
 2002fb0:	80801415 	stw	r2,80(r16)
 2002fb4:	1805883a 	mov	r2,r3
 2002fb8:	dfc00117 	ldw	ra,4(sp)
 2002fbc:	dc000017 	ldw	r16,0(sp)
 2002fc0:	dec00204 	addi	sp,sp,8
 2002fc4:	f800283a 	ret
 2002fc8:	8080030b 	ldhu	r2,12(r16)
 2002fcc:	10bbffcc 	andi	r2,r2,61439
 2002fd0:	8080030d 	sth	r2,12(r16)
 2002fd4:	1805883a 	mov	r2,r3
 2002fd8:	dfc00117 	ldw	ra,4(sp)
 2002fdc:	dc000017 	ldw	r16,0(sp)
 2002fe0:	dec00204 	addi	sp,sp,8
 2002fe4:	f800283a 	ret

02002fe8 <strlen>:
 2002fe8:	208000cc 	andi	r2,r4,3
 2002fec:	2011883a 	mov	r8,r4
 2002ff0:	1000161e 	bne	r2,zero,200304c <strlen+0x64>
 2002ff4:	20c00017 	ldw	r3,0(r4)
 2002ff8:	017fbff4 	movhi	r5,65279
 2002ffc:	297fbfc4 	addi	r5,r5,-257
 2003000:	01e02074 	movhi	r7,32897
 2003004:	39e02004 	addi	r7,r7,-32640
 2003008:	1945883a 	add	r2,r3,r5
 200300c:	11c4703a 	and	r2,r2,r7
 2003010:	00c6303a 	nor	r3,zero,r3
 2003014:	1886703a 	and	r3,r3,r2
 2003018:	18000c1e 	bne	r3,zero,200304c <strlen+0x64>
 200301c:	280d883a 	mov	r6,r5
 2003020:	380b883a 	mov	r5,r7
 2003024:	21000104 	addi	r4,r4,4
 2003028:	20800017 	ldw	r2,0(r4)
 200302c:	1187883a 	add	r3,r2,r6
 2003030:	1946703a 	and	r3,r3,r5
 2003034:	0084303a 	nor	r2,zero,r2
 2003038:	10c4703a 	and	r2,r2,r3
 200303c:	103ff926 	beq	r2,zero,2003024 <strlen+0x3c>
 2003040:	20800007 	ldb	r2,0(r4)
 2003044:	10000326 	beq	r2,zero,2003054 <strlen+0x6c>
 2003048:	21000044 	addi	r4,r4,1
 200304c:	20800007 	ldb	r2,0(r4)
 2003050:	103ffd1e 	bne	r2,zero,2003048 <strlen+0x60>
 2003054:	2205c83a 	sub	r2,r4,r8
 2003058:	f800283a 	ret

0200305c <time>:
 200305c:	defffc04 	addi	sp,sp,-16
 2003060:	00808074 	movhi	r2,513
 2003064:	10850f04 	addi	r2,r2,5180
 2003068:	dc000215 	stw	r16,8(sp)
 200306c:	2021883a 	mov	r16,r4
 2003070:	11000017 	ldw	r4,0(r2)
 2003074:	d80b883a 	mov	r5,sp
 2003078:	000d883a 	mov	r6,zero
 200307c:	dfc00315 	stw	ra,12(sp)
 2003080:	20079bc0 	call	20079bc <_gettimeofday_r>
 2003084:	00ffffc4 	movi	r3,-1
 2003088:	10000416 	blt	r2,zero,200309c <time+0x40>
 200308c:	80000826 	beq	r16,zero,20030b0 <time+0x54>
 2003090:	d8800017 	ldw	r2,0(sp)
 2003094:	80800015 	stw	r2,0(r16)
 2003098:	1007883a 	mov	r3,r2
 200309c:	1805883a 	mov	r2,r3
 20030a0:	dfc00317 	ldw	ra,12(sp)
 20030a4:	dc000217 	ldw	r16,8(sp)
 20030a8:	dec00404 	addi	sp,sp,16
 20030ac:	f800283a 	ret
 20030b0:	d8800017 	ldw	r2,0(sp)
 20030b4:	003ff806 	br	2003098 <time+0x3c>

020030b8 <__sprint_r>:
 20030b8:	30800217 	ldw	r2,8(r6)
 20030bc:	defffe04 	addi	sp,sp,-8
 20030c0:	dc000015 	stw	r16,0(sp)
 20030c4:	dfc00115 	stw	ra,4(sp)
 20030c8:	3021883a 	mov	r16,r6
 20030cc:	0007883a 	mov	r3,zero
 20030d0:	1000061e 	bne	r2,zero,20030ec <__sprint_r+0x34>
 20030d4:	1805883a 	mov	r2,r3
 20030d8:	30000115 	stw	zero,4(r6)
 20030dc:	dfc00117 	ldw	ra,4(sp)
 20030e0:	dc000017 	ldw	r16,0(sp)
 20030e4:	dec00204 	addi	sp,sp,8
 20030e8:	f800283a 	ret
 20030ec:	20073a00 	call	20073a0 <__sfvwrite_r>
 20030f0:	1007883a 	mov	r3,r2
 20030f4:	1805883a 	mov	r2,r3
 20030f8:	80000115 	stw	zero,4(r16)
 20030fc:	80000215 	stw	zero,8(r16)
 2003100:	dfc00117 	ldw	ra,4(sp)
 2003104:	dc000017 	ldw	r16,0(sp)
 2003108:	dec00204 	addi	sp,sp,8
 200310c:	f800283a 	ret

02003110 <___vfprintf_internal_r>:
 2003110:	defea404 	addi	sp,sp,-1392
 2003114:	dd815815 	stw	r22,1376(sp)
 2003118:	dc015215 	stw	r16,1352(sp)
 200311c:	d9c15115 	stw	r7,1348(sp)
 2003120:	dfc15b15 	stw	ra,1388(sp)
 2003124:	df015a15 	stw	fp,1384(sp)
 2003128:	ddc15915 	stw	r23,1380(sp)
 200312c:	dd415715 	stw	r21,1372(sp)
 2003130:	dd015615 	stw	r20,1368(sp)
 2003134:	dcc15515 	stw	r19,1364(sp)
 2003138:	dc815415 	stw	r18,1360(sp)
 200313c:	dc415315 	stw	r17,1356(sp)
 2003140:	282d883a 	mov	r22,r5
 2003144:	3021883a 	mov	r16,r6
 2003148:	d9014f15 	stw	r4,1340(sp)
 200314c:	2007aa80 	call	2007aa8 <_localeconv_r>
 2003150:	10800017 	ldw	r2,0(r2)
 2003154:	d9c15117 	ldw	r7,1348(sp)
 2003158:	d8814915 	stw	r2,1316(sp)
 200315c:	d8814f17 	ldw	r2,1340(sp)
 2003160:	10000226 	beq	r2,zero,200316c <___vfprintf_internal_r+0x5c>
 2003164:	10800e17 	ldw	r2,56(r2)
 2003168:	10020d26 	beq	r2,zero,20039a0 <___vfprintf_internal_r+0x890>
 200316c:	b080030b 	ldhu	r2,12(r22)
 2003170:	1080020c 	andi	r2,r2,8
 2003174:	10020e26 	beq	r2,zero,20039b0 <___vfprintf_internal_r+0x8a0>
 2003178:	b0800417 	ldw	r2,16(r22)
 200317c:	10020c26 	beq	r2,zero,20039b0 <___vfprintf_internal_r+0x8a0>
 2003180:	b200030b 	ldhu	r8,12(r22)
 2003184:	00800284 	movi	r2,10
 2003188:	40c0068c 	andi	r3,r8,26
 200318c:	18802f1e 	bne	r3,r2,200324c <___vfprintf_internal_r+0x13c>
 2003190:	b080038f 	ldh	r2,14(r22)
 2003194:	10002d16 	blt	r2,zero,200324c <___vfprintf_internal_r+0x13c>
 2003198:	b240038b 	ldhu	r9,14(r22)
 200319c:	b2800717 	ldw	r10,28(r22)
 20031a0:	b2c00917 	ldw	r11,36(r22)
 20031a4:	d9014f17 	ldw	r4,1340(sp)
 20031a8:	dc402904 	addi	r17,sp,164
 20031ac:	d8804004 	addi	r2,sp,256
 20031b0:	00c10004 	movi	r3,1024
 20031b4:	423fff4c 	andi	r8,r8,65533
 20031b8:	800d883a 	mov	r6,r16
 20031bc:	880b883a 	mov	r5,r17
 20031c0:	da002c0d 	sth	r8,176(sp)
 20031c4:	da402c8d 	sth	r9,178(sp)
 20031c8:	da803015 	stw	r10,192(sp)
 20031cc:	dac03215 	stw	r11,200(sp)
 20031d0:	d8802d15 	stw	r2,180(sp)
 20031d4:	d8c02e15 	stw	r3,184(sp)
 20031d8:	d8802915 	stw	r2,164(sp)
 20031dc:	d8c02b15 	stw	r3,172(sp)
 20031e0:	d8002f15 	stw	zero,188(sp)
 20031e4:	20031100 	call	2003110 <___vfprintf_internal_r>
 20031e8:	d8814b15 	stw	r2,1324(sp)
 20031ec:	10000416 	blt	r2,zero,2003200 <___vfprintf_internal_r+0xf0>
 20031f0:	d9014f17 	ldw	r4,1340(sp)
 20031f4:	880b883a 	mov	r5,r17
 20031f8:	20069d00 	call	20069d0 <_fflush_r>
 20031fc:	1002321e 	bne	r2,zero,2003ac8 <___vfprintf_internal_r+0x9b8>
 2003200:	d8802c0b 	ldhu	r2,176(sp)
 2003204:	1080100c 	andi	r2,r2,64
 2003208:	10000326 	beq	r2,zero,2003218 <___vfprintf_internal_r+0x108>
 200320c:	b080030b 	ldhu	r2,12(r22)
 2003210:	10801014 	ori	r2,r2,64
 2003214:	b080030d 	sth	r2,12(r22)
 2003218:	d8814b17 	ldw	r2,1324(sp)
 200321c:	dfc15b17 	ldw	ra,1388(sp)
 2003220:	df015a17 	ldw	fp,1384(sp)
 2003224:	ddc15917 	ldw	r23,1380(sp)
 2003228:	dd815817 	ldw	r22,1376(sp)
 200322c:	dd415717 	ldw	r21,1372(sp)
 2003230:	dd015617 	ldw	r20,1368(sp)
 2003234:	dcc15517 	ldw	r19,1364(sp)
 2003238:	dc815417 	ldw	r18,1360(sp)
 200323c:	dc415317 	ldw	r17,1356(sp)
 2003240:	dc015217 	ldw	r16,1352(sp)
 2003244:	dec15c04 	addi	sp,sp,1392
 2003248:	f800283a 	ret
 200324c:	0005883a 	mov	r2,zero
 2003250:	0007883a 	mov	r3,zero
 2003254:	dd401904 	addi	r21,sp,100
 2003258:	d8814215 	stw	r2,1288(sp)
 200325c:	802f883a 	mov	r23,r16
 2003260:	d8c14315 	stw	r3,1292(sp)
 2003264:	d8014b15 	stw	zero,1324(sp)
 2003268:	d8014815 	stw	zero,1312(sp)
 200326c:	d8014415 	stw	zero,1296(sp)
 2003270:	d8014715 	stw	zero,1308(sp)
 2003274:	dd400c15 	stw	r21,48(sp)
 2003278:	d8000e15 	stw	zero,56(sp)
 200327c:	d8000d15 	stw	zero,52(sp)
 2003280:	b8800007 	ldb	r2,0(r23)
 2003284:	10001926 	beq	r2,zero,20032ec <___vfprintf_internal_r+0x1dc>
 2003288:	00c00944 	movi	r3,37
 200328c:	10c01726 	beq	r2,r3,20032ec <___vfprintf_internal_r+0x1dc>
 2003290:	b821883a 	mov	r16,r23
 2003294:	00000106 	br	200329c <___vfprintf_internal_r+0x18c>
 2003298:	10c00326 	beq	r2,r3,20032a8 <___vfprintf_internal_r+0x198>
 200329c:	84000044 	addi	r16,r16,1
 20032a0:	80800007 	ldb	r2,0(r16)
 20032a4:	103ffc1e 	bne	r2,zero,2003298 <___vfprintf_internal_r+0x188>
 20032a8:	85e7c83a 	sub	r19,r16,r23
 20032ac:	98000e26 	beq	r19,zero,20032e8 <___vfprintf_internal_r+0x1d8>
 20032b0:	dc800e17 	ldw	r18,56(sp)
 20032b4:	dc400d17 	ldw	r17,52(sp)
 20032b8:	008001c4 	movi	r2,7
 20032bc:	94e5883a 	add	r18,r18,r19
 20032c0:	8c400044 	addi	r17,r17,1
 20032c4:	adc00015 	stw	r23,0(r21)
 20032c8:	dc800e15 	stw	r18,56(sp)
 20032cc:	acc00115 	stw	r19,4(r21)
 20032d0:	dc400d15 	stw	r17,52(sp)
 20032d4:	14428b16 	blt	r2,r17,2003d04 <___vfprintf_internal_r+0xbf4>
 20032d8:	ad400204 	addi	r21,r21,8
 20032dc:	d9014b17 	ldw	r4,1324(sp)
 20032e0:	24c9883a 	add	r4,r4,r19
 20032e4:	d9014b15 	stw	r4,1324(sp)
 20032e8:	802f883a 	mov	r23,r16
 20032ec:	b8800007 	ldb	r2,0(r23)
 20032f0:	10013c26 	beq	r2,zero,20037e4 <___vfprintf_internal_r+0x6d4>
 20032f4:	bdc00044 	addi	r23,r23,1
 20032f8:	d8000405 	stb	zero,16(sp)
 20032fc:	b8c00007 	ldb	r3,0(r23)
 2003300:	04ffffc4 	movi	r19,-1
 2003304:	d8014c15 	stw	zero,1328(sp)
 2003308:	d8014a15 	stw	zero,1320(sp)
 200330c:	d8c14d15 	stw	r3,1332(sp)
 2003310:	bdc00044 	addi	r23,r23,1
 2003314:	d9414d17 	ldw	r5,1332(sp)
 2003318:	00801604 	movi	r2,88
 200331c:	28fff804 	addi	r3,r5,-32
 2003320:	10c06036 	bltu	r2,r3,20034a4 <___vfprintf_internal_r+0x394>
 2003324:	18c5883a 	add	r2,r3,r3
 2003328:	1085883a 	add	r2,r2,r2
 200332c:	00c08034 	movhi	r3,512
 2003330:	18ccd004 	addi	r3,r3,13120
 2003334:	10c5883a 	add	r2,r2,r3
 2003338:	11000017 	ldw	r4,0(r2)
 200333c:	2000683a 	jmp	r4
 2003340:	020042b4 	movhi	r8,266
 2003344:	020034a4 	muli	r8,zero,210
 2003348:	020034a4 	muli	r8,zero,210
 200334c:	020042a0 	cmpeqi	r8,zero,266
 2003350:	020034a4 	muli	r8,zero,210
 2003354:	020034a4 	muli	r8,zero,210
 2003358:	020034a4 	muli	r8,zero,210
 200335c:	020034a4 	muli	r8,zero,210
 2003360:	020034a4 	muli	r8,zero,210
 2003364:	020034a4 	muli	r8,zero,210
 2003368:	02004080 	call	200408 <__alt_mem_sdram_0-0x1dffbf8>
 200336c:	02004290 	cmplti	r8,zero,266
 2003370:	020034a4 	muli	r8,zero,210
 2003374:	02004098 	cmpnei	r8,zero,258
 2003378:	0200432c 	andhi	r8,zero,268
 200337c:	020034a4 	muli	r8,zero,210
 2003380:	02004318 	cmpnei	r8,zero,268
 2003384:	020042e0 	cmpeqi	r8,zero,267
 2003388:	020042e0 	cmpeqi	r8,zero,267
 200338c:	020042e0 	cmpeqi	r8,zero,267
 2003390:	020042e0 	cmpeqi	r8,zero,267
 2003394:	020042e0 	cmpeqi	r8,zero,267
 2003398:	020042e0 	cmpeqi	r8,zero,267
 200339c:	020042e0 	cmpeqi	r8,zero,267
 20033a0:	020042e0 	cmpeqi	r8,zero,267
 20033a4:	020042e0 	cmpeqi	r8,zero,267
 20033a8:	020034a4 	muli	r8,zero,210
 20033ac:	020034a4 	muli	r8,zero,210
 20033b0:	020034a4 	muli	r8,zero,210
 20033b4:	020034a4 	muli	r8,zero,210
 20033b8:	020034a4 	muli	r8,zero,210
 20033bc:	020034a4 	muli	r8,zero,210
 20033c0:	020034a4 	muli	r8,zero,210
 20033c4:	020034a4 	muli	r8,zero,210
 20033c8:	020034a4 	muli	r8,zero,210
 20033cc:	020034a4 	muli	r8,zero,210
 20033d0:	02003afc 	xorhi	r8,zero,235
 20033d4:	02004168 	cmpgeui	r8,zero,261
 20033d8:	020034a4 	muli	r8,zero,210
 20033dc:	02004168 	cmpgeui	r8,zero,261
 20033e0:	020034a4 	muli	r8,zero,210
 20033e4:	020034a4 	muli	r8,zero,210
 20033e8:	020034a4 	muli	r8,zero,210
 20033ec:	020034a4 	muli	r8,zero,210
 20033f0:	020042cc 	andi	r8,zero,267
 20033f4:	020034a4 	muli	r8,zero,210
 20033f8:	020034a4 	muli	r8,zero,210
 20033fc:	02003bb0 	cmpltui	r8,zero,238
 2003400:	020034a4 	muli	r8,zero,210
 2003404:	020034a4 	muli	r8,zero,210
 2003408:	020034a4 	muli	r8,zero,210
 200340c:	020034a4 	muli	r8,zero,210
 2003410:	020034a4 	muli	r8,zero,210
 2003414:	02003bfc 	xorhi	r8,zero,239
 2003418:	020034a4 	muli	r8,zero,210
 200341c:	020034a4 	muli	r8,zero,210
 2003420:	0200421c 	xori	r8,zero,264
 2003424:	020034a4 	muli	r8,zero,210
 2003428:	020034a4 	muli	r8,zero,210
 200342c:	020034a4 	muli	r8,zero,210
 2003430:	020034a4 	muli	r8,zero,210
 2003434:	020034a4 	muli	r8,zero,210
 2003438:	020034a4 	muli	r8,zero,210
 200343c:	020034a4 	muli	r8,zero,210
 2003440:	020034a4 	muli	r8,zero,210
 2003444:	020034a4 	muli	r8,zero,210
 2003448:	020034a4 	muli	r8,zero,210
 200344c:	020041f0 	cmpltui	r8,zero,263
 2003450:	02003b08 	cmpgei	r8,zero,236
 2003454:	02004168 	cmpgeui	r8,zero,261
 2003458:	02004168 	cmpgeui	r8,zero,261
 200345c:	02004168 	cmpgeui	r8,zero,261
 2003460:	02004154 	movui	r8,261
 2003464:	02003b08 	cmpgei	r8,zero,236
 2003468:	020034a4 	muli	r8,zero,210
 200346c:	020034a4 	muli	r8,zero,210
 2003470:	020040dc 	xori	r8,zero,259
 2003474:	020034a4 	muli	r8,zero,210
 2003478:	020040ac 	andhi	r8,zero,258
 200347c:	02003bbc 	xorhi	r8,zero,238
 2003480:	0200410c 	andi	r8,zero,260
 2003484:	020040f8 	rdprs	r8,zero,259
 2003488:	020034a4 	muli	r8,zero,210
 200348c:	02004388 	cmpgei	r8,zero,270
 2003490:	020034a4 	muli	r8,zero,210
 2003494:	02003c08 	cmpgei	r8,zero,240
 2003498:	020034a4 	muli	r8,zero,210
 200349c:	020034a4 	muli	r8,zero,210
 20034a0:	02004280 	call	200428 <__alt_mem_sdram_0-0x1dffbd8>
 20034a4:	d9014d17 	ldw	r4,1332(sp)
 20034a8:	2000ce26 	beq	r4,zero,20037e4 <___vfprintf_internal_r+0x6d4>
 20034ac:	01400044 	movi	r5,1
 20034b0:	d9800f04 	addi	r6,sp,60
 20034b4:	d9c14015 	stw	r7,1280(sp)
 20034b8:	d9414515 	stw	r5,1300(sp)
 20034bc:	d9814115 	stw	r6,1284(sp)
 20034c0:	280f883a 	mov	r7,r5
 20034c4:	d9000f05 	stb	r4,60(sp)
 20034c8:	d8000405 	stb	zero,16(sp)
 20034cc:	d8014615 	stw	zero,1304(sp)
 20034d0:	d8c14c17 	ldw	r3,1328(sp)
 20034d4:	1880008c 	andi	r2,r3,2
 20034d8:	1005003a 	cmpeq	r2,r2,zero
 20034dc:	d8815015 	stw	r2,1344(sp)
 20034e0:	1000031e 	bne	r2,zero,20034f0 <___vfprintf_internal_r+0x3e0>
 20034e4:	d9014517 	ldw	r4,1300(sp)
 20034e8:	21000084 	addi	r4,r4,2
 20034ec:	d9014515 	stw	r4,1300(sp)
 20034f0:	d9414c17 	ldw	r5,1328(sp)
 20034f4:	2940210c 	andi	r5,r5,132
 20034f8:	d9414e15 	stw	r5,1336(sp)
 20034fc:	28002d1e 	bne	r5,zero,20035b4 <___vfprintf_internal_r+0x4a4>
 2003500:	d9814a17 	ldw	r6,1320(sp)
 2003504:	d8814517 	ldw	r2,1300(sp)
 2003508:	30a1c83a 	sub	r16,r6,r2
 200350c:	0400290e 	bge	zero,r16,20035b4 <___vfprintf_internal_r+0x4a4>
 2003510:	00800404 	movi	r2,16
 2003514:	1404580e 	bge	r2,r16,2004678 <___vfprintf_internal_r+0x1568>
 2003518:	dc800e17 	ldw	r18,56(sp)
 200351c:	dc400d17 	ldw	r17,52(sp)
 2003520:	1027883a 	mov	r19,r2
 2003524:	07008074 	movhi	fp,513
 2003528:	e73d2684 	addi	fp,fp,-2918
 200352c:	050001c4 	movi	r20,7
 2003530:	00000306 	br	2003540 <___vfprintf_internal_r+0x430>
 2003534:	843ffc04 	addi	r16,r16,-16
 2003538:	ad400204 	addi	r21,r21,8
 200353c:	9c00130e 	bge	r19,r16,200358c <___vfprintf_internal_r+0x47c>
 2003540:	94800404 	addi	r18,r18,16
 2003544:	8c400044 	addi	r17,r17,1
 2003548:	af000015 	stw	fp,0(r21)
 200354c:	acc00115 	stw	r19,4(r21)
 2003550:	dc800e15 	stw	r18,56(sp)
 2003554:	dc400d15 	stw	r17,52(sp)
 2003558:	a47ff60e 	bge	r20,r17,2003534 <___vfprintf_internal_r+0x424>
 200355c:	d9014f17 	ldw	r4,1340(sp)
 2003560:	b00b883a 	mov	r5,r22
 2003564:	d9800c04 	addi	r6,sp,48
 2003568:	d9c15115 	stw	r7,1348(sp)
 200356c:	20030b80 	call	20030b8 <__sprint_r>
 2003570:	d9c15117 	ldw	r7,1348(sp)
 2003574:	10009e1e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003578:	843ffc04 	addi	r16,r16,-16
 200357c:	dc800e17 	ldw	r18,56(sp)
 2003580:	dc400d17 	ldw	r17,52(sp)
 2003584:	dd401904 	addi	r21,sp,100
 2003588:	9c3fed16 	blt	r19,r16,2003540 <___vfprintf_internal_r+0x430>
 200358c:	9425883a 	add	r18,r18,r16
 2003590:	8c400044 	addi	r17,r17,1
 2003594:	008001c4 	movi	r2,7
 2003598:	af000015 	stw	fp,0(r21)
 200359c:	ac000115 	stw	r16,4(r21)
 20035a0:	dc800e15 	stw	r18,56(sp)
 20035a4:	dc400d15 	stw	r17,52(sp)
 20035a8:	1441f516 	blt	r2,r17,2003d80 <___vfprintf_internal_r+0xc70>
 20035ac:	ad400204 	addi	r21,r21,8
 20035b0:	00000206 	br	20035bc <___vfprintf_internal_r+0x4ac>
 20035b4:	dc800e17 	ldw	r18,56(sp)
 20035b8:	dc400d17 	ldw	r17,52(sp)
 20035bc:	d8800407 	ldb	r2,16(sp)
 20035c0:	10000b26 	beq	r2,zero,20035f0 <___vfprintf_internal_r+0x4e0>
 20035c4:	00800044 	movi	r2,1
 20035c8:	94800044 	addi	r18,r18,1
 20035cc:	8c400044 	addi	r17,r17,1
 20035d0:	a8800115 	stw	r2,4(r21)
 20035d4:	d8c00404 	addi	r3,sp,16
 20035d8:	008001c4 	movi	r2,7
 20035dc:	a8c00015 	stw	r3,0(r21)
 20035e0:	dc800e15 	stw	r18,56(sp)
 20035e4:	dc400d15 	stw	r17,52(sp)
 20035e8:	1441da16 	blt	r2,r17,2003d54 <___vfprintf_internal_r+0xc44>
 20035ec:	ad400204 	addi	r21,r21,8
 20035f0:	d9015017 	ldw	r4,1344(sp)
 20035f4:	20000b1e 	bne	r4,zero,2003624 <___vfprintf_internal_r+0x514>
 20035f8:	d8800444 	addi	r2,sp,17
 20035fc:	94800084 	addi	r18,r18,2
 2003600:	8c400044 	addi	r17,r17,1
 2003604:	a8800015 	stw	r2,0(r21)
 2003608:	00c00084 	movi	r3,2
 200360c:	008001c4 	movi	r2,7
 2003610:	a8c00115 	stw	r3,4(r21)
 2003614:	dc800e15 	stw	r18,56(sp)
 2003618:	dc400d15 	stw	r17,52(sp)
 200361c:	1441c216 	blt	r2,r17,2003d28 <___vfprintf_internal_r+0xc18>
 2003620:	ad400204 	addi	r21,r21,8
 2003624:	d9414e17 	ldw	r5,1336(sp)
 2003628:	00802004 	movi	r2,128
 200362c:	2880b126 	beq	r5,r2,20038f4 <___vfprintf_internal_r+0x7e4>
 2003630:	d8c14617 	ldw	r3,1304(sp)
 2003634:	19e1c83a 	sub	r16,r3,r7
 2003638:	0400260e 	bge	zero,r16,20036d4 <___vfprintf_internal_r+0x5c4>
 200363c:	00800404 	movi	r2,16
 2003640:	1403c90e 	bge	r2,r16,2004568 <___vfprintf_internal_r+0x1458>
 2003644:	1027883a 	mov	r19,r2
 2003648:	07008074 	movhi	fp,513
 200364c:	e73d2284 	addi	fp,fp,-2934
 2003650:	050001c4 	movi	r20,7
 2003654:	00000306 	br	2003664 <___vfprintf_internal_r+0x554>
 2003658:	843ffc04 	addi	r16,r16,-16
 200365c:	ad400204 	addi	r21,r21,8
 2003660:	9c00130e 	bge	r19,r16,20036b0 <___vfprintf_internal_r+0x5a0>
 2003664:	94800404 	addi	r18,r18,16
 2003668:	8c400044 	addi	r17,r17,1
 200366c:	af000015 	stw	fp,0(r21)
 2003670:	acc00115 	stw	r19,4(r21)
 2003674:	dc800e15 	stw	r18,56(sp)
 2003678:	dc400d15 	stw	r17,52(sp)
 200367c:	a47ff60e 	bge	r20,r17,2003658 <___vfprintf_internal_r+0x548>
 2003680:	d9014f17 	ldw	r4,1340(sp)
 2003684:	b00b883a 	mov	r5,r22
 2003688:	d9800c04 	addi	r6,sp,48
 200368c:	d9c15115 	stw	r7,1348(sp)
 2003690:	20030b80 	call	20030b8 <__sprint_r>
 2003694:	d9c15117 	ldw	r7,1348(sp)
 2003698:	1000551e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 200369c:	843ffc04 	addi	r16,r16,-16
 20036a0:	dc800e17 	ldw	r18,56(sp)
 20036a4:	dc400d17 	ldw	r17,52(sp)
 20036a8:	dd401904 	addi	r21,sp,100
 20036ac:	9c3fed16 	blt	r19,r16,2003664 <___vfprintf_internal_r+0x554>
 20036b0:	9425883a 	add	r18,r18,r16
 20036b4:	8c400044 	addi	r17,r17,1
 20036b8:	008001c4 	movi	r2,7
 20036bc:	af000015 	stw	fp,0(r21)
 20036c0:	ac000115 	stw	r16,4(r21)
 20036c4:	dc800e15 	stw	r18,56(sp)
 20036c8:	dc400d15 	stw	r17,52(sp)
 20036cc:	14418216 	blt	r2,r17,2003cd8 <___vfprintf_internal_r+0xbc8>
 20036d0:	ad400204 	addi	r21,r21,8
 20036d4:	d9014c17 	ldw	r4,1328(sp)
 20036d8:	2080400c 	andi	r2,r4,256
 20036dc:	10004a1e 	bne	r2,zero,2003808 <___vfprintf_internal_r+0x6f8>
 20036e0:	d9414117 	ldw	r5,1284(sp)
 20036e4:	91e5883a 	add	r18,r18,r7
 20036e8:	8c400044 	addi	r17,r17,1
 20036ec:	008001c4 	movi	r2,7
 20036f0:	a9400015 	stw	r5,0(r21)
 20036f4:	a9c00115 	stw	r7,4(r21)
 20036f8:	dc800e15 	stw	r18,56(sp)
 20036fc:	dc400d15 	stw	r17,52(sp)
 2003700:	14416716 	blt	r2,r17,2003ca0 <___vfprintf_internal_r+0xb90>
 2003704:	a8c00204 	addi	r3,r21,8
 2003708:	d9814c17 	ldw	r6,1328(sp)
 200370c:	3080010c 	andi	r2,r6,4
 2003710:	10002826 	beq	r2,zero,20037b4 <___vfprintf_internal_r+0x6a4>
 2003714:	d8814a17 	ldw	r2,1320(sp)
 2003718:	d9014517 	ldw	r4,1300(sp)
 200371c:	1121c83a 	sub	r16,r2,r4
 2003720:	0400240e 	bge	zero,r16,20037b4 <___vfprintf_internal_r+0x6a4>
 2003724:	00800404 	movi	r2,16
 2003728:	14044f0e 	bge	r2,r16,2004868 <___vfprintf_internal_r+0x1758>
 200372c:	dc400d17 	ldw	r17,52(sp)
 2003730:	1027883a 	mov	r19,r2
 2003734:	07008074 	movhi	fp,513
 2003738:	e73d2684 	addi	fp,fp,-2918
 200373c:	050001c4 	movi	r20,7
 2003740:	00000306 	br	2003750 <___vfprintf_internal_r+0x640>
 2003744:	843ffc04 	addi	r16,r16,-16
 2003748:	18c00204 	addi	r3,r3,8
 200374c:	9c00110e 	bge	r19,r16,2003794 <___vfprintf_internal_r+0x684>
 2003750:	94800404 	addi	r18,r18,16
 2003754:	8c400044 	addi	r17,r17,1
 2003758:	1f000015 	stw	fp,0(r3)
 200375c:	1cc00115 	stw	r19,4(r3)
 2003760:	dc800e15 	stw	r18,56(sp)
 2003764:	dc400d15 	stw	r17,52(sp)
 2003768:	a47ff60e 	bge	r20,r17,2003744 <___vfprintf_internal_r+0x634>
 200376c:	d9014f17 	ldw	r4,1340(sp)
 2003770:	b00b883a 	mov	r5,r22
 2003774:	d9800c04 	addi	r6,sp,48
 2003778:	20030b80 	call	20030b8 <__sprint_r>
 200377c:	10001c1e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003780:	843ffc04 	addi	r16,r16,-16
 2003784:	dc800e17 	ldw	r18,56(sp)
 2003788:	dc400d17 	ldw	r17,52(sp)
 200378c:	d8c01904 	addi	r3,sp,100
 2003790:	9c3fef16 	blt	r19,r16,2003750 <___vfprintf_internal_r+0x640>
 2003794:	9425883a 	add	r18,r18,r16
 2003798:	8c400044 	addi	r17,r17,1
 200379c:	008001c4 	movi	r2,7
 20037a0:	1f000015 	stw	fp,0(r3)
 20037a4:	1c000115 	stw	r16,4(r3)
 20037a8:	dc800e15 	stw	r18,56(sp)
 20037ac:	dc400d15 	stw	r17,52(sp)
 20037b0:	1440cb16 	blt	r2,r17,2003ae0 <___vfprintf_internal_r+0x9d0>
 20037b4:	d8814a17 	ldw	r2,1320(sp)
 20037b8:	d9414517 	ldw	r5,1300(sp)
 20037bc:	1140010e 	bge	r2,r5,20037c4 <___vfprintf_internal_r+0x6b4>
 20037c0:	2805883a 	mov	r2,r5
 20037c4:	d9814b17 	ldw	r6,1324(sp)
 20037c8:	308d883a 	add	r6,r6,r2
 20037cc:	d9814b15 	stw	r6,1324(sp)
 20037d0:	90013b1e 	bne	r18,zero,2003cc0 <___vfprintf_internal_r+0xbb0>
 20037d4:	d9c14017 	ldw	r7,1280(sp)
 20037d8:	dd401904 	addi	r21,sp,100
 20037dc:	d8000d15 	stw	zero,52(sp)
 20037e0:	003ea706 	br	2003280 <___vfprintf_internal_r+0x170>
 20037e4:	d8800e17 	ldw	r2,56(sp)
 20037e8:	10053f1e 	bne	r2,zero,2004ce8 <___vfprintf_internal_r+0x1bd8>
 20037ec:	d8000d15 	stw	zero,52(sp)
 20037f0:	b080030b 	ldhu	r2,12(r22)
 20037f4:	1080100c 	andi	r2,r2,64
 20037f8:	103e8726 	beq	r2,zero,2003218 <___vfprintf_internal_r+0x108>
 20037fc:	00bfffc4 	movi	r2,-1
 2003800:	d8814b15 	stw	r2,1324(sp)
 2003804:	003e8406 	br	2003218 <___vfprintf_internal_r+0x108>
 2003808:	d9814d17 	ldw	r6,1332(sp)
 200380c:	00801944 	movi	r2,101
 2003810:	11806e16 	blt	r2,r6,20039cc <___vfprintf_internal_r+0x8bc>
 2003814:	d9414717 	ldw	r5,1308(sp)
 2003818:	00c00044 	movi	r3,1
 200381c:	1943430e 	bge	r3,r5,200452c <___vfprintf_internal_r+0x141c>
 2003820:	d8814117 	ldw	r2,1284(sp)
 2003824:	94800044 	addi	r18,r18,1
 2003828:	8c400044 	addi	r17,r17,1
 200382c:	a8800015 	stw	r2,0(r21)
 2003830:	008001c4 	movi	r2,7
 2003834:	a8c00115 	stw	r3,4(r21)
 2003838:	dc800e15 	stw	r18,56(sp)
 200383c:	dc400d15 	stw	r17,52(sp)
 2003840:	1441ca16 	blt	r2,r17,2003f6c <___vfprintf_internal_r+0xe5c>
 2003844:	a8c00204 	addi	r3,r21,8
 2003848:	d9014917 	ldw	r4,1316(sp)
 200384c:	00800044 	movi	r2,1
 2003850:	94800044 	addi	r18,r18,1
 2003854:	8c400044 	addi	r17,r17,1
 2003858:	18800115 	stw	r2,4(r3)
 200385c:	008001c4 	movi	r2,7
 2003860:	19000015 	stw	r4,0(r3)
 2003864:	dc800e15 	stw	r18,56(sp)
 2003868:	dc400d15 	stw	r17,52(sp)
 200386c:	1441b616 	blt	r2,r17,2003f48 <___vfprintf_internal_r+0xe38>
 2003870:	1cc00204 	addi	r19,r3,8
 2003874:	d9014217 	ldw	r4,1288(sp)
 2003878:	d9414317 	ldw	r5,1292(sp)
 200387c:	000d883a 	mov	r6,zero
 2003880:	000f883a 	mov	r7,zero
 2003884:	200af700 	call	200af70 <__nedf2>
 2003888:	10017426 	beq	r2,zero,2003e5c <___vfprintf_internal_r+0xd4c>
 200388c:	d9414717 	ldw	r5,1308(sp)
 2003890:	d9814117 	ldw	r6,1284(sp)
 2003894:	8c400044 	addi	r17,r17,1
 2003898:	2c85883a 	add	r2,r5,r18
 200389c:	14bfffc4 	addi	r18,r2,-1
 20038a0:	28bfffc4 	addi	r2,r5,-1
 20038a4:	30c00044 	addi	r3,r6,1
 20038a8:	98800115 	stw	r2,4(r19)
 20038ac:	008001c4 	movi	r2,7
 20038b0:	98c00015 	stw	r3,0(r19)
 20038b4:	dc800e15 	stw	r18,56(sp)
 20038b8:	dc400d15 	stw	r17,52(sp)
 20038bc:	14418e16 	blt	r2,r17,2003ef8 <___vfprintf_internal_r+0xde8>
 20038c0:	9cc00204 	addi	r19,r19,8
 20038c4:	d9414817 	ldw	r5,1312(sp)
 20038c8:	d8800804 	addi	r2,sp,32
 20038cc:	8c400044 	addi	r17,r17,1
 20038d0:	9165883a 	add	r18,r18,r5
 20038d4:	98800015 	stw	r2,0(r19)
 20038d8:	008001c4 	movi	r2,7
 20038dc:	99400115 	stw	r5,4(r19)
 20038e0:	dc800e15 	stw	r18,56(sp)
 20038e4:	dc400d15 	stw	r17,52(sp)
 20038e8:	1440ed16 	blt	r2,r17,2003ca0 <___vfprintf_internal_r+0xb90>
 20038ec:	98c00204 	addi	r3,r19,8
 20038f0:	003f8506 	br	2003708 <___vfprintf_internal_r+0x5f8>
 20038f4:	d9814a17 	ldw	r6,1320(sp)
 20038f8:	d8814517 	ldw	r2,1300(sp)
 20038fc:	30a1c83a 	sub	r16,r6,r2
 2003900:	043f4b0e 	bge	zero,r16,2003630 <___vfprintf_internal_r+0x520>
 2003904:	00800404 	movi	r2,16
 2003908:	1404340e 	bge	r2,r16,20049dc <___vfprintf_internal_r+0x18cc>
 200390c:	1027883a 	mov	r19,r2
 2003910:	07008074 	movhi	fp,513
 2003914:	e73d2284 	addi	fp,fp,-2934
 2003918:	050001c4 	movi	r20,7
 200391c:	00000306 	br	200392c <___vfprintf_internal_r+0x81c>
 2003920:	843ffc04 	addi	r16,r16,-16
 2003924:	ad400204 	addi	r21,r21,8
 2003928:	9c00130e 	bge	r19,r16,2003978 <___vfprintf_internal_r+0x868>
 200392c:	94800404 	addi	r18,r18,16
 2003930:	8c400044 	addi	r17,r17,1
 2003934:	af000015 	stw	fp,0(r21)
 2003938:	acc00115 	stw	r19,4(r21)
 200393c:	dc800e15 	stw	r18,56(sp)
 2003940:	dc400d15 	stw	r17,52(sp)
 2003944:	a47ff60e 	bge	r20,r17,2003920 <___vfprintf_internal_r+0x810>
 2003948:	d9014f17 	ldw	r4,1340(sp)
 200394c:	b00b883a 	mov	r5,r22
 2003950:	d9800c04 	addi	r6,sp,48
 2003954:	d9c15115 	stw	r7,1348(sp)
 2003958:	20030b80 	call	20030b8 <__sprint_r>
 200395c:	d9c15117 	ldw	r7,1348(sp)
 2003960:	103fa31e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003964:	843ffc04 	addi	r16,r16,-16
 2003968:	dc800e17 	ldw	r18,56(sp)
 200396c:	dc400d17 	ldw	r17,52(sp)
 2003970:	dd401904 	addi	r21,sp,100
 2003974:	9c3fed16 	blt	r19,r16,200392c <___vfprintf_internal_r+0x81c>
 2003978:	9425883a 	add	r18,r18,r16
 200397c:	8c400044 	addi	r17,r17,1
 2003980:	008001c4 	movi	r2,7
 2003984:	af000015 	stw	fp,0(r21)
 2003988:	ac000115 	stw	r16,4(r21)
 200398c:	dc800e15 	stw	r18,56(sp)
 2003990:	dc400d15 	stw	r17,52(sp)
 2003994:	14416116 	blt	r2,r17,2003f1c <___vfprintf_internal_r+0xe0c>
 2003998:	ad400204 	addi	r21,r21,8
 200399c:	003f2406 	br	2003630 <___vfprintf_internal_r+0x520>
 20039a0:	d9014f17 	ldw	r4,1340(sp)
 20039a4:	2006c680 	call	2006c68 <__sinit>
 20039a8:	d9c15117 	ldw	r7,1348(sp)
 20039ac:	003def06 	br	200316c <___vfprintf_internal_r+0x5c>
 20039b0:	d9014f17 	ldw	r4,1340(sp)
 20039b4:	b00b883a 	mov	r5,r22
 20039b8:	d9c15115 	stw	r7,1348(sp)
 20039bc:	20050580 	call	2005058 <__swsetup_r>
 20039c0:	d9c15117 	ldw	r7,1348(sp)
 20039c4:	103dee26 	beq	r2,zero,2003180 <___vfprintf_internal_r+0x70>
 20039c8:	003f8c06 	br	20037fc <___vfprintf_internal_r+0x6ec>
 20039cc:	d9014217 	ldw	r4,1288(sp)
 20039d0:	d9414317 	ldw	r5,1292(sp)
 20039d4:	000d883a 	mov	r6,zero
 20039d8:	000f883a 	mov	r7,zero
 20039dc:	200aee80 	call	200aee8 <__eqdf2>
 20039e0:	1000f21e 	bne	r2,zero,2003dac <___vfprintf_internal_r+0xc9c>
 20039e4:	00808074 	movhi	r2,513
 20039e8:	10bd2204 	addi	r2,r2,-2936
 20039ec:	94800044 	addi	r18,r18,1
 20039f0:	8c400044 	addi	r17,r17,1
 20039f4:	a8800015 	stw	r2,0(r21)
 20039f8:	00c00044 	movi	r3,1
 20039fc:	008001c4 	movi	r2,7
 2003a00:	a8c00115 	stw	r3,4(r21)
 2003a04:	dc800e15 	stw	r18,56(sp)
 2003a08:	dc400d15 	stw	r17,52(sp)
 2003a0c:	1442fa16 	blt	r2,r17,20045f8 <___vfprintf_internal_r+0x14e8>
 2003a10:	a8c00204 	addi	r3,r21,8
 2003a14:	d8800517 	ldw	r2,20(sp)
 2003a18:	d9014717 	ldw	r4,1308(sp)
 2003a1c:	11015c0e 	bge	r2,r4,2003f90 <___vfprintf_internal_r+0xe80>
 2003a20:	dc400d17 	ldw	r17,52(sp)
 2003a24:	d9814917 	ldw	r6,1316(sp)
 2003a28:	00800044 	movi	r2,1
 2003a2c:	94800044 	addi	r18,r18,1
 2003a30:	8c400044 	addi	r17,r17,1
 2003a34:	18800115 	stw	r2,4(r3)
 2003a38:	008001c4 	movi	r2,7
 2003a3c:	19800015 	stw	r6,0(r3)
 2003a40:	dc800e15 	stw	r18,56(sp)
 2003a44:	dc400d15 	stw	r17,52(sp)
 2003a48:	14431016 	blt	r2,r17,200468c <___vfprintf_internal_r+0x157c>
 2003a4c:	18c00204 	addi	r3,r3,8
 2003a50:	d8814717 	ldw	r2,1308(sp)
 2003a54:	143fffc4 	addi	r16,r2,-1
 2003a58:	043f2b0e 	bge	zero,r16,2003708 <___vfprintf_internal_r+0x5f8>
 2003a5c:	00800404 	movi	r2,16
 2003a60:	1402a20e 	bge	r2,r16,20044ec <___vfprintf_internal_r+0x13dc>
 2003a64:	dc400d17 	ldw	r17,52(sp)
 2003a68:	1027883a 	mov	r19,r2
 2003a6c:	07008074 	movhi	fp,513
 2003a70:	e73d2284 	addi	fp,fp,-2934
 2003a74:	050001c4 	movi	r20,7
 2003a78:	00000306 	br	2003a88 <___vfprintf_internal_r+0x978>
 2003a7c:	18c00204 	addi	r3,r3,8
 2003a80:	843ffc04 	addi	r16,r16,-16
 2003a84:	9c029c0e 	bge	r19,r16,20044f8 <___vfprintf_internal_r+0x13e8>
 2003a88:	94800404 	addi	r18,r18,16
 2003a8c:	8c400044 	addi	r17,r17,1
 2003a90:	1f000015 	stw	fp,0(r3)
 2003a94:	1cc00115 	stw	r19,4(r3)
 2003a98:	dc800e15 	stw	r18,56(sp)
 2003a9c:	dc400d15 	stw	r17,52(sp)
 2003aa0:	a47ff60e 	bge	r20,r17,2003a7c <___vfprintf_internal_r+0x96c>
 2003aa4:	d9014f17 	ldw	r4,1340(sp)
 2003aa8:	b00b883a 	mov	r5,r22
 2003aac:	d9800c04 	addi	r6,sp,48
 2003ab0:	20030b80 	call	20030b8 <__sprint_r>
 2003ab4:	103f4e1e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003ab8:	dc800e17 	ldw	r18,56(sp)
 2003abc:	dc400d17 	ldw	r17,52(sp)
 2003ac0:	d8c01904 	addi	r3,sp,100
 2003ac4:	003fee06 	br	2003a80 <___vfprintf_internal_r+0x970>
 2003ac8:	d8802c0b 	ldhu	r2,176(sp)
 2003acc:	00ffffc4 	movi	r3,-1
 2003ad0:	d8c14b15 	stw	r3,1324(sp)
 2003ad4:	1080100c 	andi	r2,r2,64
 2003ad8:	103dcc1e 	bne	r2,zero,200320c <___vfprintf_internal_r+0xfc>
 2003adc:	003dce06 	br	2003218 <___vfprintf_internal_r+0x108>
 2003ae0:	d9014f17 	ldw	r4,1340(sp)
 2003ae4:	b00b883a 	mov	r5,r22
 2003ae8:	d9800c04 	addi	r6,sp,48
 2003aec:	20030b80 	call	20030b8 <__sprint_r>
 2003af0:	103f3f1e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003af4:	dc800e17 	ldw	r18,56(sp)
 2003af8:	003f2e06 	br	20037b4 <___vfprintf_internal_r+0x6a4>
 2003afc:	d9414c17 	ldw	r5,1328(sp)
 2003b00:	29400414 	ori	r5,r5,16
 2003b04:	d9414c15 	stw	r5,1328(sp)
 2003b08:	d9814c17 	ldw	r6,1328(sp)
 2003b0c:	3080080c 	andi	r2,r6,32
 2003b10:	10014f1e 	bne	r2,zero,2004050 <___vfprintf_internal_r+0xf40>
 2003b14:	d8c14c17 	ldw	r3,1328(sp)
 2003b18:	1880040c 	andi	r2,r3,16
 2003b1c:	1002ea1e 	bne	r2,zero,20046c8 <___vfprintf_internal_r+0x15b8>
 2003b20:	d9014c17 	ldw	r4,1328(sp)
 2003b24:	2080100c 	andi	r2,r4,64
 2003b28:	1002e726 	beq	r2,zero,20046c8 <___vfprintf_internal_r+0x15b8>
 2003b2c:	3880000f 	ldh	r2,0(r7)
 2003b30:	39c00104 	addi	r7,r7,4
 2003b34:	d9c14015 	stw	r7,1280(sp)
 2003b38:	1023d7fa 	srai	r17,r2,31
 2003b3c:	1021883a 	mov	r16,r2
 2003b40:	88037216 	blt	r17,zero,200490c <___vfprintf_internal_r+0x17fc>
 2003b44:	01000044 	movi	r4,1
 2003b48:	98000416 	blt	r19,zero,2003b5c <___vfprintf_internal_r+0xa4c>
 2003b4c:	d8c14c17 	ldw	r3,1328(sp)
 2003b50:	00bfdfc4 	movi	r2,-129
 2003b54:	1886703a 	and	r3,r3,r2
 2003b58:	d8c14c15 	stw	r3,1328(sp)
 2003b5c:	8444b03a 	or	r2,r16,r17
 2003b60:	1002261e 	bne	r2,zero,20043fc <___vfprintf_internal_r+0x12ec>
 2003b64:	9802251e 	bne	r19,zero,20043fc <___vfprintf_internal_r+0x12ec>
 2003b68:	20803fcc 	andi	r2,r4,255
 2003b6c:	10029b26 	beq	r2,zero,20045dc <___vfprintf_internal_r+0x14cc>
 2003b70:	d8c01904 	addi	r3,sp,100
 2003b74:	dd000f04 	addi	r20,sp,60
 2003b78:	d8c14115 	stw	r3,1284(sp)
 2003b7c:	d8c14117 	ldw	r3,1284(sp)
 2003b80:	dcc14515 	stw	r19,1300(sp)
 2003b84:	a0c5c83a 	sub	r2,r20,r3
 2003b88:	11c00a04 	addi	r7,r2,40
 2003b8c:	99c0010e 	bge	r19,r7,2003b94 <___vfprintf_internal_r+0xa84>
 2003b90:	d9c14515 	stw	r7,1300(sp)
 2003b94:	dcc14615 	stw	r19,1304(sp)
 2003b98:	d8800407 	ldb	r2,16(sp)
 2003b9c:	103e4c26 	beq	r2,zero,20034d0 <___vfprintf_internal_r+0x3c0>
 2003ba0:	d8814517 	ldw	r2,1300(sp)
 2003ba4:	10800044 	addi	r2,r2,1
 2003ba8:	d8814515 	stw	r2,1300(sp)
 2003bac:	003e4806 	br	20034d0 <___vfprintf_internal_r+0x3c0>
 2003bb0:	d9814c17 	ldw	r6,1328(sp)
 2003bb4:	31800414 	ori	r6,r6,16
 2003bb8:	d9814c15 	stw	r6,1328(sp)
 2003bbc:	d8c14c17 	ldw	r3,1328(sp)
 2003bc0:	1880080c 	andi	r2,r3,32
 2003bc4:	1001271e 	bne	r2,zero,2004064 <___vfprintf_internal_r+0xf54>
 2003bc8:	d9414c17 	ldw	r5,1328(sp)
 2003bcc:	2880040c 	andi	r2,r5,16
 2003bd0:	1002b61e 	bne	r2,zero,20046ac <___vfprintf_internal_r+0x159c>
 2003bd4:	d9814c17 	ldw	r6,1328(sp)
 2003bd8:	3080100c 	andi	r2,r6,64
 2003bdc:	1002b326 	beq	r2,zero,20046ac <___vfprintf_internal_r+0x159c>
 2003be0:	3c00000b 	ldhu	r16,0(r7)
 2003be4:	0009883a 	mov	r4,zero
 2003be8:	39c00104 	addi	r7,r7,4
 2003bec:	0023883a 	mov	r17,zero
 2003bf0:	d9c14015 	stw	r7,1280(sp)
 2003bf4:	d8000405 	stb	zero,16(sp)
 2003bf8:	003fd306 	br	2003b48 <___vfprintf_internal_r+0xa38>
 2003bfc:	d9014c17 	ldw	r4,1328(sp)
 2003c00:	21000414 	ori	r4,r4,16
 2003c04:	d9014c15 	stw	r4,1328(sp)
 2003c08:	d9414c17 	ldw	r5,1328(sp)
 2003c0c:	2880080c 	andi	r2,r5,32
 2003c10:	1001081e 	bne	r2,zero,2004034 <___vfprintf_internal_r+0xf24>
 2003c14:	d8c14c17 	ldw	r3,1328(sp)
 2003c18:	1880040c 	andi	r2,r3,16
 2003c1c:	1002b01e 	bne	r2,zero,20046e0 <___vfprintf_internal_r+0x15d0>
 2003c20:	d9014c17 	ldw	r4,1328(sp)
 2003c24:	2080100c 	andi	r2,r4,64
 2003c28:	1002ad26 	beq	r2,zero,20046e0 <___vfprintf_internal_r+0x15d0>
 2003c2c:	3c00000b 	ldhu	r16,0(r7)
 2003c30:	01000044 	movi	r4,1
 2003c34:	39c00104 	addi	r7,r7,4
 2003c38:	0023883a 	mov	r17,zero
 2003c3c:	d9c14015 	stw	r7,1280(sp)
 2003c40:	d8000405 	stb	zero,16(sp)
 2003c44:	003fc006 	br	2003b48 <___vfprintf_internal_r+0xa38>
 2003c48:	d9014f17 	ldw	r4,1340(sp)
 2003c4c:	b00b883a 	mov	r5,r22
 2003c50:	d9800c04 	addi	r6,sp,48
 2003c54:	20030b80 	call	20030b8 <__sprint_r>
 2003c58:	103ee51e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003c5c:	dc800e17 	ldw	r18,56(sp)
 2003c60:	d8c01904 	addi	r3,sp,100
 2003c64:	d9814c17 	ldw	r6,1328(sp)
 2003c68:	3080004c 	andi	r2,r6,1
 2003c6c:	1005003a 	cmpeq	r2,r2,zero
 2003c70:	103ea51e 	bne	r2,zero,2003708 <___vfprintf_internal_r+0x5f8>
 2003c74:	00800044 	movi	r2,1
 2003c78:	dc400d17 	ldw	r17,52(sp)
 2003c7c:	18800115 	stw	r2,4(r3)
 2003c80:	d8814917 	ldw	r2,1316(sp)
 2003c84:	94800044 	addi	r18,r18,1
 2003c88:	8c400044 	addi	r17,r17,1
 2003c8c:	18800015 	stw	r2,0(r3)
 2003c90:	008001c4 	movi	r2,7
 2003c94:	dc800e15 	stw	r18,56(sp)
 2003c98:	dc400d15 	stw	r17,52(sp)
 2003c9c:	14421e0e 	bge	r2,r17,2004518 <___vfprintf_internal_r+0x1408>
 2003ca0:	d9014f17 	ldw	r4,1340(sp)
 2003ca4:	b00b883a 	mov	r5,r22
 2003ca8:	d9800c04 	addi	r6,sp,48
 2003cac:	20030b80 	call	20030b8 <__sprint_r>
 2003cb0:	103ecf1e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003cb4:	dc800e17 	ldw	r18,56(sp)
 2003cb8:	d8c01904 	addi	r3,sp,100
 2003cbc:	003e9206 	br	2003708 <___vfprintf_internal_r+0x5f8>
 2003cc0:	d9014f17 	ldw	r4,1340(sp)
 2003cc4:	b00b883a 	mov	r5,r22
 2003cc8:	d9800c04 	addi	r6,sp,48
 2003ccc:	20030b80 	call	20030b8 <__sprint_r>
 2003cd0:	103ec026 	beq	r2,zero,20037d4 <___vfprintf_internal_r+0x6c4>
 2003cd4:	003ec606 	br	20037f0 <___vfprintf_internal_r+0x6e0>
 2003cd8:	d9014f17 	ldw	r4,1340(sp)
 2003cdc:	b00b883a 	mov	r5,r22
 2003ce0:	d9800c04 	addi	r6,sp,48
 2003ce4:	d9c15115 	stw	r7,1348(sp)
 2003ce8:	20030b80 	call	20030b8 <__sprint_r>
 2003cec:	d9c15117 	ldw	r7,1348(sp)
 2003cf0:	103ebf1e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003cf4:	dc800e17 	ldw	r18,56(sp)
 2003cf8:	dc400d17 	ldw	r17,52(sp)
 2003cfc:	dd401904 	addi	r21,sp,100
 2003d00:	003e7406 	br	20036d4 <___vfprintf_internal_r+0x5c4>
 2003d04:	d9014f17 	ldw	r4,1340(sp)
 2003d08:	b00b883a 	mov	r5,r22
 2003d0c:	d9800c04 	addi	r6,sp,48
 2003d10:	d9c15115 	stw	r7,1348(sp)
 2003d14:	20030b80 	call	20030b8 <__sprint_r>
 2003d18:	d9c15117 	ldw	r7,1348(sp)
 2003d1c:	103eb41e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003d20:	dd401904 	addi	r21,sp,100
 2003d24:	003d6d06 	br	20032dc <___vfprintf_internal_r+0x1cc>
 2003d28:	d9014f17 	ldw	r4,1340(sp)
 2003d2c:	b00b883a 	mov	r5,r22
 2003d30:	d9800c04 	addi	r6,sp,48
 2003d34:	d9c15115 	stw	r7,1348(sp)
 2003d38:	20030b80 	call	20030b8 <__sprint_r>
 2003d3c:	d9c15117 	ldw	r7,1348(sp)
 2003d40:	103eab1e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003d44:	dc800e17 	ldw	r18,56(sp)
 2003d48:	dc400d17 	ldw	r17,52(sp)
 2003d4c:	dd401904 	addi	r21,sp,100
 2003d50:	003e3406 	br	2003624 <___vfprintf_internal_r+0x514>
 2003d54:	d9014f17 	ldw	r4,1340(sp)
 2003d58:	b00b883a 	mov	r5,r22
 2003d5c:	d9800c04 	addi	r6,sp,48
 2003d60:	d9c15115 	stw	r7,1348(sp)
 2003d64:	20030b80 	call	20030b8 <__sprint_r>
 2003d68:	d9c15117 	ldw	r7,1348(sp)
 2003d6c:	103ea01e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003d70:	dc800e17 	ldw	r18,56(sp)
 2003d74:	dc400d17 	ldw	r17,52(sp)
 2003d78:	dd401904 	addi	r21,sp,100
 2003d7c:	003e1c06 	br	20035f0 <___vfprintf_internal_r+0x4e0>
 2003d80:	d9014f17 	ldw	r4,1340(sp)
 2003d84:	b00b883a 	mov	r5,r22
 2003d88:	d9800c04 	addi	r6,sp,48
 2003d8c:	d9c15115 	stw	r7,1348(sp)
 2003d90:	20030b80 	call	20030b8 <__sprint_r>
 2003d94:	d9c15117 	ldw	r7,1348(sp)
 2003d98:	103e951e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003d9c:	dc800e17 	ldw	r18,56(sp)
 2003da0:	dc400d17 	ldw	r17,52(sp)
 2003da4:	dd401904 	addi	r21,sp,100
 2003da8:	003e0406 	br	20035bc <___vfprintf_internal_r+0x4ac>
 2003dac:	d9000517 	ldw	r4,20(sp)
 2003db0:	0102520e 	bge	zero,r4,20046fc <___vfprintf_internal_r+0x15ec>
 2003db4:	d9814717 	ldw	r6,1308(sp)
 2003db8:	21807a16 	blt	r4,r6,2003fa4 <___vfprintf_internal_r+0xe94>
 2003dbc:	d8814117 	ldw	r2,1284(sp)
 2003dc0:	91a5883a 	add	r18,r18,r6
 2003dc4:	8c400044 	addi	r17,r17,1
 2003dc8:	a8800015 	stw	r2,0(r21)
 2003dcc:	008001c4 	movi	r2,7
 2003dd0:	a9800115 	stw	r6,4(r21)
 2003dd4:	dc800e15 	stw	r18,56(sp)
 2003dd8:	dc400d15 	stw	r17,52(sp)
 2003ddc:	1442f616 	blt	r2,r17,20049b8 <___vfprintf_internal_r+0x18a8>
 2003de0:	a8c00204 	addi	r3,r21,8
 2003de4:	d9414717 	ldw	r5,1308(sp)
 2003de8:	2161c83a 	sub	r16,r4,r5
 2003dec:	043f9d0e 	bge	zero,r16,2003c64 <___vfprintf_internal_r+0xb54>
 2003df0:	00800404 	movi	r2,16
 2003df4:	1402130e 	bge	r2,r16,2004644 <___vfprintf_internal_r+0x1534>
 2003df8:	dc400d17 	ldw	r17,52(sp)
 2003dfc:	1027883a 	mov	r19,r2
 2003e00:	07008074 	movhi	fp,513
 2003e04:	e73d2284 	addi	fp,fp,-2934
 2003e08:	050001c4 	movi	r20,7
 2003e0c:	00000306 	br	2003e1c <___vfprintf_internal_r+0xd0c>
 2003e10:	18c00204 	addi	r3,r3,8
 2003e14:	843ffc04 	addi	r16,r16,-16
 2003e18:	9c020d0e 	bge	r19,r16,2004650 <___vfprintf_internal_r+0x1540>
 2003e1c:	94800404 	addi	r18,r18,16
 2003e20:	8c400044 	addi	r17,r17,1
 2003e24:	1f000015 	stw	fp,0(r3)
 2003e28:	1cc00115 	stw	r19,4(r3)
 2003e2c:	dc800e15 	stw	r18,56(sp)
 2003e30:	dc400d15 	stw	r17,52(sp)
 2003e34:	a47ff60e 	bge	r20,r17,2003e10 <___vfprintf_internal_r+0xd00>
 2003e38:	d9014f17 	ldw	r4,1340(sp)
 2003e3c:	b00b883a 	mov	r5,r22
 2003e40:	d9800c04 	addi	r6,sp,48
 2003e44:	20030b80 	call	20030b8 <__sprint_r>
 2003e48:	103e691e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003e4c:	dc800e17 	ldw	r18,56(sp)
 2003e50:	dc400d17 	ldw	r17,52(sp)
 2003e54:	d8c01904 	addi	r3,sp,100
 2003e58:	003fee06 	br	2003e14 <___vfprintf_internal_r+0xd04>
 2003e5c:	d8814717 	ldw	r2,1308(sp)
 2003e60:	143fffc4 	addi	r16,r2,-1
 2003e64:	043e970e 	bge	zero,r16,20038c4 <___vfprintf_internal_r+0x7b4>
 2003e68:	00800404 	movi	r2,16
 2003e6c:	1400180e 	bge	r2,r16,2003ed0 <___vfprintf_internal_r+0xdc0>
 2003e70:	1029883a 	mov	r20,r2
 2003e74:	07008074 	movhi	fp,513
 2003e78:	e73d2284 	addi	fp,fp,-2934
 2003e7c:	054001c4 	movi	r21,7
 2003e80:	00000306 	br	2003e90 <___vfprintf_internal_r+0xd80>
 2003e84:	9cc00204 	addi	r19,r19,8
 2003e88:	843ffc04 	addi	r16,r16,-16
 2003e8c:	a400120e 	bge	r20,r16,2003ed8 <___vfprintf_internal_r+0xdc8>
 2003e90:	94800404 	addi	r18,r18,16
 2003e94:	8c400044 	addi	r17,r17,1
 2003e98:	9f000015 	stw	fp,0(r19)
 2003e9c:	9d000115 	stw	r20,4(r19)
 2003ea0:	dc800e15 	stw	r18,56(sp)
 2003ea4:	dc400d15 	stw	r17,52(sp)
 2003ea8:	ac7ff60e 	bge	r21,r17,2003e84 <___vfprintf_internal_r+0xd74>
 2003eac:	d9014f17 	ldw	r4,1340(sp)
 2003eb0:	b00b883a 	mov	r5,r22
 2003eb4:	d9800c04 	addi	r6,sp,48
 2003eb8:	20030b80 	call	20030b8 <__sprint_r>
 2003ebc:	103e4c1e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003ec0:	dc800e17 	ldw	r18,56(sp)
 2003ec4:	dc400d17 	ldw	r17,52(sp)
 2003ec8:	dcc01904 	addi	r19,sp,100
 2003ecc:	003fee06 	br	2003e88 <___vfprintf_internal_r+0xd78>
 2003ed0:	07008074 	movhi	fp,513
 2003ed4:	e73d2284 	addi	fp,fp,-2934
 2003ed8:	9425883a 	add	r18,r18,r16
 2003edc:	8c400044 	addi	r17,r17,1
 2003ee0:	008001c4 	movi	r2,7
 2003ee4:	9f000015 	stw	fp,0(r19)
 2003ee8:	9c000115 	stw	r16,4(r19)
 2003eec:	dc800e15 	stw	r18,56(sp)
 2003ef0:	dc400d15 	stw	r17,52(sp)
 2003ef4:	147e720e 	bge	r2,r17,20038c0 <___vfprintf_internal_r+0x7b0>
 2003ef8:	d9014f17 	ldw	r4,1340(sp)
 2003efc:	b00b883a 	mov	r5,r22
 2003f00:	d9800c04 	addi	r6,sp,48
 2003f04:	20030b80 	call	20030b8 <__sprint_r>
 2003f08:	103e391e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003f0c:	dc800e17 	ldw	r18,56(sp)
 2003f10:	dc400d17 	ldw	r17,52(sp)
 2003f14:	dcc01904 	addi	r19,sp,100
 2003f18:	003e6a06 	br	20038c4 <___vfprintf_internal_r+0x7b4>
 2003f1c:	d9014f17 	ldw	r4,1340(sp)
 2003f20:	b00b883a 	mov	r5,r22
 2003f24:	d9800c04 	addi	r6,sp,48
 2003f28:	d9c15115 	stw	r7,1348(sp)
 2003f2c:	20030b80 	call	20030b8 <__sprint_r>
 2003f30:	d9c15117 	ldw	r7,1348(sp)
 2003f34:	103e2e1e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003f38:	dc800e17 	ldw	r18,56(sp)
 2003f3c:	dc400d17 	ldw	r17,52(sp)
 2003f40:	dd401904 	addi	r21,sp,100
 2003f44:	003dba06 	br	2003630 <___vfprintf_internal_r+0x520>
 2003f48:	d9014f17 	ldw	r4,1340(sp)
 2003f4c:	b00b883a 	mov	r5,r22
 2003f50:	d9800c04 	addi	r6,sp,48
 2003f54:	20030b80 	call	20030b8 <__sprint_r>
 2003f58:	103e251e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003f5c:	dc800e17 	ldw	r18,56(sp)
 2003f60:	dc400d17 	ldw	r17,52(sp)
 2003f64:	dcc01904 	addi	r19,sp,100
 2003f68:	003e4206 	br	2003874 <___vfprintf_internal_r+0x764>
 2003f6c:	d9014f17 	ldw	r4,1340(sp)
 2003f70:	b00b883a 	mov	r5,r22
 2003f74:	d9800c04 	addi	r6,sp,48
 2003f78:	20030b80 	call	20030b8 <__sprint_r>
 2003f7c:	103e1c1e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2003f80:	dc800e17 	ldw	r18,56(sp)
 2003f84:	dc400d17 	ldw	r17,52(sp)
 2003f88:	d8c01904 	addi	r3,sp,100
 2003f8c:	003e2e06 	br	2003848 <___vfprintf_internal_r+0x738>
 2003f90:	d9414c17 	ldw	r5,1328(sp)
 2003f94:	2880004c 	andi	r2,r5,1
 2003f98:	1005003a 	cmpeq	r2,r2,zero
 2003f9c:	103dda1e 	bne	r2,zero,2003708 <___vfprintf_internal_r+0x5f8>
 2003fa0:	003e9f06 	br	2003a20 <___vfprintf_internal_r+0x910>
 2003fa4:	d8c14117 	ldw	r3,1284(sp)
 2003fa8:	9125883a 	add	r18,r18,r4
 2003fac:	8c400044 	addi	r17,r17,1
 2003fb0:	008001c4 	movi	r2,7
 2003fb4:	a8c00015 	stw	r3,0(r21)
 2003fb8:	a9000115 	stw	r4,4(r21)
 2003fbc:	dc800e15 	stw	r18,56(sp)
 2003fc0:	dc400d15 	stw	r17,52(sp)
 2003fc4:	14426616 	blt	r2,r17,2004960 <___vfprintf_internal_r+0x1850>
 2003fc8:	a8c00204 	addi	r3,r21,8
 2003fcc:	d9414917 	ldw	r5,1316(sp)
 2003fd0:	00800044 	movi	r2,1
 2003fd4:	94800044 	addi	r18,r18,1
 2003fd8:	8c400044 	addi	r17,r17,1
 2003fdc:	18800115 	stw	r2,4(r3)
 2003fe0:	008001c4 	movi	r2,7
 2003fe4:	19400015 	stw	r5,0(r3)
 2003fe8:	dc800e15 	stw	r18,56(sp)
 2003fec:	dc400d15 	stw	r17,52(sp)
 2003ff0:	2021883a 	mov	r16,r4
 2003ff4:	14425016 	blt	r2,r17,2004938 <___vfprintf_internal_r+0x1828>
 2003ff8:	19400204 	addi	r5,r3,8
 2003ffc:	d9814717 	ldw	r6,1308(sp)
 2004000:	8c400044 	addi	r17,r17,1
 2004004:	dc400d15 	stw	r17,52(sp)
 2004008:	3107c83a 	sub	r3,r6,r4
 200400c:	d9014117 	ldw	r4,1284(sp)
 2004010:	90e5883a 	add	r18,r18,r3
 2004014:	28c00115 	stw	r3,4(r5)
 2004018:	8105883a 	add	r2,r16,r4
 200401c:	28800015 	stw	r2,0(r5)
 2004020:	008001c4 	movi	r2,7
 2004024:	dc800e15 	stw	r18,56(sp)
 2004028:	147f1d16 	blt	r2,r17,2003ca0 <___vfprintf_internal_r+0xb90>
 200402c:	28c00204 	addi	r3,r5,8
 2004030:	003db506 	br	2003708 <___vfprintf_internal_r+0x5f8>
 2004034:	3c000017 	ldw	r16,0(r7)
 2004038:	3c400117 	ldw	r17,4(r7)
 200403c:	39800204 	addi	r6,r7,8
 2004040:	01000044 	movi	r4,1
 2004044:	d9814015 	stw	r6,1280(sp)
 2004048:	d8000405 	stb	zero,16(sp)
 200404c:	003ebe06 	br	2003b48 <___vfprintf_internal_r+0xa38>
 2004050:	3c000017 	ldw	r16,0(r7)
 2004054:	3c400117 	ldw	r17,4(r7)
 2004058:	38800204 	addi	r2,r7,8
 200405c:	d8814015 	stw	r2,1280(sp)
 2004060:	003eb706 	br	2003b40 <___vfprintf_internal_r+0xa30>
 2004064:	3c000017 	ldw	r16,0(r7)
 2004068:	3c400117 	ldw	r17,4(r7)
 200406c:	39000204 	addi	r4,r7,8
 2004070:	d9014015 	stw	r4,1280(sp)
 2004074:	0009883a 	mov	r4,zero
 2004078:	d8000405 	stb	zero,16(sp)
 200407c:	003eb206 	br	2003b48 <___vfprintf_internal_r+0xa38>
 2004080:	38c00017 	ldw	r3,0(r7)
 2004084:	39c00104 	addi	r7,r7,4
 2004088:	d8c14a15 	stw	r3,1320(sp)
 200408c:	1800d10e 	bge	r3,zero,20043d4 <___vfprintf_internal_r+0x12c4>
 2004090:	00c7c83a 	sub	r3,zero,r3
 2004094:	d8c14a15 	stw	r3,1320(sp)
 2004098:	d9014c17 	ldw	r4,1328(sp)
 200409c:	b8c00007 	ldb	r3,0(r23)
 20040a0:	21000114 	ori	r4,r4,4
 20040a4:	d9014c15 	stw	r4,1328(sp)
 20040a8:	003c9806 	br	200330c <___vfprintf_internal_r+0x1fc>
 20040ac:	d9814c17 	ldw	r6,1328(sp)
 20040b0:	3080080c 	andi	r2,r6,32
 20040b4:	1001f026 	beq	r2,zero,2004878 <___vfprintf_internal_r+0x1768>
 20040b8:	d9014b17 	ldw	r4,1324(sp)
 20040bc:	38800017 	ldw	r2,0(r7)
 20040c0:	39c00104 	addi	r7,r7,4
 20040c4:	d9c14015 	stw	r7,1280(sp)
 20040c8:	2007d7fa 	srai	r3,r4,31
 20040cc:	d9c14017 	ldw	r7,1280(sp)
 20040d0:	11000015 	stw	r4,0(r2)
 20040d4:	10c00115 	stw	r3,4(r2)
 20040d8:	003c6906 	br	2003280 <___vfprintf_internal_r+0x170>
 20040dc:	b8c00007 	ldb	r3,0(r23)
 20040e0:	00801b04 	movi	r2,108
 20040e4:	18824f26 	beq	r3,r2,2004a24 <___vfprintf_internal_r+0x1914>
 20040e8:	d9414c17 	ldw	r5,1328(sp)
 20040ec:	29400414 	ori	r5,r5,16
 20040f0:	d9414c15 	stw	r5,1328(sp)
 20040f4:	003c8506 	br	200330c <___vfprintf_internal_r+0x1fc>
 20040f8:	d9814c17 	ldw	r6,1328(sp)
 20040fc:	b8c00007 	ldb	r3,0(r23)
 2004100:	31800814 	ori	r6,r6,32
 2004104:	d9814c15 	stw	r6,1328(sp)
 2004108:	003c8006 	br	200330c <___vfprintf_internal_r+0x1fc>
 200410c:	d8814c17 	ldw	r2,1328(sp)
 2004110:	3c000017 	ldw	r16,0(r7)
 2004114:	00c01e04 	movi	r3,120
 2004118:	10800094 	ori	r2,r2,2
 200411c:	d8814c15 	stw	r2,1328(sp)
 2004120:	39c00104 	addi	r7,r7,4
 2004124:	01408074 	movhi	r5,513
 2004128:	297d0b04 	addi	r5,r5,-3028
 200412c:	00800c04 	movi	r2,48
 2004130:	0023883a 	mov	r17,zero
 2004134:	01000084 	movi	r4,2
 2004138:	d9c14015 	stw	r7,1280(sp)
 200413c:	d8c14d15 	stw	r3,1332(sp)
 2004140:	d9414415 	stw	r5,1296(sp)
 2004144:	d8800445 	stb	r2,17(sp)
 2004148:	d8c00485 	stb	r3,18(sp)
 200414c:	d8000405 	stb	zero,16(sp)
 2004150:	003e7d06 	br	2003b48 <___vfprintf_internal_r+0xa38>
 2004154:	d8814c17 	ldw	r2,1328(sp)
 2004158:	b8c00007 	ldb	r3,0(r23)
 200415c:	10801014 	ori	r2,r2,64
 2004160:	d8814c15 	stw	r2,1328(sp)
 2004164:	003c6906 	br	200330c <___vfprintf_internal_r+0x1fc>
 2004168:	d9414c17 	ldw	r5,1328(sp)
 200416c:	2880020c 	andi	r2,r5,8
 2004170:	1001df26 	beq	r2,zero,20048f0 <___vfprintf_internal_r+0x17e0>
 2004174:	39800017 	ldw	r6,0(r7)
 2004178:	38800204 	addi	r2,r7,8
 200417c:	d8814015 	stw	r2,1280(sp)
 2004180:	d9814215 	stw	r6,1288(sp)
 2004184:	39c00117 	ldw	r7,4(r7)
 2004188:	d9c14315 	stw	r7,1292(sp)
 200418c:	d9014217 	ldw	r4,1288(sp)
 2004190:	d9414317 	ldw	r5,1292(sp)
 2004194:	20095380 	call	2009538 <__isinfd>
 2004198:	10021726 	beq	r2,zero,20049f8 <___vfprintf_internal_r+0x18e8>
 200419c:	d9014217 	ldw	r4,1288(sp)
 20041a0:	d9414317 	ldw	r5,1292(sp)
 20041a4:	000d883a 	mov	r6,zero
 20041a8:	000f883a 	mov	r7,zero
 20041ac:	2000f180 	call	2000f18 <__ltdf2>
 20041b0:	1002ca16 	blt	r2,zero,2004cdc <___vfprintf_internal_r+0x1bcc>
 20041b4:	d9414d17 	ldw	r5,1332(sp)
 20041b8:	008011c4 	movi	r2,71
 20041bc:	11420a16 	blt	r2,r5,20049e8 <___vfprintf_internal_r+0x18d8>
 20041c0:	01808074 	movhi	r6,513
 20041c4:	31bd1004 	addi	r6,r6,-3008
 20041c8:	d9814115 	stw	r6,1284(sp)
 20041cc:	d9014c17 	ldw	r4,1328(sp)
 20041d0:	00c000c4 	movi	r3,3
 20041d4:	00bfdfc4 	movi	r2,-129
 20041d8:	2088703a 	and	r4,r4,r2
 20041dc:	180f883a 	mov	r7,r3
 20041e0:	d8c14515 	stw	r3,1300(sp)
 20041e4:	d9014c15 	stw	r4,1328(sp)
 20041e8:	d8014615 	stw	zero,1304(sp)
 20041ec:	003e6a06 	br	2003b98 <___vfprintf_internal_r+0xa88>
 20041f0:	38800017 	ldw	r2,0(r7)
 20041f4:	00c00044 	movi	r3,1
 20041f8:	39c00104 	addi	r7,r7,4
 20041fc:	d9c14015 	stw	r7,1280(sp)
 2004200:	d9000f04 	addi	r4,sp,60
 2004204:	180f883a 	mov	r7,r3
 2004208:	d8c14515 	stw	r3,1300(sp)
 200420c:	d9014115 	stw	r4,1284(sp)
 2004210:	d8800f05 	stb	r2,60(sp)
 2004214:	d8000405 	stb	zero,16(sp)
 2004218:	003cac06 	br	20034cc <___vfprintf_internal_r+0x3bc>
 200421c:	01408074 	movhi	r5,513
 2004220:	297d1604 	addi	r5,r5,-2984
 2004224:	d9414415 	stw	r5,1296(sp)
 2004228:	d9814c17 	ldw	r6,1328(sp)
 200422c:	3080080c 	andi	r2,r6,32
 2004230:	1000f926 	beq	r2,zero,2004618 <___vfprintf_internal_r+0x1508>
 2004234:	3c000017 	ldw	r16,0(r7)
 2004238:	3c400117 	ldw	r17,4(r7)
 200423c:	38800204 	addi	r2,r7,8
 2004240:	d8814015 	stw	r2,1280(sp)
 2004244:	d9414c17 	ldw	r5,1328(sp)
 2004248:	2880004c 	andi	r2,r5,1
 200424c:	1005003a 	cmpeq	r2,r2,zero
 2004250:	1000b31e 	bne	r2,zero,2004520 <___vfprintf_internal_r+0x1410>
 2004254:	8444b03a 	or	r2,r16,r17
 2004258:	1000b126 	beq	r2,zero,2004520 <___vfprintf_internal_r+0x1410>
 200425c:	d9814d17 	ldw	r6,1332(sp)
 2004260:	29400094 	ori	r5,r5,2
 2004264:	00800c04 	movi	r2,48
 2004268:	01000084 	movi	r4,2
 200426c:	d9414c15 	stw	r5,1328(sp)
 2004270:	d8800445 	stb	r2,17(sp)
 2004274:	d9800485 	stb	r6,18(sp)
 2004278:	d8000405 	stb	zero,16(sp)
 200427c:	003e3206 	br	2003b48 <___vfprintf_internal_r+0xa38>
 2004280:	01808074 	movhi	r6,513
 2004284:	31bd0b04 	addi	r6,r6,-3028
 2004288:	d9814415 	stw	r6,1296(sp)
 200428c:	003fe606 	br	2004228 <___vfprintf_internal_r+0x1118>
 2004290:	00800ac4 	movi	r2,43
 2004294:	d8800405 	stb	r2,16(sp)
 2004298:	b8c00007 	ldb	r3,0(r23)
 200429c:	003c1b06 	br	200330c <___vfprintf_internal_r+0x1fc>
 20042a0:	d8814c17 	ldw	r2,1328(sp)
 20042a4:	b8c00007 	ldb	r3,0(r23)
 20042a8:	10800054 	ori	r2,r2,1
 20042ac:	d8814c15 	stw	r2,1328(sp)
 20042b0:	003c1606 	br	200330c <___vfprintf_internal_r+0x1fc>
 20042b4:	d8800407 	ldb	r2,16(sp)
 20042b8:	1000461e 	bne	r2,zero,20043d4 <___vfprintf_internal_r+0x12c4>
 20042bc:	00800804 	movi	r2,32
 20042c0:	d8800405 	stb	r2,16(sp)
 20042c4:	b8c00007 	ldb	r3,0(r23)
 20042c8:	003c1006 	br	200330c <___vfprintf_internal_r+0x1fc>
 20042cc:	d9814c17 	ldw	r6,1328(sp)
 20042d0:	b8c00007 	ldb	r3,0(r23)
 20042d4:	31800214 	ori	r6,r6,8
 20042d8:	d9814c15 	stw	r6,1328(sp)
 20042dc:	003c0b06 	br	200330c <___vfprintf_internal_r+0x1fc>
 20042e0:	0007883a 	mov	r3,zero
 20042e4:	01000244 	movi	r4,9
 20042e8:	188002a4 	muli	r2,r3,10
 20042ec:	b8c00007 	ldb	r3,0(r23)
 20042f0:	d9814d17 	ldw	r6,1332(sp)
 20042f4:	bdc00044 	addi	r23,r23,1
 20042f8:	d8c14d15 	stw	r3,1332(sp)
 20042fc:	d9414d17 	ldw	r5,1332(sp)
 2004300:	3085883a 	add	r2,r6,r2
 2004304:	10fff404 	addi	r3,r2,-48
 2004308:	28bff404 	addi	r2,r5,-48
 200430c:	20bff62e 	bgeu	r4,r2,20042e8 <___vfprintf_internal_r+0x11d8>
 2004310:	d8c14a15 	stw	r3,1320(sp)
 2004314:	003bff06 	br	2003314 <___vfprintf_internal_r+0x204>
 2004318:	d9414c17 	ldw	r5,1328(sp)
 200431c:	b8c00007 	ldb	r3,0(r23)
 2004320:	29402014 	ori	r5,r5,128
 2004324:	d9414c15 	stw	r5,1328(sp)
 2004328:	003bf806 	br	200330c <___vfprintf_internal_r+0x1fc>
 200432c:	b8c00007 	ldb	r3,0(r23)
 2004330:	00800a84 	movi	r2,42
 2004334:	bdc00044 	addi	r23,r23,1
 2004338:	18831526 	beq	r3,r2,2004f90 <___vfprintf_internal_r+0x1e80>
 200433c:	d8c14d15 	stw	r3,1332(sp)
 2004340:	18bff404 	addi	r2,r3,-48
 2004344:	00c00244 	movi	r3,9
 2004348:	18827836 	bltu	r3,r2,2004d2c <___vfprintf_internal_r+0x1c1c>
 200434c:	000d883a 	mov	r6,zero
 2004350:	308002a4 	muli	r2,r6,10
 2004354:	b9800007 	ldb	r6,0(r23)
 2004358:	d9414d17 	ldw	r5,1332(sp)
 200435c:	bdc00044 	addi	r23,r23,1
 2004360:	d9814d15 	stw	r6,1332(sp)
 2004364:	d9014d17 	ldw	r4,1332(sp)
 2004368:	1145883a 	add	r2,r2,r5
 200436c:	11bff404 	addi	r6,r2,-48
 2004370:	20bff404 	addi	r2,r4,-48
 2004374:	18bff62e 	bgeu	r3,r2,2004350 <___vfprintf_internal_r+0x1240>
 2004378:	3027883a 	mov	r19,r6
 200437c:	303be50e 	bge	r6,zero,2003314 <___vfprintf_internal_r+0x204>
 2004380:	04ffffc4 	movi	r19,-1
 2004384:	003be306 	br	2003314 <___vfprintf_internal_r+0x204>
 2004388:	d8000405 	stb	zero,16(sp)
 200438c:	39800017 	ldw	r6,0(r7)
 2004390:	39c00104 	addi	r7,r7,4
 2004394:	d9c14015 	stw	r7,1280(sp)
 2004398:	d9814115 	stw	r6,1284(sp)
 200439c:	3001c926 	beq	r6,zero,2004ac4 <___vfprintf_internal_r+0x19b4>
 20043a0:	98000e16 	blt	r19,zero,20043dc <___vfprintf_internal_r+0x12cc>
 20043a4:	d9014117 	ldw	r4,1284(sp)
 20043a8:	000b883a 	mov	r5,zero
 20043ac:	980d883a 	mov	r6,r19
 20043b0:	2007bdc0 	call	2007bdc <memchr>
 20043b4:	10025926 	beq	r2,zero,2004d1c <___vfprintf_internal_r+0x1c0c>
 20043b8:	d8c14117 	ldw	r3,1284(sp)
 20043bc:	10cfc83a 	sub	r7,r2,r3
 20043c0:	99c19e16 	blt	r19,r7,2004a3c <___vfprintf_internal_r+0x192c>
 20043c4:	d9c14515 	stw	r7,1300(sp)
 20043c8:	38000916 	blt	r7,zero,20043f0 <___vfprintf_internal_r+0x12e0>
 20043cc:	d8014615 	stw	zero,1304(sp)
 20043d0:	003df106 	br	2003b98 <___vfprintf_internal_r+0xa88>
 20043d4:	b8c00007 	ldb	r3,0(r23)
 20043d8:	003bcc06 	br	200330c <___vfprintf_internal_r+0x1fc>
 20043dc:	d9014117 	ldw	r4,1284(sp)
 20043e0:	2002fe80 	call	2002fe8 <strlen>
 20043e4:	d8814515 	stw	r2,1300(sp)
 20043e8:	100f883a 	mov	r7,r2
 20043ec:	103ff70e 	bge	r2,zero,20043cc <___vfprintf_internal_r+0x12bc>
 20043f0:	d8014515 	stw	zero,1300(sp)
 20043f4:	d8014615 	stw	zero,1304(sp)
 20043f8:	003de706 	br	2003b98 <___vfprintf_internal_r+0xa88>
 20043fc:	20c03fcc 	andi	r3,r4,255
 2004400:	00800044 	movi	r2,1
 2004404:	18802d26 	beq	r3,r2,20044bc <___vfprintf_internal_r+0x13ac>
 2004408:	18800e36 	bltu	r3,r2,2004444 <___vfprintf_internal_r+0x1334>
 200440c:	00800084 	movi	r2,2
 2004410:	1880fa26 	beq	r3,r2,20047fc <___vfprintf_internal_r+0x16ec>
 2004414:	01008074 	movhi	r4,513
 2004418:	213d1b04 	addi	r4,r4,-2964
 200441c:	2002fe80 	call	2002fe8 <strlen>
 2004420:	100f883a 	mov	r7,r2
 2004424:	dcc14515 	stw	r19,1300(sp)
 2004428:	9880010e 	bge	r19,r2,2004430 <___vfprintf_internal_r+0x1320>
 200442c:	d8814515 	stw	r2,1300(sp)
 2004430:	00808074 	movhi	r2,513
 2004434:	10bd1b04 	addi	r2,r2,-2964
 2004438:	dcc14615 	stw	r19,1304(sp)
 200443c:	d8814115 	stw	r2,1284(sp)
 2004440:	003dd506 	br	2003b98 <___vfprintf_internal_r+0xa88>
 2004444:	d9401904 	addi	r5,sp,100
 2004448:	dd000f04 	addi	r20,sp,60
 200444c:	d9414115 	stw	r5,1284(sp)
 2004450:	880a977a 	slli	r5,r17,29
 2004454:	d9814117 	ldw	r6,1284(sp)
 2004458:	8004d0fa 	srli	r2,r16,3
 200445c:	8806d0fa 	srli	r3,r17,3
 2004460:	810001cc 	andi	r4,r16,7
 2004464:	2884b03a 	or	r2,r5,r2
 2004468:	31bfffc4 	addi	r6,r6,-1
 200446c:	21000c04 	addi	r4,r4,48
 2004470:	d9814115 	stw	r6,1284(sp)
 2004474:	10cab03a 	or	r5,r2,r3
 2004478:	31000005 	stb	r4,0(r6)
 200447c:	1021883a 	mov	r16,r2
 2004480:	1823883a 	mov	r17,r3
 2004484:	283ff21e 	bne	r5,zero,2004450 <___vfprintf_internal_r+0x1340>
 2004488:	d8c14c17 	ldw	r3,1328(sp)
 200448c:	1880004c 	andi	r2,r3,1
 2004490:	1005003a 	cmpeq	r2,r2,zero
 2004494:	103db91e 	bne	r2,zero,2003b7c <___vfprintf_internal_r+0xa6c>
 2004498:	20803fcc 	andi	r2,r4,255
 200449c:	1080201c 	xori	r2,r2,128
 20044a0:	10bfe004 	addi	r2,r2,-128
 20044a4:	00c00c04 	movi	r3,48
 20044a8:	10fdb426 	beq	r2,r3,2003b7c <___vfprintf_internal_r+0xa6c>
 20044ac:	31bfffc4 	addi	r6,r6,-1
 20044b0:	d9814115 	stw	r6,1284(sp)
 20044b4:	30c00005 	stb	r3,0(r6)
 20044b8:	003db006 	br	2003b7c <___vfprintf_internal_r+0xa6c>
 20044bc:	88800068 	cmpgeui	r2,r17,1
 20044c0:	10002c1e 	bne	r2,zero,2004574 <___vfprintf_internal_r+0x1464>
 20044c4:	8800021e 	bne	r17,zero,20044d0 <___vfprintf_internal_r+0x13c0>
 20044c8:	00800244 	movi	r2,9
 20044cc:	14002936 	bltu	r2,r16,2004574 <___vfprintf_internal_r+0x1464>
 20044d0:	d90018c4 	addi	r4,sp,99
 20044d4:	dd000f04 	addi	r20,sp,60
 20044d8:	d9014115 	stw	r4,1284(sp)
 20044dc:	d9014117 	ldw	r4,1284(sp)
 20044e0:	80800c04 	addi	r2,r16,48
 20044e4:	20800005 	stb	r2,0(r4)
 20044e8:	003da406 	br	2003b7c <___vfprintf_internal_r+0xa6c>
 20044ec:	dc400d17 	ldw	r17,52(sp)
 20044f0:	07008074 	movhi	fp,513
 20044f4:	e73d2284 	addi	fp,fp,-2934
 20044f8:	9425883a 	add	r18,r18,r16
 20044fc:	8c400044 	addi	r17,r17,1
 2004500:	008001c4 	movi	r2,7
 2004504:	1f000015 	stw	fp,0(r3)
 2004508:	1c000115 	stw	r16,4(r3)
 200450c:	dc800e15 	stw	r18,56(sp)
 2004510:	dc400d15 	stw	r17,52(sp)
 2004514:	147de216 	blt	r2,r17,2003ca0 <___vfprintf_internal_r+0xb90>
 2004518:	18c00204 	addi	r3,r3,8
 200451c:	003c7a06 	br	2003708 <___vfprintf_internal_r+0x5f8>
 2004520:	01000084 	movi	r4,2
 2004524:	d8000405 	stb	zero,16(sp)
 2004528:	003d8706 	br	2003b48 <___vfprintf_internal_r+0xa38>
 200452c:	d9814c17 	ldw	r6,1328(sp)
 2004530:	30c4703a 	and	r2,r6,r3
 2004534:	1005003a 	cmpeq	r2,r2,zero
 2004538:	103cb926 	beq	r2,zero,2003820 <___vfprintf_internal_r+0x710>
 200453c:	d9014117 	ldw	r4,1284(sp)
 2004540:	94800044 	addi	r18,r18,1
 2004544:	8c400044 	addi	r17,r17,1
 2004548:	008001c4 	movi	r2,7
 200454c:	a9000015 	stw	r4,0(r21)
 2004550:	a8c00115 	stw	r3,4(r21)
 2004554:	dc800e15 	stw	r18,56(sp)
 2004558:	dc400d15 	stw	r17,52(sp)
 200455c:	147e6616 	blt	r2,r17,2003ef8 <___vfprintf_internal_r+0xde8>
 2004560:	acc00204 	addi	r19,r21,8
 2004564:	003cd706 	br	20038c4 <___vfprintf_internal_r+0x7b4>
 2004568:	07008074 	movhi	fp,513
 200456c:	e73d2284 	addi	fp,fp,-2934
 2004570:	003c4f06 	br	20036b0 <___vfprintf_internal_r+0x5a0>
 2004574:	dd000f04 	addi	r20,sp,60
 2004578:	dc801904 	addi	r18,sp,100
 200457c:	8009883a 	mov	r4,r16
 2004580:	880b883a 	mov	r5,r17
 2004584:	01800284 	movi	r6,10
 2004588:	000f883a 	mov	r7,zero
 200458c:	2009e180 	call	2009e18 <__umoddi3>
 2004590:	12000c04 	addi	r8,r2,48
 2004594:	94bfffc4 	addi	r18,r18,-1
 2004598:	8009883a 	mov	r4,r16
 200459c:	880b883a 	mov	r5,r17
 20045a0:	01800284 	movi	r6,10
 20045a4:	000f883a 	mov	r7,zero
 20045a8:	92000005 	stb	r8,0(r18)
 20045ac:	200983c0 	call	200983c <__udivdi3>
 20045b0:	1009883a 	mov	r4,r2
 20045b4:	1021883a 	mov	r16,r2
 20045b8:	18800068 	cmpgeui	r2,r3,1
 20045bc:	1823883a 	mov	r17,r3
 20045c0:	103fee1e 	bne	r2,zero,200457c <___vfprintf_internal_r+0x146c>
 20045c4:	1800021e 	bne	r3,zero,20045d0 <___vfprintf_internal_r+0x14c0>
 20045c8:	00800244 	movi	r2,9
 20045cc:	113feb36 	bltu	r2,r4,200457c <___vfprintf_internal_r+0x146c>
 20045d0:	94bfffc4 	addi	r18,r18,-1
 20045d4:	dc814115 	stw	r18,1284(sp)
 20045d8:	003fc006 	br	20044dc <___vfprintf_internal_r+0x13cc>
 20045dc:	d9014c17 	ldw	r4,1328(sp)
 20045e0:	2080004c 	andi	r2,r4,1
 20045e4:	10009a1e 	bne	r2,zero,2004850 <___vfprintf_internal_r+0x1740>
 20045e8:	d9401904 	addi	r5,sp,100
 20045ec:	dd000f04 	addi	r20,sp,60
 20045f0:	d9414115 	stw	r5,1284(sp)
 20045f4:	003d6106 	br	2003b7c <___vfprintf_internal_r+0xa6c>
 20045f8:	d9014f17 	ldw	r4,1340(sp)
 20045fc:	b00b883a 	mov	r5,r22
 2004600:	d9800c04 	addi	r6,sp,48
 2004604:	20030b80 	call	20030b8 <__sprint_r>
 2004608:	103c791e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 200460c:	dc800e17 	ldw	r18,56(sp)
 2004610:	d8c01904 	addi	r3,sp,100
 2004614:	003cff06 	br	2003a14 <___vfprintf_internal_r+0x904>
 2004618:	d8c14c17 	ldw	r3,1328(sp)
 200461c:	1880040c 	andi	r2,r3,16
 2004620:	1000711e 	bne	r2,zero,20047e8 <___vfprintf_internal_r+0x16d8>
 2004624:	d9014c17 	ldw	r4,1328(sp)
 2004628:	2080100c 	andi	r2,r4,64
 200462c:	10006e26 	beq	r2,zero,20047e8 <___vfprintf_internal_r+0x16d8>
 2004630:	3c00000b 	ldhu	r16,0(r7)
 2004634:	0023883a 	mov	r17,zero
 2004638:	39c00104 	addi	r7,r7,4
 200463c:	d9c14015 	stw	r7,1280(sp)
 2004640:	003f0006 	br	2004244 <___vfprintf_internal_r+0x1134>
 2004644:	dc400d17 	ldw	r17,52(sp)
 2004648:	07008074 	movhi	fp,513
 200464c:	e73d2284 	addi	fp,fp,-2934
 2004650:	9425883a 	add	r18,r18,r16
 2004654:	8c400044 	addi	r17,r17,1
 2004658:	008001c4 	movi	r2,7
 200465c:	1f000015 	stw	fp,0(r3)
 2004660:	1c000115 	stw	r16,4(r3)
 2004664:	dc800e15 	stw	r18,56(sp)
 2004668:	dc400d15 	stw	r17,52(sp)
 200466c:	147d7616 	blt	r2,r17,2003c48 <___vfprintf_internal_r+0xb38>
 2004670:	18c00204 	addi	r3,r3,8
 2004674:	003d7b06 	br	2003c64 <___vfprintf_internal_r+0xb54>
 2004678:	dc800e17 	ldw	r18,56(sp)
 200467c:	dc400d17 	ldw	r17,52(sp)
 2004680:	07008074 	movhi	fp,513
 2004684:	e73d2684 	addi	fp,fp,-2918
 2004688:	003bc006 	br	200358c <___vfprintf_internal_r+0x47c>
 200468c:	d9014f17 	ldw	r4,1340(sp)
 2004690:	b00b883a 	mov	r5,r22
 2004694:	d9800c04 	addi	r6,sp,48
 2004698:	20030b80 	call	20030b8 <__sprint_r>
 200469c:	103c541e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 20046a0:	dc800e17 	ldw	r18,56(sp)
 20046a4:	d8c01904 	addi	r3,sp,100
 20046a8:	003ce906 	br	2003a50 <___vfprintf_internal_r+0x940>
 20046ac:	3c000017 	ldw	r16,0(r7)
 20046b0:	0009883a 	mov	r4,zero
 20046b4:	39c00104 	addi	r7,r7,4
 20046b8:	0023883a 	mov	r17,zero
 20046bc:	d9c14015 	stw	r7,1280(sp)
 20046c0:	d8000405 	stb	zero,16(sp)
 20046c4:	003d2006 	br	2003b48 <___vfprintf_internal_r+0xa38>
 20046c8:	38800017 	ldw	r2,0(r7)
 20046cc:	39c00104 	addi	r7,r7,4
 20046d0:	d9c14015 	stw	r7,1280(sp)
 20046d4:	1023d7fa 	srai	r17,r2,31
 20046d8:	1021883a 	mov	r16,r2
 20046dc:	003d1806 	br	2003b40 <___vfprintf_internal_r+0xa30>
 20046e0:	3c000017 	ldw	r16,0(r7)
 20046e4:	01000044 	movi	r4,1
 20046e8:	39c00104 	addi	r7,r7,4
 20046ec:	0023883a 	mov	r17,zero
 20046f0:	d9c14015 	stw	r7,1280(sp)
 20046f4:	d8000405 	stb	zero,16(sp)
 20046f8:	003d1306 	br	2003b48 <___vfprintf_internal_r+0xa38>
 20046fc:	00808074 	movhi	r2,513
 2004700:	10bd2204 	addi	r2,r2,-2936
 2004704:	94800044 	addi	r18,r18,1
 2004708:	8c400044 	addi	r17,r17,1
 200470c:	a8800015 	stw	r2,0(r21)
 2004710:	00c00044 	movi	r3,1
 2004714:	008001c4 	movi	r2,7
 2004718:	a8c00115 	stw	r3,4(r21)
 200471c:	dc800e15 	stw	r18,56(sp)
 2004720:	dc400d15 	stw	r17,52(sp)
 2004724:	1440ca16 	blt	r2,r17,2004a50 <___vfprintf_internal_r+0x1940>
 2004728:	a8c00204 	addi	r3,r21,8
 200472c:	2000061e 	bne	r4,zero,2004748 <___vfprintf_internal_r+0x1638>
 2004730:	d9414717 	ldw	r5,1308(sp)
 2004734:	2800041e 	bne	r5,zero,2004748 <___vfprintf_internal_r+0x1638>
 2004738:	d9814c17 	ldw	r6,1328(sp)
 200473c:	3080004c 	andi	r2,r6,1
 2004740:	1005003a 	cmpeq	r2,r2,zero
 2004744:	103bf01e 	bne	r2,zero,2003708 <___vfprintf_internal_r+0x5f8>
 2004748:	00800044 	movi	r2,1
 200474c:	dc400d17 	ldw	r17,52(sp)
 2004750:	18800115 	stw	r2,4(r3)
 2004754:	d8814917 	ldw	r2,1316(sp)
 2004758:	94800044 	addi	r18,r18,1
 200475c:	8c400044 	addi	r17,r17,1
 2004760:	18800015 	stw	r2,0(r3)
 2004764:	008001c4 	movi	r2,7
 2004768:	dc800e15 	stw	r18,56(sp)
 200476c:	dc400d15 	stw	r17,52(sp)
 2004770:	1440ca16 	blt	r2,r17,2004a9c <___vfprintf_internal_r+0x198c>
 2004774:	18c00204 	addi	r3,r3,8
 2004778:	0121c83a 	sub	r16,zero,r4
 200477c:	0400500e 	bge	zero,r16,20048c0 <___vfprintf_internal_r+0x17b0>
 2004780:	00800404 	movi	r2,16
 2004784:	1400800e 	bge	r2,r16,2004988 <___vfprintf_internal_r+0x1878>
 2004788:	1027883a 	mov	r19,r2
 200478c:	07008074 	movhi	fp,513
 2004790:	e73d2284 	addi	fp,fp,-2934
 2004794:	050001c4 	movi	r20,7
 2004798:	00000306 	br	20047a8 <___vfprintf_internal_r+0x1698>
 200479c:	18c00204 	addi	r3,r3,8
 20047a0:	843ffc04 	addi	r16,r16,-16
 20047a4:	9c007a0e 	bge	r19,r16,2004990 <___vfprintf_internal_r+0x1880>
 20047a8:	94800404 	addi	r18,r18,16
 20047ac:	8c400044 	addi	r17,r17,1
 20047b0:	1f000015 	stw	fp,0(r3)
 20047b4:	1cc00115 	stw	r19,4(r3)
 20047b8:	dc800e15 	stw	r18,56(sp)
 20047bc:	dc400d15 	stw	r17,52(sp)
 20047c0:	a47ff60e 	bge	r20,r17,200479c <___vfprintf_internal_r+0x168c>
 20047c4:	d9014f17 	ldw	r4,1340(sp)
 20047c8:	b00b883a 	mov	r5,r22
 20047cc:	d9800c04 	addi	r6,sp,48
 20047d0:	20030b80 	call	20030b8 <__sprint_r>
 20047d4:	103c061e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 20047d8:	dc800e17 	ldw	r18,56(sp)
 20047dc:	dc400d17 	ldw	r17,52(sp)
 20047e0:	d8c01904 	addi	r3,sp,100
 20047e4:	003fee06 	br	20047a0 <___vfprintf_internal_r+0x1690>
 20047e8:	3c000017 	ldw	r16,0(r7)
 20047ec:	0023883a 	mov	r17,zero
 20047f0:	39c00104 	addi	r7,r7,4
 20047f4:	d9c14015 	stw	r7,1280(sp)
 20047f8:	003e9206 	br	2004244 <___vfprintf_internal_r+0x1134>
 20047fc:	d9401904 	addi	r5,sp,100
 2004800:	dd000f04 	addi	r20,sp,60
 2004804:	d9414115 	stw	r5,1284(sp)
 2004808:	d9814417 	ldw	r6,1296(sp)
 200480c:	880a973a 	slli	r5,r17,28
 2004810:	8004d13a 	srli	r2,r16,4
 2004814:	810003cc 	andi	r4,r16,15
 2004818:	3109883a 	add	r4,r6,r4
 200481c:	2884b03a 	or	r2,r5,r2
 2004820:	21400003 	ldbu	r5,0(r4)
 2004824:	d9014117 	ldw	r4,1284(sp)
 2004828:	8806d13a 	srli	r3,r17,4
 200482c:	1021883a 	mov	r16,r2
 2004830:	213fffc4 	addi	r4,r4,-1
 2004834:	d9014115 	stw	r4,1284(sp)
 2004838:	d9814117 	ldw	r6,1284(sp)
 200483c:	10c8b03a 	or	r4,r2,r3
 2004840:	1823883a 	mov	r17,r3
 2004844:	31400005 	stb	r5,0(r6)
 2004848:	203fef1e 	bne	r4,zero,2004808 <___vfprintf_internal_r+0x16f8>
 200484c:	003ccb06 	br	2003b7c <___vfprintf_internal_r+0xa6c>
 2004850:	00800c04 	movi	r2,48
 2004854:	d98018c4 	addi	r6,sp,99
 2004858:	dd000f04 	addi	r20,sp,60
 200485c:	d88018c5 	stb	r2,99(sp)
 2004860:	d9814115 	stw	r6,1284(sp)
 2004864:	003cc506 	br	2003b7c <___vfprintf_internal_r+0xa6c>
 2004868:	dc400d17 	ldw	r17,52(sp)
 200486c:	07008074 	movhi	fp,513
 2004870:	e73d2684 	addi	fp,fp,-2918
 2004874:	003bc706 	br	2003794 <___vfprintf_internal_r+0x684>
 2004878:	d9414c17 	ldw	r5,1328(sp)
 200487c:	2880040c 	andi	r2,r5,16
 2004880:	10007c26 	beq	r2,zero,2004a74 <___vfprintf_internal_r+0x1964>
 2004884:	38800017 	ldw	r2,0(r7)
 2004888:	39c00104 	addi	r7,r7,4
 200488c:	d9c14015 	stw	r7,1280(sp)
 2004890:	d9814b17 	ldw	r6,1324(sp)
 2004894:	d9c14017 	ldw	r7,1280(sp)
 2004898:	11800015 	stw	r6,0(r2)
 200489c:	003a7806 	br	2003280 <___vfprintf_internal_r+0x170>
 20048a0:	d9014f17 	ldw	r4,1340(sp)
 20048a4:	b00b883a 	mov	r5,r22
 20048a8:	d9800c04 	addi	r6,sp,48
 20048ac:	20030b80 	call	20030b8 <__sprint_r>
 20048b0:	103bcf1e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 20048b4:	dc800e17 	ldw	r18,56(sp)
 20048b8:	dc400d17 	ldw	r17,52(sp)
 20048bc:	d8c01904 	addi	r3,sp,100
 20048c0:	d9014717 	ldw	r4,1308(sp)
 20048c4:	d9414117 	ldw	r5,1284(sp)
 20048c8:	8c400044 	addi	r17,r17,1
 20048cc:	9125883a 	add	r18,r18,r4
 20048d0:	008001c4 	movi	r2,7
 20048d4:	19400015 	stw	r5,0(r3)
 20048d8:	19000115 	stw	r4,4(r3)
 20048dc:	dc800e15 	stw	r18,56(sp)
 20048e0:	dc400d15 	stw	r17,52(sp)
 20048e4:	147cee16 	blt	r2,r17,2003ca0 <___vfprintf_internal_r+0xb90>
 20048e8:	18c00204 	addi	r3,r3,8
 20048ec:	003b8606 	br	2003708 <___vfprintf_internal_r+0x5f8>
 20048f0:	38c00017 	ldw	r3,0(r7)
 20048f4:	39000204 	addi	r4,r7,8
 20048f8:	d9014015 	stw	r4,1280(sp)
 20048fc:	d8c14215 	stw	r3,1288(sp)
 2004900:	39c00117 	ldw	r7,4(r7)
 2004904:	d9c14315 	stw	r7,1292(sp)
 2004908:	003e2006 	br	200418c <___vfprintf_internal_r+0x107c>
 200490c:	0005883a 	mov	r2,zero
 2004910:	1409c83a 	sub	r4,r2,r16
 2004914:	1105803a 	cmpltu	r2,r2,r4
 2004918:	044bc83a 	sub	r5,zero,r17
 200491c:	2885c83a 	sub	r2,r5,r2
 2004920:	2021883a 	mov	r16,r4
 2004924:	1023883a 	mov	r17,r2
 2004928:	01000044 	movi	r4,1
 200492c:	00800b44 	movi	r2,45
 2004930:	d8800405 	stb	r2,16(sp)
 2004934:	003c8406 	br	2003b48 <___vfprintf_internal_r+0xa38>
 2004938:	d9014f17 	ldw	r4,1340(sp)
 200493c:	b00b883a 	mov	r5,r22
 2004940:	d9800c04 	addi	r6,sp,48
 2004944:	20030b80 	call	20030b8 <__sprint_r>
 2004948:	103ba91e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 200494c:	dc800e17 	ldw	r18,56(sp)
 2004950:	dc400d17 	ldw	r17,52(sp)
 2004954:	d9000517 	ldw	r4,20(sp)
 2004958:	d9401904 	addi	r5,sp,100
 200495c:	003da706 	br	2003ffc <___vfprintf_internal_r+0xeec>
 2004960:	d9014f17 	ldw	r4,1340(sp)
 2004964:	b00b883a 	mov	r5,r22
 2004968:	d9800c04 	addi	r6,sp,48
 200496c:	20030b80 	call	20030b8 <__sprint_r>
 2004970:	103b9f1e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2004974:	dc800e17 	ldw	r18,56(sp)
 2004978:	dc400d17 	ldw	r17,52(sp)
 200497c:	d9000517 	ldw	r4,20(sp)
 2004980:	d8c01904 	addi	r3,sp,100
 2004984:	003d9106 	br	2003fcc <___vfprintf_internal_r+0xebc>
 2004988:	07008074 	movhi	fp,513
 200498c:	e73d2284 	addi	fp,fp,-2934
 2004990:	9425883a 	add	r18,r18,r16
 2004994:	8c400044 	addi	r17,r17,1
 2004998:	008001c4 	movi	r2,7
 200499c:	1f000015 	stw	fp,0(r3)
 20049a0:	1c000115 	stw	r16,4(r3)
 20049a4:	dc800e15 	stw	r18,56(sp)
 20049a8:	dc400d15 	stw	r17,52(sp)
 20049ac:	147fbc16 	blt	r2,r17,20048a0 <___vfprintf_internal_r+0x1790>
 20049b0:	18c00204 	addi	r3,r3,8
 20049b4:	003fc206 	br	20048c0 <___vfprintf_internal_r+0x17b0>
 20049b8:	d9014f17 	ldw	r4,1340(sp)
 20049bc:	b00b883a 	mov	r5,r22
 20049c0:	d9800c04 	addi	r6,sp,48
 20049c4:	20030b80 	call	20030b8 <__sprint_r>
 20049c8:	103b891e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 20049cc:	dc800e17 	ldw	r18,56(sp)
 20049d0:	d9000517 	ldw	r4,20(sp)
 20049d4:	d8c01904 	addi	r3,sp,100
 20049d8:	003d0206 	br	2003de4 <___vfprintf_internal_r+0xcd4>
 20049dc:	07008074 	movhi	fp,513
 20049e0:	e73d2284 	addi	fp,fp,-2934
 20049e4:	003be406 	br	2003978 <___vfprintf_internal_r+0x868>
 20049e8:	00808074 	movhi	r2,513
 20049ec:	10bd1104 	addi	r2,r2,-3004
 20049f0:	d8814115 	stw	r2,1284(sp)
 20049f4:	003df506 	br	20041cc <___vfprintf_internal_r+0x10bc>
 20049f8:	d9014217 	ldw	r4,1288(sp)
 20049fc:	d9414317 	ldw	r5,1292(sp)
 2004a00:	20095780 	call	2009578 <__isnand>
 2004a04:	10003926 	beq	r2,zero,2004aec <___vfprintf_internal_r+0x19dc>
 2004a08:	d9414d17 	ldw	r5,1332(sp)
 2004a0c:	008011c4 	movi	r2,71
 2004a10:	1140ce16 	blt	r2,r5,2004d4c <___vfprintf_internal_r+0x1c3c>
 2004a14:	01808074 	movhi	r6,513
 2004a18:	31bd1204 	addi	r6,r6,-3000
 2004a1c:	d9814115 	stw	r6,1284(sp)
 2004a20:	003dea06 	br	20041cc <___vfprintf_internal_r+0x10bc>
 2004a24:	d9014c17 	ldw	r4,1328(sp)
 2004a28:	bdc00044 	addi	r23,r23,1
 2004a2c:	b8c00007 	ldb	r3,0(r23)
 2004a30:	21000814 	ori	r4,r4,32
 2004a34:	d9014c15 	stw	r4,1328(sp)
 2004a38:	003a3406 	br	200330c <___vfprintf_internal_r+0x1fc>
 2004a3c:	dcc14515 	stw	r19,1300(sp)
 2004a40:	98011016 	blt	r19,zero,2004e84 <___vfprintf_internal_r+0x1d74>
 2004a44:	980f883a 	mov	r7,r19
 2004a48:	d8014615 	stw	zero,1304(sp)
 2004a4c:	003c5206 	br	2003b98 <___vfprintf_internal_r+0xa88>
 2004a50:	d9014f17 	ldw	r4,1340(sp)
 2004a54:	b00b883a 	mov	r5,r22
 2004a58:	d9800c04 	addi	r6,sp,48
 2004a5c:	20030b80 	call	20030b8 <__sprint_r>
 2004a60:	103b631e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2004a64:	dc800e17 	ldw	r18,56(sp)
 2004a68:	d9000517 	ldw	r4,20(sp)
 2004a6c:	d8c01904 	addi	r3,sp,100
 2004a70:	003f2e06 	br	200472c <___vfprintf_internal_r+0x161c>
 2004a74:	d8c14c17 	ldw	r3,1328(sp)
 2004a78:	1880100c 	andi	r2,r3,64
 2004a7c:	1000a026 	beq	r2,zero,2004d00 <___vfprintf_internal_r+0x1bf0>
 2004a80:	38800017 	ldw	r2,0(r7)
 2004a84:	39c00104 	addi	r7,r7,4
 2004a88:	d9c14015 	stw	r7,1280(sp)
 2004a8c:	d9014b17 	ldw	r4,1324(sp)
 2004a90:	d9c14017 	ldw	r7,1280(sp)
 2004a94:	1100000d 	sth	r4,0(r2)
 2004a98:	0039f906 	br	2003280 <___vfprintf_internal_r+0x170>
 2004a9c:	d9014f17 	ldw	r4,1340(sp)
 2004aa0:	b00b883a 	mov	r5,r22
 2004aa4:	d9800c04 	addi	r6,sp,48
 2004aa8:	20030b80 	call	20030b8 <__sprint_r>
 2004aac:	103b501e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2004ab0:	dc800e17 	ldw	r18,56(sp)
 2004ab4:	dc400d17 	ldw	r17,52(sp)
 2004ab8:	d9000517 	ldw	r4,20(sp)
 2004abc:	d8c01904 	addi	r3,sp,100
 2004ac0:	003f2d06 	br	2004778 <___vfprintf_internal_r+0x1668>
 2004ac4:	00800184 	movi	r2,6
 2004ac8:	14c09a36 	bltu	r2,r19,2004d34 <___vfprintf_internal_r+0x1c24>
 2004acc:	dcc14515 	stw	r19,1300(sp)
 2004ad0:	9800010e 	bge	r19,zero,2004ad8 <___vfprintf_internal_r+0x19c8>
 2004ad4:	d8014515 	stw	zero,1300(sp)
 2004ad8:	00808074 	movhi	r2,513
 2004adc:	10bd1404 	addi	r2,r2,-2992
 2004ae0:	980f883a 	mov	r7,r19
 2004ae4:	d8814115 	stw	r2,1284(sp)
 2004ae8:	003a7806 	br	20034cc <___vfprintf_internal_r+0x3bc>
 2004aec:	00bfffc4 	movi	r2,-1
 2004af0:	9880e226 	beq	r19,r2,2004e7c <___vfprintf_internal_r+0x1d6c>
 2004af4:	d9414d17 	ldw	r5,1332(sp)
 2004af8:	008019c4 	movi	r2,103
 2004afc:	2880dc26 	beq	r5,r2,2004e70 <___vfprintf_internal_r+0x1d60>
 2004b00:	008011c4 	movi	r2,71
 2004b04:	2880da26 	beq	r5,r2,2004e70 <___vfprintf_internal_r+0x1d60>
 2004b08:	d9414c17 	ldw	r5,1328(sp)
 2004b0c:	d9014317 	ldw	r4,1292(sp)
 2004b10:	d9814217 	ldw	r6,1288(sp)
 2004b14:	29404014 	ori	r5,r5,256
 2004b18:	d9414c15 	stw	r5,1328(sp)
 2004b1c:	2000cc16 	blt	r4,zero,2004e50 <___vfprintf_internal_r+0x1d40>
 2004b20:	3021883a 	mov	r16,r6
 2004b24:	2023883a 	mov	r17,r4
 2004b28:	0039883a 	mov	fp,zero
 2004b2c:	d9414d17 	ldw	r5,1332(sp)
 2004b30:	00801984 	movi	r2,102
 2004b34:	2880b726 	beq	r5,r2,2004e14 <___vfprintf_internal_r+0x1d04>
 2004b38:	00801184 	movi	r2,70
 2004b3c:	2880b526 	beq	r5,r2,2004e14 <___vfprintf_internal_r+0x1d04>
 2004b40:	00801944 	movi	r2,101
 2004b44:	2880c826 	beq	r5,r2,2004e68 <___vfprintf_internal_r+0x1d58>
 2004b48:	00801144 	movi	r2,69
 2004b4c:	2880c626 	beq	r5,r2,2004e68 <___vfprintf_internal_r+0x1d58>
 2004b50:	9829883a 	mov	r20,r19
 2004b54:	d9014f17 	ldw	r4,1340(sp)
 2004b58:	d8800504 	addi	r2,sp,20
 2004b5c:	880d883a 	mov	r6,r17
 2004b60:	d8800115 	stw	r2,4(sp)
 2004b64:	d8c00604 	addi	r3,sp,24
 2004b68:	d8800704 	addi	r2,sp,28
 2004b6c:	800b883a 	mov	r5,r16
 2004b70:	01c00084 	movi	r7,2
 2004b74:	d8c00215 	stw	r3,8(sp)
 2004b78:	d8800315 	stw	r2,12(sp)
 2004b7c:	dd000015 	stw	r20,0(sp)
 2004b80:	200541c0 	call	200541c <_dtoa_r>
 2004b84:	d9814d17 	ldw	r6,1332(sp)
 2004b88:	d8814115 	stw	r2,1284(sp)
 2004b8c:	008019c4 	movi	r2,103
 2004b90:	30809526 	beq	r6,r2,2004de8 <___vfprintf_internal_r+0x1cd8>
 2004b94:	d8c14d17 	ldw	r3,1332(sp)
 2004b98:	008011c4 	movi	r2,71
 2004b9c:	18809226 	beq	r3,r2,2004de8 <___vfprintf_internal_r+0x1cd8>
 2004ba0:	d9414117 	ldw	r5,1284(sp)
 2004ba4:	d9814d17 	ldw	r6,1332(sp)
 2004ba8:	00801984 	movi	r2,102
 2004bac:	2d25883a 	add	r18,r5,r20
 2004bb0:	30808626 	beq	r6,r2,2004dcc <___vfprintf_internal_r+0x1cbc>
 2004bb4:	00801184 	movi	r2,70
 2004bb8:	30808426 	beq	r6,r2,2004dcc <___vfprintf_internal_r+0x1cbc>
 2004bbc:	000d883a 	mov	r6,zero
 2004bc0:	000f883a 	mov	r7,zero
 2004bc4:	880b883a 	mov	r5,r17
 2004bc8:	8009883a 	mov	r4,r16
 2004bcc:	200aee80 	call	200aee8 <__eqdf2>
 2004bd0:	1000751e 	bne	r2,zero,2004da8 <___vfprintf_internal_r+0x1c98>
 2004bd4:	9005883a 	mov	r2,r18
 2004bd8:	dc800715 	stw	r18,28(sp)
 2004bdc:	d9014117 	ldw	r4,1284(sp)
 2004be0:	d9414d17 	ldw	r5,1332(sp)
 2004be4:	00c019c4 	movi	r3,103
 2004be8:	1125c83a 	sub	r18,r2,r4
 2004bec:	28c06826 	beq	r5,r3,2004d90 <___vfprintf_internal_r+0x1c80>
 2004bf0:	008011c4 	movi	r2,71
 2004bf4:	28806626 	beq	r5,r2,2004d90 <___vfprintf_internal_r+0x1c80>
 2004bf8:	d9000517 	ldw	r4,20(sp)
 2004bfc:	d8c14d17 	ldw	r3,1332(sp)
 2004c00:	00801944 	movi	r2,101
 2004c04:	10c05516 	blt	r2,r3,2004d5c <___vfprintf_internal_r+0x1c4c>
 2004c08:	213fffc4 	addi	r4,r4,-1
 2004c0c:	d9000515 	stw	r4,20(sp)
 2004c10:	d8c00805 	stb	r3,32(sp)
 2004c14:	2021883a 	mov	r16,r4
 2004c18:	2000c116 	blt	r4,zero,2004f20 <___vfprintf_internal_r+0x1e10>
 2004c1c:	00800ac4 	movi	r2,43
 2004c20:	d8800845 	stb	r2,33(sp)
 2004c24:	00800244 	movi	r2,9
 2004c28:	1400af0e 	bge	r2,r16,2004ee8 <___vfprintf_internal_r+0x1dd8>
 2004c2c:	1027883a 	mov	r19,r2
 2004c30:	dc400b84 	addi	r17,sp,46
 2004c34:	8009883a 	mov	r4,r16
 2004c38:	01400284 	movi	r5,10
 2004c3c:	20011740 	call	2001174 <__modsi3>
 2004c40:	10800c04 	addi	r2,r2,48
 2004c44:	8c7fffc4 	addi	r17,r17,-1
 2004c48:	8009883a 	mov	r4,r16
 2004c4c:	01400284 	movi	r5,10
 2004c50:	88800005 	stb	r2,0(r17)
 2004c54:	20011140 	call	2001114 <__divsi3>
 2004c58:	1021883a 	mov	r16,r2
 2004c5c:	98bff516 	blt	r19,r2,2004c34 <___vfprintf_internal_r+0x1b24>
 2004c60:	10c00c04 	addi	r3,r2,48
 2004c64:	d88009c4 	addi	r2,sp,39
 2004c68:	108001c4 	addi	r2,r2,7
 2004c6c:	897fffc4 	addi	r5,r17,-1
 2004c70:	88ffffc5 	stb	r3,-1(r17)
 2004c74:	2880a72e 	bgeu	r5,r2,2004f14 <___vfprintf_internal_r+0x1e04>
 2004c78:	1009883a 	mov	r4,r2
 2004c7c:	d9800804 	addi	r6,sp,32
 2004c80:	d8c00884 	addi	r3,sp,34
 2004c84:	28800003 	ldbu	r2,0(r5)
 2004c88:	29400044 	addi	r5,r5,1
 2004c8c:	18800005 	stb	r2,0(r3)
 2004c90:	18c00044 	addi	r3,r3,1
 2004c94:	293ffb36 	bltu	r5,r4,2004c84 <___vfprintf_internal_r+0x1b74>
 2004c98:	1987c83a 	sub	r3,r3,r6
 2004c9c:	00800044 	movi	r2,1
 2004ca0:	d8c14815 	stw	r3,1312(sp)
 2004ca4:	90cf883a 	add	r7,r18,r3
 2004ca8:	1480960e 	bge	r2,r18,2004f04 <___vfprintf_internal_r+0x1df4>
 2004cac:	39c00044 	addi	r7,r7,1
 2004cb0:	d9c14515 	stw	r7,1300(sp)
 2004cb4:	38003416 	blt	r7,zero,2004d88 <___vfprintf_internal_r+0x1c78>
 2004cb8:	e0803fcc 	andi	r2,fp,255
 2004cbc:	1080201c 	xori	r2,r2,128
 2004cc0:	10bfe004 	addi	r2,r2,-128
 2004cc4:	10004e26 	beq	r2,zero,2004e00 <___vfprintf_internal_r+0x1cf0>
 2004cc8:	00800b44 	movi	r2,45
 2004ccc:	dc814715 	stw	r18,1308(sp)
 2004cd0:	d8014615 	stw	zero,1304(sp)
 2004cd4:	d8800405 	stb	r2,16(sp)
 2004cd8:	003bb106 	br	2003ba0 <___vfprintf_internal_r+0xa90>
 2004cdc:	00800b44 	movi	r2,45
 2004ce0:	d8800405 	stb	r2,16(sp)
 2004ce4:	003d3306 	br	20041b4 <___vfprintf_internal_r+0x10a4>
 2004ce8:	d9014f17 	ldw	r4,1340(sp)
 2004cec:	b00b883a 	mov	r5,r22
 2004cf0:	d9800c04 	addi	r6,sp,48
 2004cf4:	20030b80 	call	20030b8 <__sprint_r>
 2004cf8:	103abd1e 	bne	r2,zero,20037f0 <___vfprintf_internal_r+0x6e0>
 2004cfc:	003abb06 	br	20037ec <___vfprintf_internal_r+0x6dc>
 2004d00:	38800017 	ldw	r2,0(r7)
 2004d04:	39c00104 	addi	r7,r7,4
 2004d08:	d9c14015 	stw	r7,1280(sp)
 2004d0c:	d9414b17 	ldw	r5,1324(sp)
 2004d10:	d9c14017 	ldw	r7,1280(sp)
 2004d14:	11400015 	stw	r5,0(r2)
 2004d18:	00395906 	br	2003280 <___vfprintf_internal_r+0x170>
 2004d1c:	980f883a 	mov	r7,r19
 2004d20:	dcc14515 	stw	r19,1300(sp)
 2004d24:	d8014615 	stw	zero,1304(sp)
 2004d28:	003b9b06 	br	2003b98 <___vfprintf_internal_r+0xa88>
 2004d2c:	0027883a 	mov	r19,zero
 2004d30:	00397806 	br	2003314 <___vfprintf_internal_r+0x204>
 2004d34:	00c08074 	movhi	r3,513
 2004d38:	18fd1404 	addi	r3,r3,-2992
 2004d3c:	100f883a 	mov	r7,r2
 2004d40:	d8814515 	stw	r2,1300(sp)
 2004d44:	d8c14115 	stw	r3,1284(sp)
 2004d48:	0039e006 	br	20034cc <___vfprintf_internal_r+0x3bc>
 2004d4c:	00808074 	movhi	r2,513
 2004d50:	10bd1304 	addi	r2,r2,-2996
 2004d54:	d8814115 	stw	r2,1284(sp)
 2004d58:	003d1c06 	br	20041cc <___vfprintf_internal_r+0x10bc>
 2004d5c:	d9414d17 	ldw	r5,1332(sp)
 2004d60:	00801984 	movi	r2,102
 2004d64:	28804926 	beq	r5,r2,2004e8c <___vfprintf_internal_r+0x1d7c>
 2004d68:	200f883a 	mov	r7,r4
 2004d6c:	24805716 	blt	r4,r18,2004ecc <___vfprintf_internal_r+0x1dbc>
 2004d70:	d9414c17 	ldw	r5,1328(sp)
 2004d74:	2880004c 	andi	r2,r5,1
 2004d78:	10000126 	beq	r2,zero,2004d80 <___vfprintf_internal_r+0x1c70>
 2004d7c:	21c00044 	addi	r7,r4,1
 2004d80:	d9c14515 	stw	r7,1300(sp)
 2004d84:	383fcc0e 	bge	r7,zero,2004cb8 <___vfprintf_internal_r+0x1ba8>
 2004d88:	d8014515 	stw	zero,1300(sp)
 2004d8c:	003fca06 	br	2004cb8 <___vfprintf_internal_r+0x1ba8>
 2004d90:	d9000517 	ldw	r4,20(sp)
 2004d94:	00bfff04 	movi	r2,-4
 2004d98:	1100480e 	bge	r2,r4,2004ebc <___vfprintf_internal_r+0x1dac>
 2004d9c:	99004716 	blt	r19,r4,2004ebc <___vfprintf_internal_r+0x1dac>
 2004da0:	d8c14d15 	stw	r3,1332(sp)
 2004da4:	003ff006 	br	2004d68 <___vfprintf_internal_r+0x1c58>
 2004da8:	d8800717 	ldw	r2,28(sp)
 2004dac:	14bf8b2e 	bgeu	r2,r18,2004bdc <___vfprintf_internal_r+0x1acc>
 2004db0:	9007883a 	mov	r3,r18
 2004db4:	01000c04 	movi	r4,48
 2004db8:	11000005 	stb	r4,0(r2)
 2004dbc:	10800044 	addi	r2,r2,1
 2004dc0:	d8800715 	stw	r2,28(sp)
 2004dc4:	18bffc1e 	bne	r3,r2,2004db8 <___vfprintf_internal_r+0x1ca8>
 2004dc8:	003f8406 	br	2004bdc <___vfprintf_internal_r+0x1acc>
 2004dcc:	d8814117 	ldw	r2,1284(sp)
 2004dd0:	10c00007 	ldb	r3,0(r2)
 2004dd4:	00800c04 	movi	r2,48
 2004dd8:	18805b26 	beq	r3,r2,2004f48 <___vfprintf_internal_r+0x1e38>
 2004ddc:	d9000517 	ldw	r4,20(sp)
 2004de0:	9125883a 	add	r18,r18,r4
 2004de4:	003f7506 	br	2004bbc <___vfprintf_internal_r+0x1aac>
 2004de8:	d9014c17 	ldw	r4,1328(sp)
 2004dec:	2080004c 	andi	r2,r4,1
 2004df0:	1005003a 	cmpeq	r2,r2,zero
 2004df4:	103f6a26 	beq	r2,zero,2004ba0 <___vfprintf_internal_r+0x1a90>
 2004df8:	d8800717 	ldw	r2,28(sp)
 2004dfc:	003f7706 	br	2004bdc <___vfprintf_internal_r+0x1acc>
 2004e00:	d9c14515 	stw	r7,1300(sp)
 2004e04:	38004d16 	blt	r7,zero,2004f3c <___vfprintf_internal_r+0x1e2c>
 2004e08:	dc814715 	stw	r18,1308(sp)
 2004e0c:	d8014615 	stw	zero,1304(sp)
 2004e10:	003b6106 	br	2003b98 <___vfprintf_internal_r+0xa88>
 2004e14:	d9014f17 	ldw	r4,1340(sp)
 2004e18:	d8800504 	addi	r2,sp,20
 2004e1c:	d8800115 	stw	r2,4(sp)
 2004e20:	d8c00604 	addi	r3,sp,24
 2004e24:	d8800704 	addi	r2,sp,28
 2004e28:	800b883a 	mov	r5,r16
 2004e2c:	880d883a 	mov	r6,r17
 2004e30:	01c000c4 	movi	r7,3
 2004e34:	d8c00215 	stw	r3,8(sp)
 2004e38:	d8800315 	stw	r2,12(sp)
 2004e3c:	dcc00015 	stw	r19,0(sp)
 2004e40:	9829883a 	mov	r20,r19
 2004e44:	200541c0 	call	200541c <_dtoa_r>
 2004e48:	d8814115 	stw	r2,1284(sp)
 2004e4c:	003f5106 	br	2004b94 <___vfprintf_internal_r+0x1a84>
 2004e50:	d8c14217 	ldw	r3,1288(sp)
 2004e54:	d9014317 	ldw	r4,1292(sp)
 2004e58:	07000b44 	movi	fp,45
 2004e5c:	1821883a 	mov	r16,r3
 2004e60:	2460003c 	xorhi	r17,r4,32768
 2004e64:	003f3106 	br	2004b2c <___vfprintf_internal_r+0x1a1c>
 2004e68:	9d000044 	addi	r20,r19,1
 2004e6c:	003f3906 	br	2004b54 <___vfprintf_internal_r+0x1a44>
 2004e70:	983f251e 	bne	r19,zero,2004b08 <___vfprintf_internal_r+0x19f8>
 2004e74:	04c00044 	movi	r19,1
 2004e78:	003f2306 	br	2004b08 <___vfprintf_internal_r+0x19f8>
 2004e7c:	04c00184 	movi	r19,6
 2004e80:	003f2106 	br	2004b08 <___vfprintf_internal_r+0x19f8>
 2004e84:	d8014515 	stw	zero,1300(sp)
 2004e88:	003eee06 	br	2004a44 <___vfprintf_internal_r+0x1934>
 2004e8c:	200f883a 	mov	r7,r4
 2004e90:	0100370e 	bge	zero,r4,2004f70 <___vfprintf_internal_r+0x1e60>
 2004e94:	9800031e 	bne	r19,zero,2004ea4 <___vfprintf_internal_r+0x1d94>
 2004e98:	d9814c17 	ldw	r6,1328(sp)
 2004e9c:	3080004c 	andi	r2,r6,1
 2004ea0:	103fb726 	beq	r2,zero,2004d80 <___vfprintf_internal_r+0x1c70>
 2004ea4:	20800044 	addi	r2,r4,1
 2004ea8:	98a7883a 	add	r19,r19,r2
 2004eac:	dcc14515 	stw	r19,1300(sp)
 2004eb0:	980f883a 	mov	r7,r19
 2004eb4:	983f800e 	bge	r19,zero,2004cb8 <___vfprintf_internal_r+0x1ba8>
 2004eb8:	003fb306 	br	2004d88 <___vfprintf_internal_r+0x1c78>
 2004ebc:	d9814d17 	ldw	r6,1332(sp)
 2004ec0:	31bfff84 	addi	r6,r6,-2
 2004ec4:	d9814d15 	stw	r6,1332(sp)
 2004ec8:	003f4c06 	br	2004bfc <___vfprintf_internal_r+0x1aec>
 2004ecc:	0100180e 	bge	zero,r4,2004f30 <___vfprintf_internal_r+0x1e20>
 2004ed0:	00800044 	movi	r2,1
 2004ed4:	1485883a 	add	r2,r2,r18
 2004ed8:	d8814515 	stw	r2,1300(sp)
 2004edc:	100f883a 	mov	r7,r2
 2004ee0:	103f750e 	bge	r2,zero,2004cb8 <___vfprintf_internal_r+0x1ba8>
 2004ee4:	003fa806 	br	2004d88 <___vfprintf_internal_r+0x1c78>
 2004ee8:	80c00c04 	addi	r3,r16,48
 2004eec:	00800c04 	movi	r2,48
 2004ef0:	d8c008c5 	stb	r3,35(sp)
 2004ef4:	d9800804 	addi	r6,sp,32
 2004ef8:	d8c00904 	addi	r3,sp,36
 2004efc:	d8800885 	stb	r2,34(sp)
 2004f00:	003f6506 	br	2004c98 <___vfprintf_internal_r+0x1b88>
 2004f04:	d9014c17 	ldw	r4,1328(sp)
 2004f08:	2084703a 	and	r2,r4,r2
 2004f0c:	103f9c26 	beq	r2,zero,2004d80 <___vfprintf_internal_r+0x1c70>
 2004f10:	003f6606 	br	2004cac <___vfprintf_internal_r+0x1b9c>
 2004f14:	d9800804 	addi	r6,sp,32
 2004f18:	d8c00884 	addi	r3,sp,34
 2004f1c:	003f5e06 	br	2004c98 <___vfprintf_internal_r+0x1b88>
 2004f20:	00800b44 	movi	r2,45
 2004f24:	0121c83a 	sub	r16,zero,r4
 2004f28:	d8800845 	stb	r2,33(sp)
 2004f2c:	003f3d06 	br	2004c24 <___vfprintf_internal_r+0x1b14>
 2004f30:	00800084 	movi	r2,2
 2004f34:	1105c83a 	sub	r2,r2,r4
 2004f38:	003fe606 	br	2004ed4 <___vfprintf_internal_r+0x1dc4>
 2004f3c:	d8014515 	stw	zero,1300(sp)
 2004f40:	dc814715 	stw	r18,1308(sp)
 2004f44:	003fb106 	br	2004e0c <___vfprintf_internal_r+0x1cfc>
 2004f48:	000d883a 	mov	r6,zero
 2004f4c:	000f883a 	mov	r7,zero
 2004f50:	8009883a 	mov	r4,r16
 2004f54:	880b883a 	mov	r5,r17
 2004f58:	200af700 	call	200af70 <__nedf2>
 2004f5c:	103f9f26 	beq	r2,zero,2004ddc <___vfprintf_internal_r+0x1ccc>
 2004f60:	00800044 	movi	r2,1
 2004f64:	1509c83a 	sub	r4,r2,r20
 2004f68:	d9000515 	stw	r4,20(sp)
 2004f6c:	003f9b06 	br	2004ddc <___vfprintf_internal_r+0x1ccc>
 2004f70:	98000d1e 	bne	r19,zero,2004fa8 <___vfprintf_internal_r+0x1e98>
 2004f74:	d8c14c17 	ldw	r3,1328(sp)
 2004f78:	1880004c 	andi	r2,r3,1
 2004f7c:	10000a1e 	bne	r2,zero,2004fa8 <___vfprintf_internal_r+0x1e98>
 2004f80:	01000044 	movi	r4,1
 2004f84:	200f883a 	mov	r7,r4
 2004f88:	d9014515 	stw	r4,1300(sp)
 2004f8c:	003f4a06 	br	2004cb8 <___vfprintf_internal_r+0x1ba8>
 2004f90:	3cc00017 	ldw	r19,0(r7)
 2004f94:	39c00104 	addi	r7,r7,4
 2004f98:	983d0e0e 	bge	r19,zero,20043d4 <___vfprintf_internal_r+0x12c4>
 2004f9c:	b8c00007 	ldb	r3,0(r23)
 2004fa0:	04ffffc4 	movi	r19,-1
 2004fa4:	0038d906 	br	200330c <___vfprintf_internal_r+0x1fc>
 2004fa8:	9cc00084 	addi	r19,r19,2
 2004fac:	dcc14515 	stw	r19,1300(sp)
 2004fb0:	980f883a 	mov	r7,r19
 2004fb4:	983f400e 	bge	r19,zero,2004cb8 <___vfprintf_internal_r+0x1ba8>
 2004fb8:	003f7306 	br	2004d88 <___vfprintf_internal_r+0x1c78>

02004fbc <__vfprintf_internal>:
 2004fbc:	00808074 	movhi	r2,513
 2004fc0:	10850f04 	addi	r2,r2,5180
 2004fc4:	2013883a 	mov	r9,r4
 2004fc8:	11000017 	ldw	r4,0(r2)
 2004fcc:	2805883a 	mov	r2,r5
 2004fd0:	300f883a 	mov	r7,r6
 2004fd4:	480b883a 	mov	r5,r9
 2004fd8:	100d883a 	mov	r6,r2
 2004fdc:	20031101 	jmpi	2003110 <___vfprintf_internal_r>

02004fe0 <_write_r>:
 2004fe0:	defffd04 	addi	sp,sp,-12
 2004fe4:	dc000015 	stw	r16,0(sp)
 2004fe8:	04008074 	movhi	r16,513
 2004fec:	840c0604 	addi	r16,r16,12312
 2004ff0:	dc400115 	stw	r17,4(sp)
 2004ff4:	80000015 	stw	zero,0(r16)
 2004ff8:	2023883a 	mov	r17,r4
 2004ffc:	2809883a 	mov	r4,r5
 2005000:	300b883a 	mov	r5,r6
 2005004:	380d883a 	mov	r6,r7
 2005008:	dfc00215 	stw	ra,8(sp)
 200500c:	200c3880 	call	200c388 <write>
 2005010:	1007883a 	mov	r3,r2
 2005014:	00bfffc4 	movi	r2,-1
 2005018:	18800626 	beq	r3,r2,2005034 <_write_r+0x54>
 200501c:	1805883a 	mov	r2,r3
 2005020:	dfc00217 	ldw	ra,8(sp)
 2005024:	dc400117 	ldw	r17,4(sp)
 2005028:	dc000017 	ldw	r16,0(sp)
 200502c:	dec00304 	addi	sp,sp,12
 2005030:	f800283a 	ret
 2005034:	80800017 	ldw	r2,0(r16)
 2005038:	103ff826 	beq	r2,zero,200501c <_write_r+0x3c>
 200503c:	88800015 	stw	r2,0(r17)
 2005040:	1805883a 	mov	r2,r3
 2005044:	dfc00217 	ldw	ra,8(sp)
 2005048:	dc400117 	ldw	r17,4(sp)
 200504c:	dc000017 	ldw	r16,0(sp)
 2005050:	dec00304 	addi	sp,sp,12
 2005054:	f800283a 	ret

02005058 <__swsetup_r>:
 2005058:	00808074 	movhi	r2,513
 200505c:	10850f04 	addi	r2,r2,5180
 2005060:	10c00017 	ldw	r3,0(r2)
 2005064:	defffd04 	addi	sp,sp,-12
 2005068:	dc400115 	stw	r17,4(sp)
 200506c:	dc000015 	stw	r16,0(sp)
 2005070:	dfc00215 	stw	ra,8(sp)
 2005074:	2023883a 	mov	r17,r4
 2005078:	2821883a 	mov	r16,r5
 200507c:	18000226 	beq	r3,zero,2005088 <__swsetup_r+0x30>
 2005080:	18800e17 	ldw	r2,56(r3)
 2005084:	10001f26 	beq	r2,zero,2005104 <__swsetup_r+0xac>
 2005088:	8100030b 	ldhu	r4,12(r16)
 200508c:	2080020c 	andi	r2,r4,8
 2005090:	10002826 	beq	r2,zero,2005134 <__swsetup_r+0xdc>
 2005094:	81400417 	ldw	r5,16(r16)
 2005098:	28001d26 	beq	r5,zero,2005110 <__swsetup_r+0xb8>
 200509c:	2080004c 	andi	r2,r4,1
 20050a0:	1005003a 	cmpeq	r2,r2,zero
 20050a4:	10000b26 	beq	r2,zero,20050d4 <__swsetup_r+0x7c>
 20050a8:	2080008c 	andi	r2,r4,2
 20050ac:	10001226 	beq	r2,zero,20050f8 <__swsetup_r+0xa0>
 20050b0:	0005883a 	mov	r2,zero
 20050b4:	80800215 	stw	r2,8(r16)
 20050b8:	28000b26 	beq	r5,zero,20050e8 <__swsetup_r+0x90>
 20050bc:	0005883a 	mov	r2,zero
 20050c0:	dfc00217 	ldw	ra,8(sp)
 20050c4:	dc400117 	ldw	r17,4(sp)
 20050c8:	dc000017 	ldw	r16,0(sp)
 20050cc:	dec00304 	addi	sp,sp,12
 20050d0:	f800283a 	ret
 20050d4:	80800517 	ldw	r2,20(r16)
 20050d8:	80000215 	stw	zero,8(r16)
 20050dc:	0085c83a 	sub	r2,zero,r2
 20050e0:	80800615 	stw	r2,24(r16)
 20050e4:	283ff51e 	bne	r5,zero,20050bc <__swsetup_r+0x64>
 20050e8:	2080200c 	andi	r2,r4,128
 20050ec:	103ff326 	beq	r2,zero,20050bc <__swsetup_r+0x64>
 20050f0:	00bfffc4 	movi	r2,-1
 20050f4:	003ff206 	br	20050c0 <__swsetup_r+0x68>
 20050f8:	80800517 	ldw	r2,20(r16)
 20050fc:	80800215 	stw	r2,8(r16)
 2005100:	003fed06 	br	20050b8 <__swsetup_r+0x60>
 2005104:	1809883a 	mov	r4,r3
 2005108:	2006c680 	call	2006c68 <__sinit>
 200510c:	003fde06 	br	2005088 <__swsetup_r+0x30>
 2005110:	20c0a00c 	andi	r3,r4,640
 2005114:	00808004 	movi	r2,512
 2005118:	18bfe026 	beq	r3,r2,200509c <__swsetup_r+0x44>
 200511c:	8809883a 	mov	r4,r17
 2005120:	800b883a 	mov	r5,r16
 2005124:	20021400 	call	2002140 <__smakebuf_r>
 2005128:	8100030b 	ldhu	r4,12(r16)
 200512c:	81400417 	ldw	r5,16(r16)
 2005130:	003fda06 	br	200509c <__swsetup_r+0x44>
 2005134:	2080040c 	andi	r2,r4,16
 2005138:	103fed26 	beq	r2,zero,20050f0 <__swsetup_r+0x98>
 200513c:	2080010c 	andi	r2,r4,4
 2005140:	10001226 	beq	r2,zero,200518c <__swsetup_r+0x134>
 2005144:	81400c17 	ldw	r5,48(r16)
 2005148:	28000526 	beq	r5,zero,2005160 <__swsetup_r+0x108>
 200514c:	80801004 	addi	r2,r16,64
 2005150:	28800226 	beq	r5,r2,200515c <__swsetup_r+0x104>
 2005154:	8809883a 	mov	r4,r17
 2005158:	200708c0 	call	200708c <_free_r>
 200515c:	80000c15 	stw	zero,48(r16)
 2005160:	8080030b 	ldhu	r2,12(r16)
 2005164:	81400417 	ldw	r5,16(r16)
 2005168:	80000115 	stw	zero,4(r16)
 200516c:	10bff6cc 	andi	r2,r2,65499
 2005170:	8080030d 	sth	r2,12(r16)
 2005174:	81400015 	stw	r5,0(r16)
 2005178:	8080030b 	ldhu	r2,12(r16)
 200517c:	10800214 	ori	r2,r2,8
 2005180:	113fffcc 	andi	r4,r2,65535
 2005184:	8080030d 	sth	r2,12(r16)
 2005188:	003fc306 	br	2005098 <__swsetup_r+0x40>
 200518c:	81400417 	ldw	r5,16(r16)
 2005190:	003ff906 	br	2005178 <__swsetup_r+0x120>

02005194 <_close_r>:
 2005194:	defffd04 	addi	sp,sp,-12
 2005198:	dc000015 	stw	r16,0(sp)
 200519c:	04008074 	movhi	r16,513
 20051a0:	840c0604 	addi	r16,r16,12312
 20051a4:	dc400115 	stw	r17,4(sp)
 20051a8:	80000015 	stw	zero,0(r16)
 20051ac:	2023883a 	mov	r17,r4
 20051b0:	2809883a 	mov	r4,r5
 20051b4:	dfc00215 	stw	ra,8(sp)
 20051b8:	200b3740 	call	200b374 <close>
 20051bc:	1007883a 	mov	r3,r2
 20051c0:	00bfffc4 	movi	r2,-1
 20051c4:	18800626 	beq	r3,r2,20051e0 <_close_r+0x4c>
 20051c8:	1805883a 	mov	r2,r3
 20051cc:	dfc00217 	ldw	ra,8(sp)
 20051d0:	dc400117 	ldw	r17,4(sp)
 20051d4:	dc000017 	ldw	r16,0(sp)
 20051d8:	dec00304 	addi	sp,sp,12
 20051dc:	f800283a 	ret
 20051e0:	80800017 	ldw	r2,0(r16)
 20051e4:	103ff826 	beq	r2,zero,20051c8 <_close_r+0x34>
 20051e8:	88800015 	stw	r2,0(r17)
 20051ec:	1805883a 	mov	r2,r3
 20051f0:	dfc00217 	ldw	ra,8(sp)
 20051f4:	dc400117 	ldw	r17,4(sp)
 20051f8:	dc000017 	ldw	r16,0(sp)
 20051fc:	dec00304 	addi	sp,sp,12
 2005200:	f800283a 	ret

02005204 <quorem>:
 2005204:	28c00417 	ldw	r3,16(r5)
 2005208:	20800417 	ldw	r2,16(r4)
 200520c:	defff604 	addi	sp,sp,-40
 2005210:	ddc00715 	stw	r23,28(sp)
 2005214:	dd400515 	stw	r21,20(sp)
 2005218:	dfc00915 	stw	ra,36(sp)
 200521c:	df000815 	stw	fp,32(sp)
 2005220:	dd800615 	stw	r22,24(sp)
 2005224:	dd000415 	stw	r20,16(sp)
 2005228:	dcc00315 	stw	r19,12(sp)
 200522c:	dc800215 	stw	r18,8(sp)
 2005230:	dc400115 	stw	r17,4(sp)
 2005234:	dc000015 	stw	r16,0(sp)
 2005238:	202f883a 	mov	r23,r4
 200523c:	282b883a 	mov	r21,r5
 2005240:	10c07416 	blt	r2,r3,2005414 <quorem+0x210>
 2005244:	1c7fffc4 	addi	r17,r3,-1
 2005248:	8c45883a 	add	r2,r17,r17
 200524c:	1085883a 	add	r2,r2,r2
 2005250:	2c000504 	addi	r16,r5,20
 2005254:	24c00504 	addi	r19,r4,20
 2005258:	14ed883a 	add	r22,r2,r19
 200525c:	80a5883a 	add	r18,r16,r2
 2005260:	b7000017 	ldw	fp,0(r22)
 2005264:	91400017 	ldw	r5,0(r18)
 2005268:	e009883a 	mov	r4,fp
 200526c:	29400044 	addi	r5,r5,1
 2005270:	20011d40 	call	20011d4 <__udivsi3>
 2005274:	1029883a 	mov	r20,r2
 2005278:	10003c1e 	bne	r2,zero,200536c <quorem+0x168>
 200527c:	a80b883a 	mov	r5,r21
 2005280:	b809883a 	mov	r4,r23
 2005284:	20080340 	call	2008034 <__mcmp>
 2005288:	10002b16 	blt	r2,zero,2005338 <quorem+0x134>
 200528c:	a5000044 	addi	r20,r20,1
 2005290:	980f883a 	mov	r7,r19
 2005294:	0011883a 	mov	r8,zero
 2005298:	0009883a 	mov	r4,zero
 200529c:	81400017 	ldw	r5,0(r16)
 20052a0:	38c00017 	ldw	r3,0(r7)
 20052a4:	84000104 	addi	r16,r16,4
 20052a8:	28bfffcc 	andi	r2,r5,65535
 20052ac:	2085883a 	add	r2,r4,r2
 20052b0:	11bfffcc 	andi	r6,r2,65535
 20052b4:	193fffcc 	andi	r4,r3,65535
 20052b8:	1004d43a 	srli	r2,r2,16
 20052bc:	280ad43a 	srli	r5,r5,16
 20052c0:	2189c83a 	sub	r4,r4,r6
 20052c4:	2209883a 	add	r4,r4,r8
 20052c8:	1806d43a 	srli	r3,r3,16
 20052cc:	288b883a 	add	r5,r5,r2
 20052d0:	200dd43a 	srai	r6,r4,16
 20052d4:	28bfffcc 	andi	r2,r5,65535
 20052d8:	1887c83a 	sub	r3,r3,r2
 20052dc:	1987883a 	add	r3,r3,r6
 20052e0:	3900000d 	sth	r4,0(r7)
 20052e4:	38c0008d 	sth	r3,2(r7)
 20052e8:	2808d43a 	srli	r4,r5,16
 20052ec:	39c00104 	addi	r7,r7,4
 20052f0:	1811d43a 	srai	r8,r3,16
 20052f4:	943fe92e 	bgeu	r18,r16,200529c <quorem+0x98>
 20052f8:	8c45883a 	add	r2,r17,r17
 20052fc:	1085883a 	add	r2,r2,r2
 2005300:	9885883a 	add	r2,r19,r2
 2005304:	10c00017 	ldw	r3,0(r2)
 2005308:	18000b1e 	bne	r3,zero,2005338 <quorem+0x134>
 200530c:	113fff04 	addi	r4,r2,-4
 2005310:	9900082e 	bgeu	r19,r4,2005334 <quorem+0x130>
 2005314:	10bfff17 	ldw	r2,-4(r2)
 2005318:	10000326 	beq	r2,zero,2005328 <quorem+0x124>
 200531c:	00000506 	br	2005334 <quorem+0x130>
 2005320:	20800017 	ldw	r2,0(r4)
 2005324:	1000031e 	bne	r2,zero,2005334 <quorem+0x130>
 2005328:	213fff04 	addi	r4,r4,-4
 200532c:	8c7fffc4 	addi	r17,r17,-1
 2005330:	993ffb36 	bltu	r19,r4,2005320 <quorem+0x11c>
 2005334:	bc400415 	stw	r17,16(r23)
 2005338:	a005883a 	mov	r2,r20
 200533c:	dfc00917 	ldw	ra,36(sp)
 2005340:	df000817 	ldw	fp,32(sp)
 2005344:	ddc00717 	ldw	r23,28(sp)
 2005348:	dd800617 	ldw	r22,24(sp)
 200534c:	dd400517 	ldw	r21,20(sp)
 2005350:	dd000417 	ldw	r20,16(sp)
 2005354:	dcc00317 	ldw	r19,12(sp)
 2005358:	dc800217 	ldw	r18,8(sp)
 200535c:	dc400117 	ldw	r17,4(sp)
 2005360:	dc000017 	ldw	r16,0(sp)
 2005364:	dec00a04 	addi	sp,sp,40
 2005368:	f800283a 	ret
 200536c:	980f883a 	mov	r7,r19
 2005370:	8011883a 	mov	r8,r16
 2005374:	0013883a 	mov	r9,zero
 2005378:	000d883a 	mov	r6,zero
 200537c:	40c00017 	ldw	r3,0(r8)
 2005380:	39000017 	ldw	r4,0(r7)
 2005384:	42000104 	addi	r8,r8,4
 2005388:	18bfffcc 	andi	r2,r3,65535
 200538c:	a085383a 	mul	r2,r20,r2
 2005390:	1806d43a 	srli	r3,r3,16
 2005394:	217fffcc 	andi	r5,r4,65535
 2005398:	3085883a 	add	r2,r6,r2
 200539c:	11bfffcc 	andi	r6,r2,65535
 20053a0:	a0c7383a 	mul	r3,r20,r3
 20053a4:	1004d43a 	srli	r2,r2,16
 20053a8:	298bc83a 	sub	r5,r5,r6
 20053ac:	2a4b883a 	add	r5,r5,r9
 20053b0:	2008d43a 	srli	r4,r4,16
 20053b4:	1887883a 	add	r3,r3,r2
 20053b8:	280dd43a 	srai	r6,r5,16
 20053bc:	18bfffcc 	andi	r2,r3,65535
 20053c0:	2089c83a 	sub	r4,r4,r2
 20053c4:	2189883a 	add	r4,r4,r6
 20053c8:	3900008d 	sth	r4,2(r7)
 20053cc:	3940000d 	sth	r5,0(r7)
 20053d0:	180cd43a 	srli	r6,r3,16
 20053d4:	39c00104 	addi	r7,r7,4
 20053d8:	2013d43a 	srai	r9,r4,16
 20053dc:	923fe72e 	bgeu	r18,r8,200537c <quorem+0x178>
 20053e0:	e03fa61e 	bne	fp,zero,200527c <quorem+0x78>
 20053e4:	b0ffff04 	addi	r3,r22,-4
 20053e8:	98c0082e 	bgeu	r19,r3,200540c <quorem+0x208>
 20053ec:	b0bfff17 	ldw	r2,-4(r22)
 20053f0:	10000326 	beq	r2,zero,2005400 <quorem+0x1fc>
 20053f4:	00000506 	br	200540c <quorem+0x208>
 20053f8:	18800017 	ldw	r2,0(r3)
 20053fc:	1000031e 	bne	r2,zero,200540c <quorem+0x208>
 2005400:	18ffff04 	addi	r3,r3,-4
 2005404:	8c7fffc4 	addi	r17,r17,-1
 2005408:	98fffb36 	bltu	r19,r3,20053f8 <quorem+0x1f4>
 200540c:	bc400415 	stw	r17,16(r23)
 2005410:	003f9a06 	br	200527c <quorem+0x78>
 2005414:	0005883a 	mov	r2,zero
 2005418:	003fc806 	br	200533c <quorem+0x138>

0200541c <_dtoa_r>:
 200541c:	22001017 	ldw	r8,64(r4)
 2005420:	deffda04 	addi	sp,sp,-152
 2005424:	dd402115 	stw	r21,132(sp)
 2005428:	dd002015 	stw	r20,128(sp)
 200542c:	dc801e15 	stw	r18,120(sp)
 2005430:	dc401d15 	stw	r17,116(sp)
 2005434:	dfc02515 	stw	ra,148(sp)
 2005438:	df002415 	stw	fp,144(sp)
 200543c:	ddc02315 	stw	r23,140(sp)
 2005440:	dd802215 	stw	r22,136(sp)
 2005444:	dcc01f15 	stw	r19,124(sp)
 2005448:	dc001c15 	stw	r16,112(sp)
 200544c:	d9001615 	stw	r4,88(sp)
 2005450:	3023883a 	mov	r17,r6
 2005454:	2829883a 	mov	r20,r5
 2005458:	d9c01715 	stw	r7,92(sp)
 200545c:	dc802817 	ldw	r18,160(sp)
 2005460:	302b883a 	mov	r21,r6
 2005464:	40000a26 	beq	r8,zero,2005490 <_dtoa_r+0x74>
 2005468:	20801117 	ldw	r2,68(r4)
 200546c:	400b883a 	mov	r5,r8
 2005470:	40800115 	stw	r2,4(r8)
 2005474:	20c01117 	ldw	r3,68(r4)
 2005478:	00800044 	movi	r2,1
 200547c:	10c4983a 	sll	r2,r2,r3
 2005480:	40800215 	stw	r2,8(r8)
 2005484:	2007ed80 	call	2007ed8 <_Bfree>
 2005488:	d8c01617 	ldw	r3,88(sp)
 200548c:	18001015 	stw	zero,64(r3)
 2005490:	8800a316 	blt	r17,zero,2005720 <_dtoa_r+0x304>
 2005494:	90000015 	stw	zero,0(r18)
 2005498:	a8dffc2c 	andhi	r3,r21,32752
 200549c:	009ffc34 	movhi	r2,32752
 20054a0:	18809126 	beq	r3,r2,20056e8 <_dtoa_r+0x2cc>
 20054a4:	000d883a 	mov	r6,zero
 20054a8:	000f883a 	mov	r7,zero
 20054ac:	a009883a 	mov	r4,r20
 20054b0:	a80b883a 	mov	r5,r21
 20054b4:	dd001215 	stw	r20,72(sp)
 20054b8:	dd401315 	stw	r21,76(sp)
 20054bc:	200af700 	call	200af70 <__nedf2>
 20054c0:	1000171e 	bne	r2,zero,2005520 <_dtoa_r+0x104>
 20054c4:	d9802717 	ldw	r6,156(sp)
 20054c8:	00800044 	movi	r2,1
 20054cc:	30800015 	stw	r2,0(r6)
 20054d0:	d8802917 	ldw	r2,164(sp)
 20054d4:	10029b26 	beq	r2,zero,2005f44 <_dtoa_r+0xb28>
 20054d8:	d9002917 	ldw	r4,164(sp)
 20054dc:	00808074 	movhi	r2,513
 20054e0:	10bd2244 	addi	r2,r2,-2935
 20054e4:	10ffffc4 	addi	r3,r2,-1
 20054e8:	20800015 	stw	r2,0(r4)
 20054ec:	1805883a 	mov	r2,r3
 20054f0:	dfc02517 	ldw	ra,148(sp)
 20054f4:	df002417 	ldw	fp,144(sp)
 20054f8:	ddc02317 	ldw	r23,140(sp)
 20054fc:	dd802217 	ldw	r22,136(sp)
 2005500:	dd402117 	ldw	r21,132(sp)
 2005504:	dd002017 	ldw	r20,128(sp)
 2005508:	dcc01f17 	ldw	r19,124(sp)
 200550c:	dc801e17 	ldw	r18,120(sp)
 2005510:	dc401d17 	ldw	r17,116(sp)
 2005514:	dc001c17 	ldw	r16,112(sp)
 2005518:	dec02604 	addi	sp,sp,152
 200551c:	f800283a 	ret
 2005520:	d9001617 	ldw	r4,88(sp)
 2005524:	d9401217 	ldw	r5,72(sp)
 2005528:	d8800104 	addi	r2,sp,4
 200552c:	a80d883a 	mov	r6,r21
 2005530:	d9c00204 	addi	r7,sp,8
 2005534:	d8800015 	stw	r2,0(sp)
 2005538:	20085140 	call	2008514 <__d2b>
 200553c:	d8800715 	stw	r2,28(sp)
 2005540:	a804d53a 	srli	r2,r21,20
 2005544:	1101ffcc 	andi	r4,r2,2047
 2005548:	20008626 	beq	r4,zero,2005764 <_dtoa_r+0x348>
 200554c:	d8c01217 	ldw	r3,72(sp)
 2005550:	00800434 	movhi	r2,16
 2005554:	10bfffc4 	addi	r2,r2,-1
 2005558:	ddc00117 	ldw	r23,4(sp)
 200555c:	a884703a 	and	r2,r21,r2
 2005560:	1811883a 	mov	r8,r3
 2005564:	124ffc34 	orhi	r9,r2,16368
 2005568:	25bf0044 	addi	r22,r4,-1023
 200556c:	d8000815 	stw	zero,32(sp)
 2005570:	0005883a 	mov	r2,zero
 2005574:	00cffe34 	movhi	r3,16376
 2005578:	480b883a 	mov	r5,r9
 200557c:	4009883a 	mov	r4,r8
 2005580:	180f883a 	mov	r7,r3
 2005584:	100d883a 	mov	r6,r2
 2005588:	200a7d80 	call	200a7d8 <__subdf3>
 200558c:	0218dbf4 	movhi	r8,25455
 2005590:	4210d844 	addi	r8,r8,17249
 2005594:	024ff4f4 	movhi	r9,16339
 2005598:	4a61e9c4 	addi	r9,r9,-30809
 200559c:	480f883a 	mov	r7,r9
 20055a0:	400d883a 	mov	r6,r8
 20055a4:	180b883a 	mov	r5,r3
 20055a8:	1009883a 	mov	r4,r2
 20055ac:	200a8cc0 	call	200a8cc <__muldf3>
 20055b0:	0222d874 	movhi	r8,35681
 20055b4:	42322cc4 	addi	r8,r8,-14157
 20055b8:	024ff1f4 	movhi	r9,16327
 20055bc:	4a628a04 	addi	r9,r9,-30168
 20055c0:	480f883a 	mov	r7,r9
 20055c4:	400d883a 	mov	r6,r8
 20055c8:	180b883a 	mov	r5,r3
 20055cc:	1009883a 	mov	r4,r2
 20055d0:	200a8580 	call	200a858 <__adddf3>
 20055d4:	b009883a 	mov	r4,r22
 20055d8:	1021883a 	mov	r16,r2
 20055dc:	1823883a 	mov	r17,r3
 20055e0:	2000fa00 	call	2000fa0 <__floatsidf>
 20055e4:	021427f4 	movhi	r8,20639
 20055e8:	421e7ec4 	addi	r8,r8,31227
 20055ec:	024ff4f4 	movhi	r9,16339
 20055f0:	4a5104c4 	addi	r9,r9,17427
 20055f4:	480f883a 	mov	r7,r9
 20055f8:	400d883a 	mov	r6,r8
 20055fc:	180b883a 	mov	r5,r3
 2005600:	1009883a 	mov	r4,r2
 2005604:	200a8cc0 	call	200a8cc <__muldf3>
 2005608:	180f883a 	mov	r7,r3
 200560c:	880b883a 	mov	r5,r17
 2005610:	100d883a 	mov	r6,r2
 2005614:	8009883a 	mov	r4,r16
 2005618:	200a8580 	call	200a858 <__adddf3>
 200561c:	1009883a 	mov	r4,r2
 2005620:	180b883a 	mov	r5,r3
 2005624:	1021883a 	mov	r16,r2
 2005628:	1823883a 	mov	r17,r3
 200562c:	200b1080 	call	200b108 <__fixdfsi>
 2005630:	000d883a 	mov	r6,zero
 2005634:	000f883a 	mov	r7,zero
 2005638:	8009883a 	mov	r4,r16
 200563c:	880b883a 	mov	r5,r17
 2005640:	d8800d15 	stw	r2,52(sp)
 2005644:	2000f180 	call	2000f18 <__ltdf2>
 2005648:	10031716 	blt	r2,zero,20062a8 <_dtoa_r+0xe8c>
 200564c:	d8c00d17 	ldw	r3,52(sp)
 2005650:	00800584 	movi	r2,22
 2005654:	10c1482e 	bgeu	r2,r3,2005b78 <_dtoa_r+0x75c>
 2005658:	01000044 	movi	r4,1
 200565c:	d9000c15 	stw	r4,48(sp)
 2005660:	bd85c83a 	sub	r2,r23,r22
 2005664:	11bfffc4 	addi	r6,r2,-1
 2005668:	30030b16 	blt	r6,zero,2006298 <_dtoa_r+0xe7c>
 200566c:	d9800a15 	stw	r6,40(sp)
 2005670:	d8001115 	stw	zero,68(sp)
 2005674:	d8c00d17 	ldw	r3,52(sp)
 2005678:	1802ff16 	blt	r3,zero,2006278 <_dtoa_r+0xe5c>
 200567c:	d9000a17 	ldw	r4,40(sp)
 2005680:	d8c00915 	stw	r3,36(sp)
 2005684:	d8001015 	stw	zero,64(sp)
 2005688:	20c9883a 	add	r4,r4,r3
 200568c:	d9000a15 	stw	r4,40(sp)
 2005690:	d9001717 	ldw	r4,92(sp)
 2005694:	00800244 	movi	r2,9
 2005698:	11004636 	bltu	r2,r4,20057b4 <_dtoa_r+0x398>
 200569c:	00800144 	movi	r2,5
 20056a0:	11020416 	blt	r2,r4,2005eb4 <_dtoa_r+0xa98>
 20056a4:	04400044 	movi	r17,1
 20056a8:	d8c01717 	ldw	r3,92(sp)
 20056ac:	00800144 	movi	r2,5
 20056b0:	10c1ed36 	bltu	r2,r3,2005e68 <_dtoa_r+0xa4c>
 20056b4:	18c5883a 	add	r2,r3,r3
 20056b8:	1085883a 	add	r2,r2,r2
 20056bc:	00c08034 	movhi	r3,512
 20056c0:	18d5b404 	addi	r3,r3,22224
 20056c4:	10c5883a 	add	r2,r2,r3
 20056c8:	11000017 	ldw	r4,0(r2)
 20056cc:	2000683a 	jmp	r4
 20056d0:	020057bc 	xorhi	r8,zero,350
 20056d4:	020057bc 	xorhi	r8,zero,350
 20056d8:	020061bc 	xorhi	r8,zero,390
 20056dc:	02006194 	movui	r8,390
 20056e0:	020061d8 	cmpnei	r8,zero,391
 20056e4:	020061e4 	muli	r8,zero,391
 20056e8:	d9002717 	ldw	r4,156(sp)
 20056ec:	0089c3c4 	movi	r2,9999
 20056f0:	20800015 	stw	r2,0(r4)
 20056f4:	a0001026 	beq	r20,zero,2005738 <_dtoa_r+0x31c>
 20056f8:	00c08074 	movhi	r3,513
 20056fc:	18fd2e04 	addi	r3,r3,-2888
 2005700:	d9802917 	ldw	r6,164(sp)
 2005704:	303f7926 	beq	r6,zero,20054ec <_dtoa_r+0xd0>
 2005708:	188000c7 	ldb	r2,3(r3)
 200570c:	190000c4 	addi	r4,r3,3
 2005710:	1000101e 	bne	r2,zero,2005754 <_dtoa_r+0x338>
 2005714:	d8802917 	ldw	r2,164(sp)
 2005718:	11000015 	stw	r4,0(r2)
 200571c:	003f7306 	br	20054ec <_dtoa_r+0xd0>
 2005720:	00a00034 	movhi	r2,32768
 2005724:	10bfffc4 	addi	r2,r2,-1
 2005728:	00c00044 	movi	r3,1
 200572c:	88aa703a 	and	r21,r17,r2
 2005730:	90c00015 	stw	r3,0(r18)
 2005734:	003f5806 	br	2005498 <_dtoa_r+0x7c>
 2005738:	00800434 	movhi	r2,16
 200573c:	10bfffc4 	addi	r2,r2,-1
 2005740:	a884703a 	and	r2,r21,r2
 2005744:	103fec1e 	bne	r2,zero,20056f8 <_dtoa_r+0x2dc>
 2005748:	00c08074 	movhi	r3,513
 200574c:	18fd2b04 	addi	r3,r3,-2900
 2005750:	003feb06 	br	2005700 <_dtoa_r+0x2e4>
 2005754:	d8802917 	ldw	r2,164(sp)
 2005758:	19000204 	addi	r4,r3,8
 200575c:	11000015 	stw	r4,0(r2)
 2005760:	003f6206 	br	20054ec <_dtoa_r+0xd0>
 2005764:	ddc00117 	ldw	r23,4(sp)
 2005768:	d8800217 	ldw	r2,8(sp)
 200576c:	01000804 	movi	r4,32
 2005770:	b8c10c84 	addi	r3,r23,1074
 2005774:	18a3883a 	add	r17,r3,r2
 2005778:	2441b80e 	bge	r4,r17,2005e5c <_dtoa_r+0xa40>
 200577c:	00c01004 	movi	r3,64
 2005780:	1c47c83a 	sub	r3,r3,r17
 2005784:	88bff804 	addi	r2,r17,-32
 2005788:	a8c6983a 	sll	r3,r21,r3
 200578c:	a084d83a 	srl	r2,r20,r2
 2005790:	1888b03a 	or	r4,r3,r2
 2005794:	200b1e00 	call	200b1e0 <__floatunsidf>
 2005798:	1011883a 	mov	r8,r2
 200579c:	00bf8434 	movhi	r2,65040
 20057a0:	01000044 	movi	r4,1
 20057a4:	10d3883a 	add	r9,r2,r3
 20057a8:	8dbef344 	addi	r22,r17,-1075
 20057ac:	d9000815 	stw	r4,32(sp)
 20057b0:	003f6f06 	br	2005570 <_dtoa_r+0x154>
 20057b4:	d8001715 	stw	zero,92(sp)
 20057b8:	04400044 	movi	r17,1
 20057bc:	00bfffc4 	movi	r2,-1
 20057c0:	00c00044 	movi	r3,1
 20057c4:	d8800e15 	stw	r2,56(sp)
 20057c8:	d8002615 	stw	zero,152(sp)
 20057cc:	d8800f15 	stw	r2,60(sp)
 20057d0:	d8c00b15 	stw	r3,44(sp)
 20057d4:	1021883a 	mov	r16,r2
 20057d8:	d8801617 	ldw	r2,88(sp)
 20057dc:	10001115 	stw	zero,68(r2)
 20057e0:	d8801617 	ldw	r2,88(sp)
 20057e4:	11401117 	ldw	r5,68(r2)
 20057e8:	1009883a 	mov	r4,r2
 20057ec:	20084580 	call	2008458 <_Balloc>
 20057f0:	d8c01617 	ldw	r3,88(sp)
 20057f4:	d8800515 	stw	r2,20(sp)
 20057f8:	18801015 	stw	r2,64(r3)
 20057fc:	00800384 	movi	r2,14
 2005800:	14006836 	bltu	r2,r16,20059a4 <_dtoa_r+0x588>
 2005804:	8805003a 	cmpeq	r2,r17,zero
 2005808:	1000661e 	bne	r2,zero,20059a4 <_dtoa_r+0x588>
 200580c:	d9000d17 	ldw	r4,52(sp)
 2005810:	0102300e 	bge	zero,r4,20060d4 <_dtoa_r+0xcb8>
 2005814:	208003cc 	andi	r2,r4,15
 2005818:	100490fa 	slli	r2,r2,3
 200581c:	2025d13a 	srai	r18,r4,4
 2005820:	00c08074 	movhi	r3,513
 2005824:	18fd3f04 	addi	r3,r3,-2820
 2005828:	10c5883a 	add	r2,r2,r3
 200582c:	90c0040c 	andi	r3,r18,16
 2005830:	14000017 	ldw	r16,0(r2)
 2005834:	14400117 	ldw	r17,4(r2)
 2005838:	18036a1e 	bne	r3,zero,20065e4 <_dtoa_r+0x11c8>
 200583c:	05800084 	movi	r22,2
 2005840:	90001026 	beq	r18,zero,2005884 <_dtoa_r+0x468>
 2005844:	04c08074 	movhi	r19,513
 2005848:	9cfd7104 	addi	r19,r19,-2620
 200584c:	9080004c 	andi	r2,r18,1
 2005850:	1005003a 	cmpeq	r2,r2,zero
 2005854:	1000081e 	bne	r2,zero,2005878 <_dtoa_r+0x45c>
 2005858:	99800017 	ldw	r6,0(r19)
 200585c:	99c00117 	ldw	r7,4(r19)
 2005860:	880b883a 	mov	r5,r17
 2005864:	8009883a 	mov	r4,r16
 2005868:	200a8cc0 	call	200a8cc <__muldf3>
 200586c:	1021883a 	mov	r16,r2
 2005870:	b5800044 	addi	r22,r22,1
 2005874:	1823883a 	mov	r17,r3
 2005878:	9025d07a 	srai	r18,r18,1
 200587c:	9cc00204 	addi	r19,r19,8
 2005880:	903ff21e 	bne	r18,zero,200584c <_dtoa_r+0x430>
 2005884:	a80b883a 	mov	r5,r21
 2005888:	a009883a 	mov	r4,r20
 200588c:	880f883a 	mov	r7,r17
 2005890:	800d883a 	mov	r6,r16
 2005894:	200ac900 	call	200ac90 <__divdf3>
 2005898:	1029883a 	mov	r20,r2
 200589c:	182b883a 	mov	r21,r3
 20058a0:	d8c00c17 	ldw	r3,48(sp)
 20058a4:	1805003a 	cmpeq	r2,r3,zero
 20058a8:	1000081e 	bne	r2,zero,20058cc <_dtoa_r+0x4b0>
 20058ac:	0005883a 	mov	r2,zero
 20058b0:	00cffc34 	movhi	r3,16368
 20058b4:	180f883a 	mov	r7,r3
 20058b8:	a009883a 	mov	r4,r20
 20058bc:	a80b883a 	mov	r5,r21
 20058c0:	100d883a 	mov	r6,r2
 20058c4:	2000f180 	call	2000f18 <__ltdf2>
 20058c8:	1003fe16 	blt	r2,zero,20068c4 <_dtoa_r+0x14a8>
 20058cc:	b009883a 	mov	r4,r22
 20058d0:	2000fa00 	call	2000fa0 <__floatsidf>
 20058d4:	180b883a 	mov	r5,r3
 20058d8:	1009883a 	mov	r4,r2
 20058dc:	a00d883a 	mov	r6,r20
 20058e0:	a80f883a 	mov	r7,r21
 20058e4:	200a8cc0 	call	200a8cc <__muldf3>
 20058e8:	0011883a 	mov	r8,zero
 20058ec:	02500734 	movhi	r9,16412
 20058f0:	1009883a 	mov	r4,r2
 20058f4:	180b883a 	mov	r5,r3
 20058f8:	480f883a 	mov	r7,r9
 20058fc:	400d883a 	mov	r6,r8
 2005900:	200a8580 	call	200a858 <__adddf3>
 2005904:	d9000f17 	ldw	r4,60(sp)
 2005908:	102d883a 	mov	r22,r2
 200590c:	00bf3034 	movhi	r2,64704
 2005910:	18b9883a 	add	fp,r3,r2
 2005914:	e02f883a 	mov	r23,fp
 2005918:	20028f1e 	bne	r4,zero,2006358 <_dtoa_r+0xf3c>
 200591c:	0005883a 	mov	r2,zero
 2005920:	00d00534 	movhi	r3,16404
 2005924:	a009883a 	mov	r4,r20
 2005928:	a80b883a 	mov	r5,r21
 200592c:	180f883a 	mov	r7,r3
 2005930:	100d883a 	mov	r6,r2
 2005934:	200a7d80 	call	200a7d8 <__subdf3>
 2005938:	1009883a 	mov	r4,r2
 200593c:	e00f883a 	mov	r7,fp
 2005940:	180b883a 	mov	r5,r3
 2005944:	b00d883a 	mov	r6,r22
 2005948:	1025883a 	mov	r18,r2
 200594c:	1827883a 	mov	r19,r3
 2005950:	200aff80 	call	200aff8 <__gtdf2>
 2005954:	00834f16 	blt	zero,r2,2006694 <_dtoa_r+0x1278>
 2005958:	e0e0003c 	xorhi	r3,fp,32768
 200595c:	9009883a 	mov	r4,r18
 2005960:	980b883a 	mov	r5,r19
 2005964:	180f883a 	mov	r7,r3
 2005968:	b00d883a 	mov	r6,r22
 200596c:	2000f180 	call	2000f18 <__ltdf2>
 2005970:	1000080e 	bge	r2,zero,2005994 <_dtoa_r+0x578>
 2005974:	0027883a 	mov	r19,zero
 2005978:	0025883a 	mov	r18,zero
 200597c:	d8802617 	ldw	r2,152(sp)
 2005980:	df000517 	ldw	fp,20(sp)
 2005984:	d8000615 	stw	zero,24(sp)
 2005988:	0084303a 	nor	r2,zero,r2
 200598c:	d8800d15 	stw	r2,52(sp)
 2005990:	00019b06 	br	2006000 <_dtoa_r+0xbe4>
 2005994:	d9801217 	ldw	r6,72(sp)
 2005998:	d8801317 	ldw	r2,76(sp)
 200599c:	3029883a 	mov	r20,r6
 20059a0:	102b883a 	mov	r21,r2
 20059a4:	d8c00217 	ldw	r3,8(sp)
 20059a8:	18008516 	blt	r3,zero,2005bc0 <_dtoa_r+0x7a4>
 20059ac:	d9000d17 	ldw	r4,52(sp)
 20059b0:	00800384 	movi	r2,14
 20059b4:	11008216 	blt	r2,r4,2005bc0 <_dtoa_r+0x7a4>
 20059b8:	200490fa 	slli	r2,r4,3
 20059bc:	d9802617 	ldw	r6,152(sp)
 20059c0:	00c08074 	movhi	r3,513
 20059c4:	18fd3f04 	addi	r3,r3,-2820
 20059c8:	10c5883a 	add	r2,r2,r3
 20059cc:	14800017 	ldw	r18,0(r2)
 20059d0:	14c00117 	ldw	r19,4(r2)
 20059d4:	30031e16 	blt	r6,zero,2006650 <_dtoa_r+0x1234>
 20059d8:	d9000517 	ldw	r4,20(sp)
 20059dc:	d8c00f17 	ldw	r3,60(sp)
 20059e0:	a823883a 	mov	r17,r21
 20059e4:	a021883a 	mov	r16,r20
 20059e8:	192b883a 	add	r21,r3,r4
 20059ec:	2039883a 	mov	fp,r4
 20059f0:	00000f06 	br	2005a30 <_dtoa_r+0x614>
 20059f4:	0005883a 	mov	r2,zero
 20059f8:	00d00934 	movhi	r3,16420
 20059fc:	5009883a 	mov	r4,r10
 2005a00:	580b883a 	mov	r5,r11
 2005a04:	180f883a 	mov	r7,r3
 2005a08:	100d883a 	mov	r6,r2
 2005a0c:	200a8cc0 	call	200a8cc <__muldf3>
 2005a10:	180b883a 	mov	r5,r3
 2005a14:	000d883a 	mov	r6,zero
 2005a18:	000f883a 	mov	r7,zero
 2005a1c:	1009883a 	mov	r4,r2
 2005a20:	1021883a 	mov	r16,r2
 2005a24:	1823883a 	mov	r17,r3
 2005a28:	200af700 	call	200af70 <__nedf2>
 2005a2c:	10004526 	beq	r2,zero,2005b44 <_dtoa_r+0x728>
 2005a30:	900d883a 	mov	r6,r18
 2005a34:	980f883a 	mov	r7,r19
 2005a38:	8009883a 	mov	r4,r16
 2005a3c:	880b883a 	mov	r5,r17
 2005a40:	200ac900 	call	200ac90 <__divdf3>
 2005a44:	180b883a 	mov	r5,r3
 2005a48:	1009883a 	mov	r4,r2
 2005a4c:	200b1080 	call	200b108 <__fixdfsi>
 2005a50:	1009883a 	mov	r4,r2
 2005a54:	1029883a 	mov	r20,r2
 2005a58:	2000fa00 	call	2000fa0 <__floatsidf>
 2005a5c:	180f883a 	mov	r7,r3
 2005a60:	9009883a 	mov	r4,r18
 2005a64:	980b883a 	mov	r5,r19
 2005a68:	100d883a 	mov	r6,r2
 2005a6c:	200a8cc0 	call	200a8cc <__muldf3>
 2005a70:	180f883a 	mov	r7,r3
 2005a74:	880b883a 	mov	r5,r17
 2005a78:	8009883a 	mov	r4,r16
 2005a7c:	100d883a 	mov	r6,r2
 2005a80:	200a7d80 	call	200a7d8 <__subdf3>
 2005a84:	1015883a 	mov	r10,r2
 2005a88:	a0800c04 	addi	r2,r20,48
 2005a8c:	e0800005 	stb	r2,0(fp)
 2005a90:	e7000044 	addi	fp,fp,1
 2005a94:	1817883a 	mov	r11,r3
 2005a98:	e57fd61e 	bne	fp,r21,20059f4 <_dtoa_r+0x5d8>
 2005a9c:	500d883a 	mov	r6,r10
 2005aa0:	180f883a 	mov	r7,r3
 2005aa4:	5009883a 	mov	r4,r10
 2005aa8:	180b883a 	mov	r5,r3
 2005aac:	200a8580 	call	200a858 <__adddf3>
 2005ab0:	100d883a 	mov	r6,r2
 2005ab4:	9009883a 	mov	r4,r18
 2005ab8:	980b883a 	mov	r5,r19
 2005abc:	180f883a 	mov	r7,r3
 2005ac0:	1021883a 	mov	r16,r2
 2005ac4:	1823883a 	mov	r17,r3
 2005ac8:	2000f180 	call	2000f18 <__ltdf2>
 2005acc:	10000816 	blt	r2,zero,2005af0 <_dtoa_r+0x6d4>
 2005ad0:	980b883a 	mov	r5,r19
 2005ad4:	800d883a 	mov	r6,r16
 2005ad8:	880f883a 	mov	r7,r17
 2005adc:	9009883a 	mov	r4,r18
 2005ae0:	200aee80 	call	200aee8 <__eqdf2>
 2005ae4:	1000171e 	bne	r2,zero,2005b44 <_dtoa_r+0x728>
 2005ae8:	a080004c 	andi	r2,r20,1
 2005aec:	10001526 	beq	r2,zero,2005b44 <_dtoa_r+0x728>
 2005af0:	d8800d17 	ldw	r2,52(sp)
 2005af4:	d8800415 	stw	r2,16(sp)
 2005af8:	e009883a 	mov	r4,fp
 2005afc:	213fffc4 	addi	r4,r4,-1
 2005b00:	20c00007 	ldb	r3,0(r4)
 2005b04:	00800e44 	movi	r2,57
 2005b08:	1880081e 	bne	r3,r2,2005b2c <_dtoa_r+0x710>
 2005b0c:	d8800517 	ldw	r2,20(sp)
 2005b10:	113ffa1e 	bne	r2,r4,2005afc <_dtoa_r+0x6e0>
 2005b14:	d8c00417 	ldw	r3,16(sp)
 2005b18:	d9800517 	ldw	r6,20(sp)
 2005b1c:	00800c04 	movi	r2,48
 2005b20:	18c00044 	addi	r3,r3,1
 2005b24:	d8c00415 	stw	r3,16(sp)
 2005b28:	30800005 	stb	r2,0(r6)
 2005b2c:	20800003 	ldbu	r2,0(r4)
 2005b30:	d8c00417 	ldw	r3,16(sp)
 2005b34:	27000044 	addi	fp,r4,1
 2005b38:	10800044 	addi	r2,r2,1
 2005b3c:	d8c00d15 	stw	r3,52(sp)
 2005b40:	20800005 	stb	r2,0(r4)
 2005b44:	d9001617 	ldw	r4,88(sp)
 2005b48:	d9400717 	ldw	r5,28(sp)
 2005b4c:	2007ed80 	call	2007ed8 <_Bfree>
 2005b50:	e0000005 	stb	zero,0(fp)
 2005b54:	d9800d17 	ldw	r6,52(sp)
 2005b58:	d8c02717 	ldw	r3,156(sp)
 2005b5c:	d9002917 	ldw	r4,164(sp)
 2005b60:	30800044 	addi	r2,r6,1
 2005b64:	18800015 	stw	r2,0(r3)
 2005b68:	20029c26 	beq	r4,zero,20065dc <_dtoa_r+0x11c0>
 2005b6c:	d8c00517 	ldw	r3,20(sp)
 2005b70:	27000015 	stw	fp,0(r4)
 2005b74:	003e5d06 	br	20054ec <_dtoa_r+0xd0>
 2005b78:	d9800d17 	ldw	r6,52(sp)
 2005b7c:	00c08074 	movhi	r3,513
 2005b80:	18fd3f04 	addi	r3,r3,-2820
 2005b84:	d9001217 	ldw	r4,72(sp)
 2005b88:	300490fa 	slli	r2,r6,3
 2005b8c:	d9401317 	ldw	r5,76(sp)
 2005b90:	10c5883a 	add	r2,r2,r3
 2005b94:	12000017 	ldw	r8,0(r2)
 2005b98:	12400117 	ldw	r9,4(r2)
 2005b9c:	400d883a 	mov	r6,r8
 2005ba0:	480f883a 	mov	r7,r9
 2005ba4:	2000f180 	call	2000f18 <__ltdf2>
 2005ba8:	1000030e 	bge	r2,zero,2005bb8 <_dtoa_r+0x79c>
 2005bac:	d8800d17 	ldw	r2,52(sp)
 2005bb0:	10bfffc4 	addi	r2,r2,-1
 2005bb4:	d8800d15 	stw	r2,52(sp)
 2005bb8:	d8000c15 	stw	zero,48(sp)
 2005bbc:	003ea806 	br	2005660 <_dtoa_r+0x244>
 2005bc0:	d9000b17 	ldw	r4,44(sp)
 2005bc4:	202cc03a 	cmpne	r22,r4,zero
 2005bc8:	b000c71e 	bne	r22,zero,2005ee8 <_dtoa_r+0xacc>
 2005bcc:	dc001117 	ldw	r16,68(sp)
 2005bd0:	dc801017 	ldw	r18,64(sp)
 2005bd4:	0027883a 	mov	r19,zero
 2005bd8:	04000b0e 	bge	zero,r16,2005c08 <_dtoa_r+0x7ec>
 2005bdc:	d8c00a17 	ldw	r3,40(sp)
 2005be0:	00c0090e 	bge	zero,r3,2005c08 <_dtoa_r+0x7ec>
 2005be4:	8005883a 	mov	r2,r16
 2005be8:	1c011316 	blt	r3,r16,2006038 <_dtoa_r+0xc1c>
 2005bec:	d9000a17 	ldw	r4,40(sp)
 2005bf0:	d9801117 	ldw	r6,68(sp)
 2005bf4:	80a1c83a 	sub	r16,r16,r2
 2005bf8:	2089c83a 	sub	r4,r4,r2
 2005bfc:	308dc83a 	sub	r6,r6,r2
 2005c00:	d9000a15 	stw	r4,40(sp)
 2005c04:	d9801115 	stw	r6,68(sp)
 2005c08:	d8801017 	ldw	r2,64(sp)
 2005c0c:	0080150e 	bge	zero,r2,2005c64 <_dtoa_r+0x848>
 2005c10:	d8c00b17 	ldw	r3,44(sp)
 2005c14:	1805003a 	cmpeq	r2,r3,zero
 2005c18:	1001c91e 	bne	r2,zero,2006340 <_dtoa_r+0xf24>
 2005c1c:	04800e0e 	bge	zero,r18,2005c58 <_dtoa_r+0x83c>
 2005c20:	d9001617 	ldw	r4,88(sp)
 2005c24:	980b883a 	mov	r5,r19
 2005c28:	900d883a 	mov	r6,r18
 2005c2c:	2008c8c0 	call	2008c8c <__pow5mult>
 2005c30:	d9001617 	ldw	r4,88(sp)
 2005c34:	d9800717 	ldw	r6,28(sp)
 2005c38:	100b883a 	mov	r5,r2
 2005c3c:	1027883a 	mov	r19,r2
 2005c40:	20089680 	call	2008968 <__multiply>
 2005c44:	d9001617 	ldw	r4,88(sp)
 2005c48:	d9400717 	ldw	r5,28(sp)
 2005c4c:	1023883a 	mov	r17,r2
 2005c50:	2007ed80 	call	2007ed8 <_Bfree>
 2005c54:	dc400715 	stw	r17,28(sp)
 2005c58:	d9001017 	ldw	r4,64(sp)
 2005c5c:	248dc83a 	sub	r6,r4,r18
 2005c60:	30010e1e 	bne	r6,zero,200609c <_dtoa_r+0xc80>
 2005c64:	d9001617 	ldw	r4,88(sp)
 2005c68:	04400044 	movi	r17,1
 2005c6c:	880b883a 	mov	r5,r17
 2005c70:	2008b500 	call	2008b50 <__i2b>
 2005c74:	d9800917 	ldw	r6,36(sp)
 2005c78:	1025883a 	mov	r18,r2
 2005c7c:	0180040e 	bge	zero,r6,2005c90 <_dtoa_r+0x874>
 2005c80:	d9001617 	ldw	r4,88(sp)
 2005c84:	100b883a 	mov	r5,r2
 2005c88:	2008c8c0 	call	2008c8c <__pow5mult>
 2005c8c:	1025883a 	mov	r18,r2
 2005c90:	d8801717 	ldw	r2,92(sp)
 2005c94:	8880f30e 	bge	r17,r2,2006064 <_dtoa_r+0xc48>
 2005c98:	0023883a 	mov	r17,zero
 2005c9c:	d9800917 	ldw	r6,36(sp)
 2005ca0:	30019e1e 	bne	r6,zero,200631c <_dtoa_r+0xf00>
 2005ca4:	00c00044 	movi	r3,1
 2005ca8:	d9000a17 	ldw	r4,40(sp)
 2005cac:	20c5883a 	add	r2,r4,r3
 2005cb0:	10c007cc 	andi	r3,r2,31
 2005cb4:	1800841e 	bne	r3,zero,2005ec8 <_dtoa_r+0xaac>
 2005cb8:	00800704 	movi	r2,28
 2005cbc:	d9000a17 	ldw	r4,40(sp)
 2005cc0:	d9801117 	ldw	r6,68(sp)
 2005cc4:	80a1883a 	add	r16,r16,r2
 2005cc8:	2089883a 	add	r4,r4,r2
 2005ccc:	308d883a 	add	r6,r6,r2
 2005cd0:	d9000a15 	stw	r4,40(sp)
 2005cd4:	d9801115 	stw	r6,68(sp)
 2005cd8:	d8801117 	ldw	r2,68(sp)
 2005cdc:	0080050e 	bge	zero,r2,2005cf4 <_dtoa_r+0x8d8>
 2005ce0:	d9400717 	ldw	r5,28(sp)
 2005ce4:	d9001617 	ldw	r4,88(sp)
 2005ce8:	100d883a 	mov	r6,r2
 2005cec:	200881c0 	call	200881c <__lshift>
 2005cf0:	d8800715 	stw	r2,28(sp)
 2005cf4:	d8c00a17 	ldw	r3,40(sp)
 2005cf8:	00c0050e 	bge	zero,r3,2005d10 <_dtoa_r+0x8f4>
 2005cfc:	d9001617 	ldw	r4,88(sp)
 2005d00:	900b883a 	mov	r5,r18
 2005d04:	180d883a 	mov	r6,r3
 2005d08:	200881c0 	call	200881c <__lshift>
 2005d0c:	1025883a 	mov	r18,r2
 2005d10:	d9000c17 	ldw	r4,48(sp)
 2005d14:	2005003a 	cmpeq	r2,r4,zero
 2005d18:	10016f26 	beq	r2,zero,20062d8 <_dtoa_r+0xebc>
 2005d1c:	d9000f17 	ldw	r4,60(sp)
 2005d20:	0102170e 	bge	zero,r4,2006580 <_dtoa_r+0x1164>
 2005d24:	d9800b17 	ldw	r6,44(sp)
 2005d28:	3005003a 	cmpeq	r2,r6,zero
 2005d2c:	1000881e 	bne	r2,zero,2005f50 <_dtoa_r+0xb34>
 2005d30:	0400050e 	bge	zero,r16,2005d48 <_dtoa_r+0x92c>
 2005d34:	d9001617 	ldw	r4,88(sp)
 2005d38:	980b883a 	mov	r5,r19
 2005d3c:	800d883a 	mov	r6,r16
 2005d40:	200881c0 	call	200881c <__lshift>
 2005d44:	1027883a 	mov	r19,r2
 2005d48:	8804c03a 	cmpne	r2,r17,zero
 2005d4c:	1002541e 	bne	r2,zero,20066a0 <_dtoa_r+0x1284>
 2005d50:	980b883a 	mov	r5,r19
 2005d54:	dd800517 	ldw	r22,20(sp)
 2005d58:	dcc00615 	stw	r19,24(sp)
 2005d5c:	a700004c 	andi	fp,r20,1
 2005d60:	2827883a 	mov	r19,r5
 2005d64:	d9000717 	ldw	r4,28(sp)
 2005d68:	900b883a 	mov	r5,r18
 2005d6c:	20052040 	call	2005204 <quorem>
 2005d70:	d9000717 	ldw	r4,28(sp)
 2005d74:	d9400617 	ldw	r5,24(sp)
 2005d78:	1023883a 	mov	r17,r2
 2005d7c:	8dc00c04 	addi	r23,r17,48
 2005d80:	20080340 	call	2008034 <__mcmp>
 2005d84:	d9001617 	ldw	r4,88(sp)
 2005d88:	900b883a 	mov	r5,r18
 2005d8c:	980d883a 	mov	r6,r19
 2005d90:	1029883a 	mov	r20,r2
 2005d94:	20086900 	call	2008690 <__mdiff>
 2005d98:	102b883a 	mov	r21,r2
 2005d9c:	10800317 	ldw	r2,12(r2)
 2005da0:	1001281e 	bne	r2,zero,2006244 <_dtoa_r+0xe28>
 2005da4:	d9000717 	ldw	r4,28(sp)
 2005da8:	a80b883a 	mov	r5,r21
 2005dac:	20080340 	call	2008034 <__mcmp>
 2005db0:	d9001617 	ldw	r4,88(sp)
 2005db4:	1021883a 	mov	r16,r2
 2005db8:	a80b883a 	mov	r5,r21
 2005dbc:	2007ed80 	call	2007ed8 <_Bfree>
 2005dc0:	8000041e 	bne	r16,zero,2005dd4 <_dtoa_r+0x9b8>
 2005dc4:	d8801717 	ldw	r2,92(sp)
 2005dc8:	1000021e 	bne	r2,zero,2005dd4 <_dtoa_r+0x9b8>
 2005dcc:	e004c03a 	cmpne	r2,fp,zero
 2005dd0:	10011726 	beq	r2,zero,2006230 <_dtoa_r+0xe14>
 2005dd4:	a0010616 	blt	r20,zero,20061f0 <_dtoa_r+0xdd4>
 2005dd8:	a000041e 	bne	r20,zero,2005dec <_dtoa_r+0x9d0>
 2005ddc:	d8c01717 	ldw	r3,92(sp)
 2005de0:	1800021e 	bne	r3,zero,2005dec <_dtoa_r+0x9d0>
 2005de4:	e004c03a 	cmpne	r2,fp,zero
 2005de8:	10010126 	beq	r2,zero,20061f0 <_dtoa_r+0xdd4>
 2005dec:	04023d16 	blt	zero,r16,20066e4 <_dtoa_r+0x12c8>
 2005df0:	b5c00005 	stb	r23,0(r22)
 2005df4:	d9800517 	ldw	r6,20(sp)
 2005df8:	d9000f17 	ldw	r4,60(sp)
 2005dfc:	b5800044 	addi	r22,r22,1
 2005e00:	3105883a 	add	r2,r6,r4
 2005e04:	b0806526 	beq	r22,r2,2005f9c <_dtoa_r+0xb80>
 2005e08:	d9400717 	ldw	r5,28(sp)
 2005e0c:	d9001617 	ldw	r4,88(sp)
 2005e10:	01800284 	movi	r6,10
 2005e14:	000f883a 	mov	r7,zero
 2005e18:	2008b8c0 	call	2008b8c <__multadd>
 2005e1c:	d8800715 	stw	r2,28(sp)
 2005e20:	d8800617 	ldw	r2,24(sp)
 2005e24:	14c10c26 	beq	r2,r19,2006258 <_dtoa_r+0xe3c>
 2005e28:	d9400617 	ldw	r5,24(sp)
 2005e2c:	d9001617 	ldw	r4,88(sp)
 2005e30:	01800284 	movi	r6,10
 2005e34:	000f883a 	mov	r7,zero
 2005e38:	2008b8c0 	call	2008b8c <__multadd>
 2005e3c:	d9001617 	ldw	r4,88(sp)
 2005e40:	980b883a 	mov	r5,r19
 2005e44:	01800284 	movi	r6,10
 2005e48:	000f883a 	mov	r7,zero
 2005e4c:	d8800615 	stw	r2,24(sp)
 2005e50:	2008b8c0 	call	2008b8c <__multadd>
 2005e54:	1027883a 	mov	r19,r2
 2005e58:	003fc206 	br	2005d64 <_dtoa_r+0x948>
 2005e5c:	2445c83a 	sub	r2,r4,r17
 2005e60:	a088983a 	sll	r4,r20,r2
 2005e64:	003e4b06 	br	2005794 <_dtoa_r+0x378>
 2005e68:	01bfffc4 	movi	r6,-1
 2005e6c:	00800044 	movi	r2,1
 2005e70:	d9800e15 	stw	r6,56(sp)
 2005e74:	d9800f15 	stw	r6,60(sp)
 2005e78:	d8800b15 	stw	r2,44(sp)
 2005e7c:	d8c01617 	ldw	r3,88(sp)
 2005e80:	008005c4 	movi	r2,23
 2005e84:	18001115 	stw	zero,68(r3)
 2005e88:	1580082e 	bgeu	r2,r22,2005eac <_dtoa_r+0xa90>
 2005e8c:	00c00104 	movi	r3,4
 2005e90:	0009883a 	mov	r4,zero
 2005e94:	18c7883a 	add	r3,r3,r3
 2005e98:	18800504 	addi	r2,r3,20
 2005e9c:	21000044 	addi	r4,r4,1
 2005ea0:	b0bffc2e 	bgeu	r22,r2,2005e94 <_dtoa_r+0xa78>
 2005ea4:	d9801617 	ldw	r6,88(sp)
 2005ea8:	31001115 	stw	r4,68(r6)
 2005eac:	dc000f17 	ldw	r16,60(sp)
 2005eb0:	003e4b06 	br	20057e0 <_dtoa_r+0x3c4>
 2005eb4:	d9801717 	ldw	r6,92(sp)
 2005eb8:	0023883a 	mov	r17,zero
 2005ebc:	31bfff04 	addi	r6,r6,-4
 2005ec0:	d9801715 	stw	r6,92(sp)
 2005ec4:	003df806 	br	20056a8 <_dtoa_r+0x28c>
 2005ec8:	00800804 	movi	r2,32
 2005ecc:	10c9c83a 	sub	r4,r2,r3
 2005ed0:	00c00104 	movi	r3,4
 2005ed4:	19005a16 	blt	r3,r4,2006040 <_dtoa_r+0xc24>
 2005ed8:	008000c4 	movi	r2,3
 2005edc:	113f7e16 	blt	r2,r4,2005cd8 <_dtoa_r+0x8bc>
 2005ee0:	20800704 	addi	r2,r4,28
 2005ee4:	003f7506 	br	2005cbc <_dtoa_r+0x8a0>
 2005ee8:	d9801717 	ldw	r6,92(sp)
 2005eec:	00800044 	movi	r2,1
 2005ef0:	1180a10e 	bge	r2,r6,2006178 <_dtoa_r+0xd5c>
 2005ef4:	d9800f17 	ldw	r6,60(sp)
 2005ef8:	d8c01017 	ldw	r3,64(sp)
 2005efc:	30bfffc4 	addi	r2,r6,-1
 2005f00:	1881c616 	blt	r3,r2,200661c <_dtoa_r+0x1200>
 2005f04:	18a5c83a 	sub	r18,r3,r2
 2005f08:	d8800f17 	ldw	r2,60(sp)
 2005f0c:	10026216 	blt	r2,zero,2006898 <_dtoa_r+0x147c>
 2005f10:	dc001117 	ldw	r16,68(sp)
 2005f14:	1007883a 	mov	r3,r2
 2005f18:	d9800a17 	ldw	r6,40(sp)
 2005f1c:	d8801117 	ldw	r2,68(sp)
 2005f20:	d9001617 	ldw	r4,88(sp)
 2005f24:	30cd883a 	add	r6,r6,r3
 2005f28:	10c5883a 	add	r2,r2,r3
 2005f2c:	01400044 	movi	r5,1
 2005f30:	d9800a15 	stw	r6,40(sp)
 2005f34:	d8801115 	stw	r2,68(sp)
 2005f38:	2008b500 	call	2008b50 <__i2b>
 2005f3c:	1027883a 	mov	r19,r2
 2005f40:	003f2506 	br	2005bd8 <_dtoa_r+0x7bc>
 2005f44:	00c08074 	movhi	r3,513
 2005f48:	18fd2204 	addi	r3,r3,-2936
 2005f4c:	003d6706 	br	20054ec <_dtoa_r+0xd0>
 2005f50:	dd800517 	ldw	r22,20(sp)
 2005f54:	04000044 	movi	r16,1
 2005f58:	00000706 	br	2005f78 <_dtoa_r+0xb5c>
 2005f5c:	d9400717 	ldw	r5,28(sp)
 2005f60:	d9001617 	ldw	r4,88(sp)
 2005f64:	01800284 	movi	r6,10
 2005f68:	000f883a 	mov	r7,zero
 2005f6c:	2008b8c0 	call	2008b8c <__multadd>
 2005f70:	d8800715 	stw	r2,28(sp)
 2005f74:	84000044 	addi	r16,r16,1
 2005f78:	d9000717 	ldw	r4,28(sp)
 2005f7c:	900b883a 	mov	r5,r18
 2005f80:	20052040 	call	2005204 <quorem>
 2005f84:	15c00c04 	addi	r23,r2,48
 2005f88:	b5c00005 	stb	r23,0(r22)
 2005f8c:	d8c00f17 	ldw	r3,60(sp)
 2005f90:	b5800044 	addi	r22,r22,1
 2005f94:	80fff116 	blt	r16,r3,2005f5c <_dtoa_r+0xb40>
 2005f98:	d8000615 	stw	zero,24(sp)
 2005f9c:	d9400717 	ldw	r5,28(sp)
 2005fa0:	d9001617 	ldw	r4,88(sp)
 2005fa4:	01800044 	movi	r6,1
 2005fa8:	200881c0 	call	200881c <__lshift>
 2005fac:	1009883a 	mov	r4,r2
 2005fb0:	900b883a 	mov	r5,r18
 2005fb4:	d8800715 	stw	r2,28(sp)
 2005fb8:	20080340 	call	2008034 <__mcmp>
 2005fbc:	00803c0e 	bge	zero,r2,20060b0 <_dtoa_r+0xc94>
 2005fc0:	b009883a 	mov	r4,r22
 2005fc4:	213fffc4 	addi	r4,r4,-1
 2005fc8:	21400003 	ldbu	r5,0(r4)
 2005fcc:	00800e44 	movi	r2,57
 2005fd0:	28c03fcc 	andi	r3,r5,255
 2005fd4:	18c0201c 	xori	r3,r3,128
 2005fd8:	18ffe004 	addi	r3,r3,-128
 2005fdc:	1881981e 	bne	r3,r2,2006640 <_dtoa_r+0x1224>
 2005fe0:	d9800517 	ldw	r6,20(sp)
 2005fe4:	21bff71e 	bne	r4,r6,2005fc4 <_dtoa_r+0xba8>
 2005fe8:	d8800d17 	ldw	r2,52(sp)
 2005fec:	37000044 	addi	fp,r6,1
 2005ff0:	10800044 	addi	r2,r2,1
 2005ff4:	d8800d15 	stw	r2,52(sp)
 2005ff8:	00800c44 	movi	r2,49
 2005ffc:	30800005 	stb	r2,0(r6)
 2006000:	d9001617 	ldw	r4,88(sp)
 2006004:	900b883a 	mov	r5,r18
 2006008:	2007ed80 	call	2007ed8 <_Bfree>
 200600c:	983ecd26 	beq	r19,zero,2005b44 <_dtoa_r+0x728>
 2006010:	d8c00617 	ldw	r3,24(sp)
 2006014:	18000426 	beq	r3,zero,2006028 <_dtoa_r+0xc0c>
 2006018:	1cc00326 	beq	r3,r19,2006028 <_dtoa_r+0xc0c>
 200601c:	d9001617 	ldw	r4,88(sp)
 2006020:	180b883a 	mov	r5,r3
 2006024:	2007ed80 	call	2007ed8 <_Bfree>
 2006028:	d9001617 	ldw	r4,88(sp)
 200602c:	980b883a 	mov	r5,r19
 2006030:	2007ed80 	call	2007ed8 <_Bfree>
 2006034:	003ec306 	br	2005b44 <_dtoa_r+0x728>
 2006038:	1805883a 	mov	r2,r3
 200603c:	003eeb06 	br	2005bec <_dtoa_r+0x7d0>
 2006040:	d9800a17 	ldw	r6,40(sp)
 2006044:	d8c01117 	ldw	r3,68(sp)
 2006048:	20bfff04 	addi	r2,r4,-4
 200604c:	308d883a 	add	r6,r6,r2
 2006050:	1887883a 	add	r3,r3,r2
 2006054:	80a1883a 	add	r16,r16,r2
 2006058:	d9800a15 	stw	r6,40(sp)
 200605c:	d8c01115 	stw	r3,68(sp)
 2006060:	003f1d06 	br	2005cd8 <_dtoa_r+0x8bc>
 2006064:	a03f0c1e 	bne	r20,zero,2005c98 <_dtoa_r+0x87c>
 2006068:	00800434 	movhi	r2,16
 200606c:	10bfffc4 	addi	r2,r2,-1
 2006070:	a884703a 	and	r2,r21,r2
 2006074:	103f081e 	bne	r2,zero,2005c98 <_dtoa_r+0x87c>
 2006078:	a89ffc2c 	andhi	r2,r21,32752
 200607c:	103f0626 	beq	r2,zero,2005c98 <_dtoa_r+0x87c>
 2006080:	d8c01117 	ldw	r3,68(sp)
 2006084:	d9000a17 	ldw	r4,40(sp)
 2006088:	18c00044 	addi	r3,r3,1
 200608c:	21000044 	addi	r4,r4,1
 2006090:	d8c01115 	stw	r3,68(sp)
 2006094:	d9000a15 	stw	r4,40(sp)
 2006098:	003f0006 	br	2005c9c <_dtoa_r+0x880>
 200609c:	d9400717 	ldw	r5,28(sp)
 20060a0:	d9001617 	ldw	r4,88(sp)
 20060a4:	2008c8c0 	call	2008c8c <__pow5mult>
 20060a8:	d8800715 	stw	r2,28(sp)
 20060ac:	003eed06 	br	2005c64 <_dtoa_r+0x848>
 20060b0:	1000021e 	bne	r2,zero,20060bc <_dtoa_r+0xca0>
 20060b4:	b880004c 	andi	r2,r23,1
 20060b8:	103fc11e 	bne	r2,zero,2005fc0 <_dtoa_r+0xba4>
 20060bc:	b5bfffc4 	addi	r22,r22,-1
 20060c0:	b0c00007 	ldb	r3,0(r22)
 20060c4:	00800c04 	movi	r2,48
 20060c8:	18bffc26 	beq	r3,r2,20060bc <_dtoa_r+0xca0>
 20060cc:	b7000044 	addi	fp,r22,1
 20060d0:	003fcb06 	br	2006000 <_dtoa_r+0xbe4>
 20060d4:	d9800d17 	ldw	r6,52(sp)
 20060d8:	018fc83a 	sub	r7,zero,r6
 20060dc:	3801f726 	beq	r7,zero,20068bc <_dtoa_r+0x14a0>
 20060e0:	398003cc 	andi	r6,r7,15
 20060e4:	300c90fa 	slli	r6,r6,3
 20060e8:	01408074 	movhi	r5,513
 20060ec:	297d3f04 	addi	r5,r5,-2820
 20060f0:	d9001217 	ldw	r4,72(sp)
 20060f4:	314d883a 	add	r6,r6,r5
 20060f8:	30c00117 	ldw	r3,4(r6)
 20060fc:	30800017 	ldw	r2,0(r6)
 2006100:	d9401317 	ldw	r5,76(sp)
 2006104:	3821d13a 	srai	r16,r7,4
 2006108:	100d883a 	mov	r6,r2
 200610c:	180f883a 	mov	r7,r3
 2006110:	200a8cc0 	call	200a8cc <__muldf3>
 2006114:	1011883a 	mov	r8,r2
 2006118:	1813883a 	mov	r9,r3
 200611c:	1029883a 	mov	r20,r2
 2006120:	182b883a 	mov	r21,r3
 2006124:	8001e526 	beq	r16,zero,20068bc <_dtoa_r+0x14a0>
 2006128:	05800084 	movi	r22,2
 200612c:	04408074 	movhi	r17,513
 2006130:	8c7d7104 	addi	r17,r17,-2620
 2006134:	8080004c 	andi	r2,r16,1
 2006138:	1005003a 	cmpeq	r2,r2,zero
 200613c:	1000081e 	bne	r2,zero,2006160 <_dtoa_r+0xd44>
 2006140:	89800017 	ldw	r6,0(r17)
 2006144:	89c00117 	ldw	r7,4(r17)
 2006148:	480b883a 	mov	r5,r9
 200614c:	4009883a 	mov	r4,r8
 2006150:	200a8cc0 	call	200a8cc <__muldf3>
 2006154:	1011883a 	mov	r8,r2
 2006158:	b5800044 	addi	r22,r22,1
 200615c:	1813883a 	mov	r9,r3
 2006160:	8021d07a 	srai	r16,r16,1
 2006164:	8c400204 	addi	r17,r17,8
 2006168:	803ff21e 	bne	r16,zero,2006134 <_dtoa_r+0xd18>
 200616c:	4029883a 	mov	r20,r8
 2006170:	482b883a 	mov	r21,r9
 2006174:	003dca06 	br	20058a0 <_dtoa_r+0x484>
 2006178:	d9000817 	ldw	r4,32(sp)
 200617c:	2005003a 	cmpeq	r2,r4,zero
 2006180:	1001f61e 	bne	r2,zero,200695c <_dtoa_r+0x1540>
 2006184:	dc001117 	ldw	r16,68(sp)
 2006188:	dc801017 	ldw	r18,64(sp)
 200618c:	18c10cc4 	addi	r3,r3,1075
 2006190:	003f6106 	br	2005f18 <_dtoa_r+0xafc>
 2006194:	d8000b15 	stw	zero,44(sp)
 2006198:	d9802617 	ldw	r6,152(sp)
 200619c:	d8c00d17 	ldw	r3,52(sp)
 20061a0:	30800044 	addi	r2,r6,1
 20061a4:	18ad883a 	add	r22,r3,r2
 20061a8:	b13fffc4 	addi	r4,r22,-1
 20061ac:	d9000e15 	stw	r4,56(sp)
 20061b0:	0581f60e 	bge	zero,r22,200698c <_dtoa_r+0x1570>
 20061b4:	dd800f15 	stw	r22,60(sp)
 20061b8:	003f3006 	br	2005e7c <_dtoa_r+0xa60>
 20061bc:	d8000b15 	stw	zero,44(sp)
 20061c0:	d9002617 	ldw	r4,152(sp)
 20061c4:	0101eb0e 	bge	zero,r4,2006974 <_dtoa_r+0x1558>
 20061c8:	202d883a 	mov	r22,r4
 20061cc:	d9000e15 	stw	r4,56(sp)
 20061d0:	d9000f15 	stw	r4,60(sp)
 20061d4:	003f2906 	br	2005e7c <_dtoa_r+0xa60>
 20061d8:	01800044 	movi	r6,1
 20061dc:	d9800b15 	stw	r6,44(sp)
 20061e0:	003ff706 	br	20061c0 <_dtoa_r+0xda4>
 20061e4:	01000044 	movi	r4,1
 20061e8:	d9000b15 	stw	r4,44(sp)
 20061ec:	003fea06 	br	2006198 <_dtoa_r+0xd7c>
 20061f0:	04000c0e 	bge	zero,r16,2006224 <_dtoa_r+0xe08>
 20061f4:	d9400717 	ldw	r5,28(sp)
 20061f8:	d9001617 	ldw	r4,88(sp)
 20061fc:	01800044 	movi	r6,1
 2006200:	200881c0 	call	200881c <__lshift>
 2006204:	1009883a 	mov	r4,r2
 2006208:	900b883a 	mov	r5,r18
 200620c:	d8800715 	stw	r2,28(sp)
 2006210:	20080340 	call	2008034 <__mcmp>
 2006214:	0081e00e 	bge	zero,r2,2006998 <_dtoa_r+0x157c>
 2006218:	bdc00044 	addi	r23,r23,1
 200621c:	00800e84 	movi	r2,58
 2006220:	b881a226 	beq	r23,r2,20068ac <_dtoa_r+0x1490>
 2006224:	b7000044 	addi	fp,r22,1
 2006228:	b5c00005 	stb	r23,0(r22)
 200622c:	003f7406 	br	2006000 <_dtoa_r+0xbe4>
 2006230:	00800e44 	movi	r2,57
 2006234:	b8819d26 	beq	r23,r2,20068ac <_dtoa_r+0x1490>
 2006238:	053ffa0e 	bge	zero,r20,2006224 <_dtoa_r+0xe08>
 200623c:	8dc00c44 	addi	r23,r17,49
 2006240:	003ff806 	br	2006224 <_dtoa_r+0xe08>
 2006244:	d9001617 	ldw	r4,88(sp)
 2006248:	a80b883a 	mov	r5,r21
 200624c:	04000044 	movi	r16,1
 2006250:	2007ed80 	call	2007ed8 <_Bfree>
 2006254:	003edf06 	br	2005dd4 <_dtoa_r+0x9b8>
 2006258:	d9001617 	ldw	r4,88(sp)
 200625c:	980b883a 	mov	r5,r19
 2006260:	01800284 	movi	r6,10
 2006264:	000f883a 	mov	r7,zero
 2006268:	2008b8c0 	call	2008b8c <__multadd>
 200626c:	1027883a 	mov	r19,r2
 2006270:	d8800615 	stw	r2,24(sp)
 2006274:	003ebb06 	br	2005d64 <_dtoa_r+0x948>
 2006278:	d9801117 	ldw	r6,68(sp)
 200627c:	d8800d17 	ldw	r2,52(sp)
 2006280:	d8000915 	stw	zero,36(sp)
 2006284:	308dc83a 	sub	r6,r6,r2
 2006288:	0087c83a 	sub	r3,zero,r2
 200628c:	d9801115 	stw	r6,68(sp)
 2006290:	d8c01015 	stw	r3,64(sp)
 2006294:	003cfe06 	br	2005690 <_dtoa_r+0x274>
 2006298:	018dc83a 	sub	r6,zero,r6
 200629c:	d9801115 	stw	r6,68(sp)
 20062a0:	d8000a15 	stw	zero,40(sp)
 20062a4:	003cf306 	br	2005674 <_dtoa_r+0x258>
 20062a8:	d9000d17 	ldw	r4,52(sp)
 20062ac:	2000fa00 	call	2000fa0 <__floatsidf>
 20062b0:	880b883a 	mov	r5,r17
 20062b4:	8009883a 	mov	r4,r16
 20062b8:	180f883a 	mov	r7,r3
 20062bc:	100d883a 	mov	r6,r2
 20062c0:	200af700 	call	200af70 <__nedf2>
 20062c4:	103ce126 	beq	r2,zero,200564c <_dtoa_r+0x230>
 20062c8:	d9800d17 	ldw	r6,52(sp)
 20062cc:	31bfffc4 	addi	r6,r6,-1
 20062d0:	d9800d15 	stw	r6,52(sp)
 20062d4:	003cdd06 	br	200564c <_dtoa_r+0x230>
 20062d8:	d9000717 	ldw	r4,28(sp)
 20062dc:	900b883a 	mov	r5,r18
 20062e0:	20080340 	call	2008034 <__mcmp>
 20062e4:	103e8d0e 	bge	r2,zero,2005d1c <_dtoa_r+0x900>
 20062e8:	d9400717 	ldw	r5,28(sp)
 20062ec:	d9001617 	ldw	r4,88(sp)
 20062f0:	01800284 	movi	r6,10
 20062f4:	000f883a 	mov	r7,zero
 20062f8:	2008b8c0 	call	2008b8c <__multadd>
 20062fc:	d9800d17 	ldw	r6,52(sp)
 2006300:	d8800715 	stw	r2,28(sp)
 2006304:	31bfffc4 	addi	r6,r6,-1
 2006308:	d9800d15 	stw	r6,52(sp)
 200630c:	b001a71e 	bne	r22,zero,20069ac <_dtoa_r+0x1590>
 2006310:	d8800e17 	ldw	r2,56(sp)
 2006314:	d8800f15 	stw	r2,60(sp)
 2006318:	003e8006 	br	2005d1c <_dtoa_r+0x900>
 200631c:	90800417 	ldw	r2,16(r18)
 2006320:	1085883a 	add	r2,r2,r2
 2006324:	1085883a 	add	r2,r2,r2
 2006328:	1485883a 	add	r2,r2,r18
 200632c:	11000417 	ldw	r4,16(r2)
 2006330:	2007f000 	call	2007f00 <__hi0bits>
 2006334:	00c00804 	movi	r3,32
 2006338:	1887c83a 	sub	r3,r3,r2
 200633c:	003e5a06 	br	2005ca8 <_dtoa_r+0x88c>
 2006340:	d9400717 	ldw	r5,28(sp)
 2006344:	d9801017 	ldw	r6,64(sp)
 2006348:	d9001617 	ldw	r4,88(sp)
 200634c:	2008c8c0 	call	2008c8c <__pow5mult>
 2006350:	d8800715 	stw	r2,28(sp)
 2006354:	003e4306 	br	2005c64 <_dtoa_r+0x848>
 2006358:	d9800f17 	ldw	r6,60(sp)
 200635c:	d8800d17 	ldw	r2,52(sp)
 2006360:	d9800315 	stw	r6,12(sp)
 2006364:	d8800415 	stw	r2,16(sp)
 2006368:	d8c00b17 	ldw	r3,44(sp)
 200636c:	1805003a 	cmpeq	r2,r3,zero
 2006370:	1000e21e 	bne	r2,zero,20066fc <_dtoa_r+0x12e0>
 2006374:	d9000317 	ldw	r4,12(sp)
 2006378:	0005883a 	mov	r2,zero
 200637c:	00cff834 	movhi	r3,16352
 2006380:	200c90fa 	slli	r6,r4,3
 2006384:	01008074 	movhi	r4,513
 2006388:	213d3f04 	addi	r4,r4,-2820
 200638c:	180b883a 	mov	r5,r3
 2006390:	310d883a 	add	r6,r6,r4
 2006394:	327fff17 	ldw	r9,-4(r6)
 2006398:	323ffe17 	ldw	r8,-8(r6)
 200639c:	1009883a 	mov	r4,r2
 20063a0:	480f883a 	mov	r7,r9
 20063a4:	400d883a 	mov	r6,r8
 20063a8:	200ac900 	call	200ac90 <__divdf3>
 20063ac:	180b883a 	mov	r5,r3
 20063b0:	b00d883a 	mov	r6,r22
 20063b4:	b80f883a 	mov	r7,r23
 20063b8:	1009883a 	mov	r4,r2
 20063bc:	200a7d80 	call	200a7d8 <__subdf3>
 20063c0:	a80b883a 	mov	r5,r21
 20063c4:	a009883a 	mov	r4,r20
 20063c8:	d8c01915 	stw	r3,100(sp)
 20063cc:	d8801815 	stw	r2,96(sp)
 20063d0:	200b1080 	call	200b108 <__fixdfsi>
 20063d4:	1009883a 	mov	r4,r2
 20063d8:	1027883a 	mov	r19,r2
 20063dc:	2000fa00 	call	2000fa0 <__floatsidf>
 20063e0:	a80b883a 	mov	r5,r21
 20063e4:	a009883a 	mov	r4,r20
 20063e8:	180f883a 	mov	r7,r3
 20063ec:	100d883a 	mov	r6,r2
 20063f0:	200a7d80 	call	200a7d8 <__subdf3>
 20063f4:	d9801817 	ldw	r6,96(sp)
 20063f8:	1823883a 	mov	r17,r3
 20063fc:	d8801415 	stw	r2,80(sp)
 2006400:	302d883a 	mov	r22,r6
 2006404:	d9800517 	ldw	r6,20(sp)
 2006408:	9cc00c04 	addi	r19,r19,48
 200640c:	dc401515 	stw	r17,84(sp)
 2006410:	d8c01917 	ldw	r3,100(sp)
 2006414:	34c00005 	stb	r19,0(r6)
 2006418:	d8800517 	ldw	r2,20(sp)
 200641c:	d9401917 	ldw	r5,100(sp)
 2006420:	d9801417 	ldw	r6,80(sp)
 2006424:	b009883a 	mov	r4,r22
 2006428:	880f883a 	mov	r7,r17
 200642c:	182f883a 	mov	r23,r3
 2006430:	17000044 	addi	fp,r2,1
 2006434:	200aff80 	call	200aff8 <__gtdf2>
 2006438:	00804e16 	blt	zero,r2,2006574 <_dtoa_r+0x1158>
 200643c:	d9801417 	ldw	r6,80(sp)
 2006440:	0005883a 	mov	r2,zero
 2006444:	00cffc34 	movhi	r3,16368
 2006448:	180b883a 	mov	r5,r3
 200644c:	880f883a 	mov	r7,r17
 2006450:	1009883a 	mov	r4,r2
 2006454:	200a7d80 	call	200a7d8 <__subdf3>
 2006458:	d9401917 	ldw	r5,100(sp)
 200645c:	180f883a 	mov	r7,r3
 2006460:	b009883a 	mov	r4,r22
 2006464:	100d883a 	mov	r6,r2
 2006468:	200aff80 	call	200aff8 <__gtdf2>
 200646c:	00bda216 	blt	zero,r2,2005af8 <_dtoa_r+0x6dc>
 2006470:	d8c00317 	ldw	r3,12(sp)
 2006474:	00800044 	movi	r2,1
 2006478:	10c01216 	blt	r2,r3,20064c4 <_dtoa_r+0x10a8>
 200647c:	003d4506 	br	2005994 <_dtoa_r+0x578>
 2006480:	d9801417 	ldw	r6,80(sp)
 2006484:	0005883a 	mov	r2,zero
 2006488:	00cffc34 	movhi	r3,16368
 200648c:	180b883a 	mov	r5,r3
 2006490:	880f883a 	mov	r7,r17
 2006494:	1009883a 	mov	r4,r2
 2006498:	200a7d80 	call	200a7d8 <__subdf3>
 200649c:	d9c01b17 	ldw	r7,108(sp)
 20064a0:	180b883a 	mov	r5,r3
 20064a4:	1009883a 	mov	r4,r2
 20064a8:	b00d883a 	mov	r6,r22
 20064ac:	2000f180 	call	2000f18 <__ltdf2>
 20064b0:	103d9116 	blt	r2,zero,2005af8 <_dtoa_r+0x6dc>
 20064b4:	d9800517 	ldw	r6,20(sp)
 20064b8:	d9000317 	ldw	r4,12(sp)
 20064bc:	3105883a 	add	r2,r6,r4
 20064c0:	e0bd3426 	beq	fp,r2,2005994 <_dtoa_r+0x578>
 20064c4:	04500934 	movhi	r17,16420
 20064c8:	0021883a 	mov	r16,zero
 20064cc:	b80b883a 	mov	r5,r23
 20064d0:	b009883a 	mov	r4,r22
 20064d4:	800d883a 	mov	r6,r16
 20064d8:	880f883a 	mov	r7,r17
 20064dc:	200a8cc0 	call	200a8cc <__muldf3>
 20064e0:	d9401517 	ldw	r5,84(sp)
 20064e4:	d9001417 	ldw	r4,80(sp)
 20064e8:	880f883a 	mov	r7,r17
 20064ec:	000d883a 	mov	r6,zero
 20064f0:	d8801a15 	stw	r2,104(sp)
 20064f4:	d8c01b15 	stw	r3,108(sp)
 20064f8:	200a8cc0 	call	200a8cc <__muldf3>
 20064fc:	180b883a 	mov	r5,r3
 2006500:	1009883a 	mov	r4,r2
 2006504:	1823883a 	mov	r17,r3
 2006508:	1021883a 	mov	r16,r2
 200650c:	200b1080 	call	200b108 <__fixdfsi>
 2006510:	1009883a 	mov	r4,r2
 2006514:	102b883a 	mov	r21,r2
 2006518:	2000fa00 	call	2000fa0 <__floatsidf>
 200651c:	880b883a 	mov	r5,r17
 2006520:	8009883a 	mov	r4,r16
 2006524:	180f883a 	mov	r7,r3
 2006528:	100d883a 	mov	r6,r2
 200652c:	200a7d80 	call	200a7d8 <__subdf3>
 2006530:	1021883a 	mov	r16,r2
 2006534:	d9001b17 	ldw	r4,108(sp)
 2006538:	1823883a 	mov	r17,r3
 200653c:	dc001415 	stw	r16,80(sp)
 2006540:	ad400c04 	addi	r21,r21,48
 2006544:	dc401515 	stw	r17,84(sp)
 2006548:	d8801a17 	ldw	r2,104(sp)
 200654c:	e5400005 	stb	r21,0(fp)
 2006550:	202f883a 	mov	r23,r4
 2006554:	d9c01b17 	ldw	r7,108(sp)
 2006558:	d9001417 	ldw	r4,80(sp)
 200655c:	880b883a 	mov	r5,r17
 2006560:	100d883a 	mov	r6,r2
 2006564:	102d883a 	mov	r22,r2
 2006568:	e7000044 	addi	fp,fp,1
 200656c:	2000f180 	call	2000f18 <__ltdf2>
 2006570:	103fc30e 	bge	r2,zero,2006480 <_dtoa_r+0x1064>
 2006574:	d9000417 	ldw	r4,16(sp)
 2006578:	d9000d15 	stw	r4,52(sp)
 200657c:	003d7106 	br	2005b44 <_dtoa_r+0x728>
 2006580:	d9801717 	ldw	r6,92(sp)
 2006584:	00800084 	movi	r2,2
 2006588:	11bde60e 	bge	r2,r6,2005d24 <_dtoa_r+0x908>
 200658c:	203cfb1e 	bne	r4,zero,200597c <_dtoa_r+0x560>
 2006590:	d9001617 	ldw	r4,88(sp)
 2006594:	900b883a 	mov	r5,r18
 2006598:	01800144 	movi	r6,5
 200659c:	000f883a 	mov	r7,zero
 20065a0:	2008b8c0 	call	2008b8c <__multadd>
 20065a4:	d9000717 	ldw	r4,28(sp)
 20065a8:	100b883a 	mov	r5,r2
 20065ac:	1025883a 	mov	r18,r2
 20065b0:	20080340 	call	2008034 <__mcmp>
 20065b4:	00bcf10e 	bge	zero,r2,200597c <_dtoa_r+0x560>
 20065b8:	d8c00d17 	ldw	r3,52(sp)
 20065bc:	d9000517 	ldw	r4,20(sp)
 20065c0:	d8000615 	stw	zero,24(sp)
 20065c4:	18c00044 	addi	r3,r3,1
 20065c8:	d8c00d15 	stw	r3,52(sp)
 20065cc:	00800c44 	movi	r2,49
 20065d0:	27000044 	addi	fp,r4,1
 20065d4:	20800005 	stb	r2,0(r4)
 20065d8:	003e8906 	br	2006000 <_dtoa_r+0xbe4>
 20065dc:	d8c00517 	ldw	r3,20(sp)
 20065e0:	003bc206 	br	20054ec <_dtoa_r+0xd0>
 20065e4:	01808074 	movhi	r6,513
 20065e8:	31bd7104 	addi	r6,r6,-2620
 20065ec:	30c00917 	ldw	r3,36(r6)
 20065f0:	30800817 	ldw	r2,32(r6)
 20065f4:	d9001217 	ldw	r4,72(sp)
 20065f8:	d9401317 	ldw	r5,76(sp)
 20065fc:	180f883a 	mov	r7,r3
 2006600:	100d883a 	mov	r6,r2
 2006604:	200ac900 	call	200ac90 <__divdf3>
 2006608:	948003cc 	andi	r18,r18,15
 200660c:	058000c4 	movi	r22,3
 2006610:	1029883a 	mov	r20,r2
 2006614:	182b883a 	mov	r21,r3
 2006618:	003c8906 	br	2005840 <_dtoa_r+0x424>
 200661c:	d9001017 	ldw	r4,64(sp)
 2006620:	d9800917 	ldw	r6,36(sp)
 2006624:	0025883a 	mov	r18,zero
 2006628:	1105c83a 	sub	r2,r2,r4
 200662c:	2089883a 	add	r4,r4,r2
 2006630:	308d883a 	add	r6,r6,r2
 2006634:	d9001015 	stw	r4,64(sp)
 2006638:	d9800915 	stw	r6,36(sp)
 200663c:	003e3206 	br	2005f08 <_dtoa_r+0xaec>
 2006640:	28800044 	addi	r2,r5,1
 2006644:	27000044 	addi	fp,r4,1
 2006648:	20800005 	stb	r2,0(r4)
 200664c:	003e6c06 	br	2006000 <_dtoa_r+0xbe4>
 2006650:	d8800f17 	ldw	r2,60(sp)
 2006654:	00bce016 	blt	zero,r2,20059d8 <_dtoa_r+0x5bc>
 2006658:	d9800f17 	ldw	r6,60(sp)
 200665c:	303cc51e 	bne	r6,zero,2005974 <_dtoa_r+0x558>
 2006660:	0005883a 	mov	r2,zero
 2006664:	00d00534 	movhi	r3,16404
 2006668:	980b883a 	mov	r5,r19
 200666c:	180f883a 	mov	r7,r3
 2006670:	9009883a 	mov	r4,r18
 2006674:	100d883a 	mov	r6,r2
 2006678:	200a8cc0 	call	200a8cc <__muldf3>
 200667c:	180b883a 	mov	r5,r3
 2006680:	a80f883a 	mov	r7,r21
 2006684:	1009883a 	mov	r4,r2
 2006688:	a00d883a 	mov	r6,r20
 200668c:	200b0800 	call	200b080 <__gedf2>
 2006690:	103cb80e 	bge	r2,zero,2005974 <_dtoa_r+0x558>
 2006694:	0027883a 	mov	r19,zero
 2006698:	0025883a 	mov	r18,zero
 200669c:	003fc606 	br	20065b8 <_dtoa_r+0x119c>
 20066a0:	99400117 	ldw	r5,4(r19)
 20066a4:	d9001617 	ldw	r4,88(sp)
 20066a8:	20084580 	call	2008458 <_Balloc>
 20066ac:	99800417 	ldw	r6,16(r19)
 20066b0:	11000304 	addi	r4,r2,12
 20066b4:	99400304 	addi	r5,r19,12
 20066b8:	318d883a 	add	r6,r6,r6
 20066bc:	318d883a 	add	r6,r6,r6
 20066c0:	31800204 	addi	r6,r6,8
 20066c4:	1023883a 	mov	r17,r2
 20066c8:	2007cc00 	call	2007cc0 <memcpy>
 20066cc:	d9001617 	ldw	r4,88(sp)
 20066d0:	880b883a 	mov	r5,r17
 20066d4:	01800044 	movi	r6,1
 20066d8:	200881c0 	call	200881c <__lshift>
 20066dc:	100b883a 	mov	r5,r2
 20066e0:	003d9c06 	br	2005d54 <_dtoa_r+0x938>
 20066e4:	00800e44 	movi	r2,57
 20066e8:	b8807026 	beq	r23,r2,20068ac <_dtoa_r+0x1490>
 20066ec:	b8800044 	addi	r2,r23,1
 20066f0:	b7000044 	addi	fp,r22,1
 20066f4:	b0800005 	stb	r2,0(r22)
 20066f8:	003e4106 	br	2006000 <_dtoa_r+0xbe4>
 20066fc:	d8800317 	ldw	r2,12(sp)
 2006700:	01808074 	movhi	r6,513
 2006704:	31bd3f04 	addi	r6,r6,-2820
 2006708:	b009883a 	mov	r4,r22
 200670c:	100e90fa 	slli	r7,r2,3
 2006710:	b80b883a 	mov	r5,r23
 2006714:	398f883a 	add	r7,r7,r6
 2006718:	38bffe17 	ldw	r2,-8(r7)
 200671c:	d9800517 	ldw	r6,20(sp)
 2006720:	38ffff17 	ldw	r3,-4(r7)
 2006724:	37000044 	addi	fp,r6,1
 2006728:	180f883a 	mov	r7,r3
 200672c:	100d883a 	mov	r6,r2
 2006730:	200a8cc0 	call	200a8cc <__muldf3>
 2006734:	a80b883a 	mov	r5,r21
 2006738:	a009883a 	mov	r4,r20
 200673c:	182f883a 	mov	r23,r3
 2006740:	102d883a 	mov	r22,r2
 2006744:	200b1080 	call	200b108 <__fixdfsi>
 2006748:	1009883a 	mov	r4,r2
 200674c:	1027883a 	mov	r19,r2
 2006750:	2000fa00 	call	2000fa0 <__floatsidf>
 2006754:	a80b883a 	mov	r5,r21
 2006758:	a009883a 	mov	r4,r20
 200675c:	180f883a 	mov	r7,r3
 2006760:	100d883a 	mov	r6,r2
 2006764:	200a7d80 	call	200a7d8 <__subdf3>
 2006768:	180b883a 	mov	r5,r3
 200676c:	d8c00517 	ldw	r3,20(sp)
 2006770:	9cc00c04 	addi	r19,r19,48
 2006774:	1009883a 	mov	r4,r2
 2006778:	1cc00005 	stb	r19,0(r3)
 200677c:	2021883a 	mov	r16,r4
 2006780:	d9000317 	ldw	r4,12(sp)
 2006784:	00800044 	movi	r2,1
 2006788:	2823883a 	mov	r17,r5
 200678c:	20802226 	beq	r4,r2,2006818 <_dtoa_r+0x13fc>
 2006790:	1029883a 	mov	r20,r2
 2006794:	0005883a 	mov	r2,zero
 2006798:	00d00934 	movhi	r3,16420
 200679c:	180f883a 	mov	r7,r3
 20067a0:	100d883a 	mov	r6,r2
 20067a4:	880b883a 	mov	r5,r17
 20067a8:	8009883a 	mov	r4,r16
 20067ac:	200a8cc0 	call	200a8cc <__muldf3>
 20067b0:	180b883a 	mov	r5,r3
 20067b4:	1009883a 	mov	r4,r2
 20067b8:	1823883a 	mov	r17,r3
 20067bc:	1021883a 	mov	r16,r2
 20067c0:	200b1080 	call	200b108 <__fixdfsi>
 20067c4:	1009883a 	mov	r4,r2
 20067c8:	102b883a 	mov	r21,r2
 20067cc:	2000fa00 	call	2000fa0 <__floatsidf>
 20067d0:	880b883a 	mov	r5,r17
 20067d4:	8009883a 	mov	r4,r16
 20067d8:	180f883a 	mov	r7,r3
 20067dc:	100d883a 	mov	r6,r2
 20067e0:	200a7d80 	call	200a7d8 <__subdf3>
 20067e4:	180b883a 	mov	r5,r3
 20067e8:	d8c00517 	ldw	r3,20(sp)
 20067ec:	1009883a 	mov	r4,r2
 20067f0:	ad400c04 	addi	r21,r21,48
 20067f4:	1d05883a 	add	r2,r3,r20
 20067f8:	15400005 	stb	r21,0(r2)
 20067fc:	2021883a 	mov	r16,r4
 2006800:	d9000317 	ldw	r4,12(sp)
 2006804:	a5000044 	addi	r20,r20,1
 2006808:	2823883a 	mov	r17,r5
 200680c:	a13fe11e 	bne	r20,r4,2006794 <_dtoa_r+0x1378>
 2006810:	e505883a 	add	r2,fp,r20
 2006814:	173fffc4 	addi	fp,r2,-1
 2006818:	0025883a 	mov	r18,zero
 200681c:	04cff834 	movhi	r19,16352
 2006820:	b009883a 	mov	r4,r22
 2006824:	b80b883a 	mov	r5,r23
 2006828:	900d883a 	mov	r6,r18
 200682c:	980f883a 	mov	r7,r19
 2006830:	200a8580 	call	200a858 <__adddf3>
 2006834:	180b883a 	mov	r5,r3
 2006838:	1009883a 	mov	r4,r2
 200683c:	800d883a 	mov	r6,r16
 2006840:	880f883a 	mov	r7,r17
 2006844:	2000f180 	call	2000f18 <__ltdf2>
 2006848:	103cab16 	blt	r2,zero,2005af8 <_dtoa_r+0x6dc>
 200684c:	0009883a 	mov	r4,zero
 2006850:	980b883a 	mov	r5,r19
 2006854:	b80f883a 	mov	r7,r23
 2006858:	b00d883a 	mov	r6,r22
 200685c:	200a7d80 	call	200a7d8 <__subdf3>
 2006860:	180b883a 	mov	r5,r3
 2006864:	880f883a 	mov	r7,r17
 2006868:	1009883a 	mov	r4,r2
 200686c:	800d883a 	mov	r6,r16
 2006870:	200aff80 	call	200aff8 <__gtdf2>
 2006874:	00bc470e 	bge	zero,r2,2005994 <_dtoa_r+0x578>
 2006878:	00c00c04 	movi	r3,48
 200687c:	e73fffc4 	addi	fp,fp,-1
 2006880:	e0800007 	ldb	r2,0(fp)
 2006884:	10fffd26 	beq	r2,r3,200687c <_dtoa_r+0x1460>
 2006888:	d9800417 	ldw	r6,16(sp)
 200688c:	e7000044 	addi	fp,fp,1
 2006890:	d9800d15 	stw	r6,52(sp)
 2006894:	003cab06 	br	2005b44 <_dtoa_r+0x728>
 2006898:	d8c00f17 	ldw	r3,60(sp)
 200689c:	d9001117 	ldw	r4,68(sp)
 20068a0:	20e1c83a 	sub	r16,r4,r3
 20068a4:	0007883a 	mov	r3,zero
 20068a8:	003d9b06 	br	2005f18 <_dtoa_r+0xafc>
 20068ac:	00800e44 	movi	r2,57
 20068b0:	b0800005 	stb	r2,0(r22)
 20068b4:	b5800044 	addi	r22,r22,1
 20068b8:	003dc106 	br	2005fc0 <_dtoa_r+0xba4>
 20068bc:	05800084 	movi	r22,2
 20068c0:	003bf706 	br	20058a0 <_dtoa_r+0x484>
 20068c4:	d9000f17 	ldw	r4,60(sp)
 20068c8:	013c000e 	bge	zero,r4,20058cc <_dtoa_r+0x4b0>
 20068cc:	d9800e17 	ldw	r6,56(sp)
 20068d0:	01bc300e 	bge	zero,r6,2005994 <_dtoa_r+0x578>
 20068d4:	0005883a 	mov	r2,zero
 20068d8:	00d00934 	movhi	r3,16420
 20068dc:	a80b883a 	mov	r5,r21
 20068e0:	180f883a 	mov	r7,r3
 20068e4:	a009883a 	mov	r4,r20
 20068e8:	100d883a 	mov	r6,r2
 20068ec:	200a8cc0 	call	200a8cc <__muldf3>
 20068f0:	b1000044 	addi	r4,r22,1
 20068f4:	1021883a 	mov	r16,r2
 20068f8:	1823883a 	mov	r17,r3
 20068fc:	2000fa00 	call	2000fa0 <__floatsidf>
 2006900:	880b883a 	mov	r5,r17
 2006904:	8009883a 	mov	r4,r16
 2006908:	180f883a 	mov	r7,r3
 200690c:	100d883a 	mov	r6,r2
 2006910:	200a8cc0 	call	200a8cc <__muldf3>
 2006914:	0011883a 	mov	r8,zero
 2006918:	02500734 	movhi	r9,16412
 200691c:	180b883a 	mov	r5,r3
 2006920:	480f883a 	mov	r7,r9
 2006924:	1009883a 	mov	r4,r2
 2006928:	400d883a 	mov	r6,r8
 200692c:	200a8580 	call	200a858 <__adddf3>
 2006930:	102d883a 	mov	r22,r2
 2006934:	00bf3034 	movhi	r2,64704
 2006938:	10ef883a 	add	r23,r2,r3
 200693c:	d8800d17 	ldw	r2,52(sp)
 2006940:	d8c00e17 	ldw	r3,56(sp)
 2006944:	8029883a 	mov	r20,r16
 2006948:	10bfffc4 	addi	r2,r2,-1
 200694c:	882b883a 	mov	r21,r17
 2006950:	d8800415 	stw	r2,16(sp)
 2006954:	d8c00315 	stw	r3,12(sp)
 2006958:	003e8306 	br	2006368 <_dtoa_r+0xf4c>
 200695c:	d8800117 	ldw	r2,4(sp)
 2006960:	dc001117 	ldw	r16,68(sp)
 2006964:	dc801017 	ldw	r18,64(sp)
 2006968:	00c00d84 	movi	r3,54
 200696c:	1887c83a 	sub	r3,r3,r2
 2006970:	003d6906 	br	2005f18 <_dtoa_r+0xafc>
 2006974:	01800044 	movi	r6,1
 2006978:	3021883a 	mov	r16,r6
 200697c:	d9800f15 	stw	r6,60(sp)
 2006980:	d9802615 	stw	r6,152(sp)
 2006984:	d9800e15 	stw	r6,56(sp)
 2006988:	003b9306 	br	20057d8 <_dtoa_r+0x3bc>
 200698c:	b021883a 	mov	r16,r22
 2006990:	dd800f15 	stw	r22,60(sp)
 2006994:	003b9006 	br	20057d8 <_dtoa_r+0x3bc>
 2006998:	103e221e 	bne	r2,zero,2006224 <_dtoa_r+0xe08>
 200699c:	b880004c 	andi	r2,r23,1
 20069a0:	1005003a 	cmpeq	r2,r2,zero
 20069a4:	103e1f1e 	bne	r2,zero,2006224 <_dtoa_r+0xe08>
 20069a8:	003e1b06 	br	2006218 <_dtoa_r+0xdfc>
 20069ac:	d9001617 	ldw	r4,88(sp)
 20069b0:	980b883a 	mov	r5,r19
 20069b4:	01800284 	movi	r6,10
 20069b8:	000f883a 	mov	r7,zero
 20069bc:	2008b8c0 	call	2008b8c <__multadd>
 20069c0:	d8c00e17 	ldw	r3,56(sp)
 20069c4:	1027883a 	mov	r19,r2
 20069c8:	d8c00f15 	stw	r3,60(sp)
 20069cc:	003cd306 	br	2005d1c <_dtoa_r+0x900>

020069d0 <_fflush_r>:
 20069d0:	defffb04 	addi	sp,sp,-20
 20069d4:	dcc00315 	stw	r19,12(sp)
 20069d8:	dc800215 	stw	r18,8(sp)
 20069dc:	dfc00415 	stw	ra,16(sp)
 20069e0:	dc400115 	stw	r17,4(sp)
 20069e4:	dc000015 	stw	r16,0(sp)
 20069e8:	2027883a 	mov	r19,r4
 20069ec:	2825883a 	mov	r18,r5
 20069f0:	20000226 	beq	r4,zero,20069fc <_fflush_r+0x2c>
 20069f4:	20800e17 	ldw	r2,56(r4)
 20069f8:	10005626 	beq	r2,zero,2006b54 <_fflush_r+0x184>
 20069fc:	9100030b 	ldhu	r4,12(r18)
 2006a00:	20ffffcc 	andi	r3,r4,65535
 2006a04:	18e0001c 	xori	r3,r3,32768
 2006a08:	18e00004 	addi	r3,r3,-32768
 2006a0c:	1880020c 	andi	r2,r3,8
 2006a10:	1000261e 	bne	r2,zero,2006aac <_fflush_r+0xdc>
 2006a14:	90c00117 	ldw	r3,4(r18)
 2006a18:	20820014 	ori	r2,r4,2048
 2006a1c:	9080030d 	sth	r2,12(r18)
 2006a20:	1009883a 	mov	r4,r2
 2006a24:	00c0400e 	bge	zero,r3,2006b28 <_fflush_r+0x158>
 2006a28:	92000a17 	ldw	r8,40(r18)
 2006a2c:	40004026 	beq	r8,zero,2006b30 <_fflush_r+0x160>
 2006a30:	2084000c 	andi	r2,r4,4096
 2006a34:	10005326 	beq	r2,zero,2006b84 <_fflush_r+0x1b4>
 2006a38:	94001417 	ldw	r16,80(r18)
 2006a3c:	9080030b 	ldhu	r2,12(r18)
 2006a40:	1080010c 	andi	r2,r2,4
 2006a44:	1000481e 	bne	r2,zero,2006b68 <_fflush_r+0x198>
 2006a48:	91400717 	ldw	r5,28(r18)
 2006a4c:	9809883a 	mov	r4,r19
 2006a50:	800d883a 	mov	r6,r16
 2006a54:	000f883a 	mov	r7,zero
 2006a58:	403ee83a 	callr	r8
 2006a5c:	8080261e 	bne	r16,r2,2006af8 <_fflush_r+0x128>
 2006a60:	9080030b 	ldhu	r2,12(r18)
 2006a64:	91000417 	ldw	r4,16(r18)
 2006a68:	90000115 	stw	zero,4(r18)
 2006a6c:	10bdffcc 	andi	r2,r2,63487
 2006a70:	10ffffcc 	andi	r3,r2,65535
 2006a74:	18c4000c 	andi	r3,r3,4096
 2006a78:	9080030d 	sth	r2,12(r18)
 2006a7c:	91000015 	stw	r4,0(r18)
 2006a80:	18002b26 	beq	r3,zero,2006b30 <_fflush_r+0x160>
 2006a84:	0007883a 	mov	r3,zero
 2006a88:	1805883a 	mov	r2,r3
 2006a8c:	94001415 	stw	r16,80(r18)
 2006a90:	dfc00417 	ldw	ra,16(sp)
 2006a94:	dcc00317 	ldw	r19,12(sp)
 2006a98:	dc800217 	ldw	r18,8(sp)
 2006a9c:	dc400117 	ldw	r17,4(sp)
 2006aa0:	dc000017 	ldw	r16,0(sp)
 2006aa4:	dec00504 	addi	sp,sp,20
 2006aa8:	f800283a 	ret
 2006aac:	94400417 	ldw	r17,16(r18)
 2006ab0:	88001f26 	beq	r17,zero,2006b30 <_fflush_r+0x160>
 2006ab4:	90800017 	ldw	r2,0(r18)
 2006ab8:	18c000cc 	andi	r3,r3,3
 2006abc:	94400015 	stw	r17,0(r18)
 2006ac0:	1461c83a 	sub	r16,r2,r17
 2006ac4:	18002526 	beq	r3,zero,2006b5c <_fflush_r+0x18c>
 2006ac8:	0005883a 	mov	r2,zero
 2006acc:	90800215 	stw	r2,8(r18)
 2006ad0:	0400170e 	bge	zero,r16,2006b30 <_fflush_r+0x160>
 2006ad4:	90c00917 	ldw	r3,36(r18)
 2006ad8:	91400717 	ldw	r5,28(r18)
 2006adc:	880d883a 	mov	r6,r17
 2006ae0:	800f883a 	mov	r7,r16
 2006ae4:	9809883a 	mov	r4,r19
 2006ae8:	183ee83a 	callr	r3
 2006aec:	88a3883a 	add	r17,r17,r2
 2006af0:	80a1c83a 	sub	r16,r16,r2
 2006af4:	00bff616 	blt	zero,r2,2006ad0 <_fflush_r+0x100>
 2006af8:	9080030b 	ldhu	r2,12(r18)
 2006afc:	00ffffc4 	movi	r3,-1
 2006b00:	10801014 	ori	r2,r2,64
 2006b04:	9080030d 	sth	r2,12(r18)
 2006b08:	1805883a 	mov	r2,r3
 2006b0c:	dfc00417 	ldw	ra,16(sp)
 2006b10:	dcc00317 	ldw	r19,12(sp)
 2006b14:	dc800217 	ldw	r18,8(sp)
 2006b18:	dc400117 	ldw	r17,4(sp)
 2006b1c:	dc000017 	ldw	r16,0(sp)
 2006b20:	dec00504 	addi	sp,sp,20
 2006b24:	f800283a 	ret
 2006b28:	90800f17 	ldw	r2,60(r18)
 2006b2c:	00bfbe16 	blt	zero,r2,2006a28 <_fflush_r+0x58>
 2006b30:	0007883a 	mov	r3,zero
 2006b34:	1805883a 	mov	r2,r3
 2006b38:	dfc00417 	ldw	ra,16(sp)
 2006b3c:	dcc00317 	ldw	r19,12(sp)
 2006b40:	dc800217 	ldw	r18,8(sp)
 2006b44:	dc400117 	ldw	r17,4(sp)
 2006b48:	dc000017 	ldw	r16,0(sp)
 2006b4c:	dec00504 	addi	sp,sp,20
 2006b50:	f800283a 	ret
 2006b54:	2006c680 	call	2006c68 <__sinit>
 2006b58:	003fa806 	br	20069fc <_fflush_r+0x2c>
 2006b5c:	90800517 	ldw	r2,20(r18)
 2006b60:	90800215 	stw	r2,8(r18)
 2006b64:	003fda06 	br	2006ad0 <_fflush_r+0x100>
 2006b68:	90800117 	ldw	r2,4(r18)
 2006b6c:	90c00c17 	ldw	r3,48(r18)
 2006b70:	80a1c83a 	sub	r16,r16,r2
 2006b74:	183fb426 	beq	r3,zero,2006a48 <_fflush_r+0x78>
 2006b78:	90800f17 	ldw	r2,60(r18)
 2006b7c:	80a1c83a 	sub	r16,r16,r2
 2006b80:	003fb106 	br	2006a48 <_fflush_r+0x78>
 2006b84:	91400717 	ldw	r5,28(r18)
 2006b88:	9809883a 	mov	r4,r19
 2006b8c:	000d883a 	mov	r6,zero
 2006b90:	01c00044 	movi	r7,1
 2006b94:	403ee83a 	callr	r8
 2006b98:	1021883a 	mov	r16,r2
 2006b9c:	00bfffc4 	movi	r2,-1
 2006ba0:	80800226 	beq	r16,r2,2006bac <_fflush_r+0x1dc>
 2006ba4:	92000a17 	ldw	r8,40(r18)
 2006ba8:	003fa406 	br	2006a3c <_fflush_r+0x6c>
 2006bac:	98c00017 	ldw	r3,0(r19)
 2006bb0:	00800744 	movi	r2,29
 2006bb4:	18bfde26 	beq	r3,r2,2006b30 <_fflush_r+0x160>
 2006bb8:	9080030b 	ldhu	r2,12(r18)
 2006bbc:	8007883a 	mov	r3,r16
 2006bc0:	10801014 	ori	r2,r2,64
 2006bc4:	9080030d 	sth	r2,12(r18)
 2006bc8:	003fcf06 	br	2006b08 <_fflush_r+0x138>

02006bcc <fflush>:
 2006bcc:	01408034 	movhi	r5,512
 2006bd0:	295a7404 	addi	r5,r5,27088
 2006bd4:	2007883a 	mov	r3,r4
 2006bd8:	20000526 	beq	r4,zero,2006bf0 <fflush+0x24>
 2006bdc:	00808074 	movhi	r2,513
 2006be0:	10850f04 	addi	r2,r2,5180
 2006be4:	11000017 	ldw	r4,0(r2)
 2006be8:	180b883a 	mov	r5,r3
 2006bec:	20069d01 	jmpi	20069d0 <_fflush_r>
 2006bf0:	00808074 	movhi	r2,513
 2006bf4:	10851004 	addi	r2,r2,5184
 2006bf8:	11000017 	ldw	r4,0(r2)
 2006bfc:	200783c1 	jmpi	200783c <_fwalk_reent>

02006c00 <std>:
 2006c00:	00808034 	movhi	r2,512
 2006c04:	108ba704 	addi	r2,r2,11932
 2006c08:	20800b15 	stw	r2,44(r4)
 2006c0c:	00808034 	movhi	r2,512
 2006c10:	108be204 	addi	r2,r2,12168
 2006c14:	20800815 	stw	r2,32(r4)
 2006c18:	00c08034 	movhi	r3,512
 2006c1c:	18cbc304 	addi	r3,r3,12044
 2006c20:	00808034 	movhi	r2,512
 2006c24:	108ba904 	addi	r2,r2,11940
 2006c28:	2140030d 	sth	r5,12(r4)
 2006c2c:	2180038d 	sth	r6,14(r4)
 2006c30:	20c00915 	stw	r3,36(r4)
 2006c34:	20800a15 	stw	r2,40(r4)
 2006c38:	20000015 	stw	zero,0(r4)
 2006c3c:	20000115 	stw	zero,4(r4)
 2006c40:	20000215 	stw	zero,8(r4)
 2006c44:	20000415 	stw	zero,16(r4)
 2006c48:	20000515 	stw	zero,20(r4)
 2006c4c:	20000615 	stw	zero,24(r4)
 2006c50:	21000715 	stw	r4,28(r4)
 2006c54:	f800283a 	ret

02006c58 <__sfp_lock_acquire>:
 2006c58:	f800283a 	ret

02006c5c <__sfp_lock_release>:
 2006c5c:	f800283a 	ret

02006c60 <__sinit_lock_acquire>:
 2006c60:	f800283a 	ret

02006c64 <__sinit_lock_release>:
 2006c64:	f800283a 	ret

02006c68 <__sinit>:
 2006c68:	20800e17 	ldw	r2,56(r4)
 2006c6c:	defffd04 	addi	sp,sp,-12
 2006c70:	dc400115 	stw	r17,4(sp)
 2006c74:	dc000015 	stw	r16,0(sp)
 2006c78:	dfc00215 	stw	ra,8(sp)
 2006c7c:	04400044 	movi	r17,1
 2006c80:	01400104 	movi	r5,4
 2006c84:	000d883a 	mov	r6,zero
 2006c88:	2021883a 	mov	r16,r4
 2006c8c:	2200bb04 	addi	r8,r4,748
 2006c90:	200f883a 	mov	r7,r4
 2006c94:	10000526 	beq	r2,zero,2006cac <__sinit+0x44>
 2006c98:	dfc00217 	ldw	ra,8(sp)
 2006c9c:	dc400117 	ldw	r17,4(sp)
 2006ca0:	dc000017 	ldw	r16,0(sp)
 2006ca4:	dec00304 	addi	sp,sp,12
 2006ca8:	f800283a 	ret
 2006cac:	21000117 	ldw	r4,4(r4)
 2006cb0:	00808034 	movhi	r2,512
 2006cb4:	109b5304 	addi	r2,r2,27980
 2006cb8:	00c000c4 	movi	r3,3
 2006cbc:	80800f15 	stw	r2,60(r16)
 2006cc0:	80c0b915 	stw	r3,740(r16)
 2006cc4:	8200ba15 	stw	r8,744(r16)
 2006cc8:	84400e15 	stw	r17,56(r16)
 2006ccc:	8000b815 	stw	zero,736(r16)
 2006cd0:	2006c000 	call	2006c00 <std>
 2006cd4:	81000217 	ldw	r4,8(r16)
 2006cd8:	880d883a 	mov	r6,r17
 2006cdc:	800f883a 	mov	r7,r16
 2006ce0:	01400284 	movi	r5,10
 2006ce4:	2006c000 	call	2006c00 <std>
 2006ce8:	81000317 	ldw	r4,12(r16)
 2006cec:	800f883a 	mov	r7,r16
 2006cf0:	01400484 	movi	r5,18
 2006cf4:	01800084 	movi	r6,2
 2006cf8:	dfc00217 	ldw	ra,8(sp)
 2006cfc:	dc400117 	ldw	r17,4(sp)
 2006d00:	dc000017 	ldw	r16,0(sp)
 2006d04:	dec00304 	addi	sp,sp,12
 2006d08:	2006c001 	jmpi	2006c00 <std>

02006d0c <__fp_lock>:
 2006d0c:	0005883a 	mov	r2,zero
 2006d10:	f800283a 	ret

02006d14 <__fp_unlock>:
 2006d14:	0005883a 	mov	r2,zero
 2006d18:	f800283a 	ret

02006d1c <__fp_unlock_all>:
 2006d1c:	00808074 	movhi	r2,513
 2006d20:	10850f04 	addi	r2,r2,5180
 2006d24:	11000017 	ldw	r4,0(r2)
 2006d28:	01408034 	movhi	r5,512
 2006d2c:	295b4504 	addi	r5,r5,27924
 2006d30:	20079041 	jmpi	2007904 <_fwalk>

02006d34 <__fp_lock_all>:
 2006d34:	00808074 	movhi	r2,513
 2006d38:	10850f04 	addi	r2,r2,5180
 2006d3c:	11000017 	ldw	r4,0(r2)
 2006d40:	01408034 	movhi	r5,512
 2006d44:	295b4304 	addi	r5,r5,27916
 2006d48:	20079041 	jmpi	2007904 <_fwalk>

02006d4c <_cleanup_r>:
 2006d4c:	01408074 	movhi	r5,513
 2006d50:	29660a04 	addi	r5,r5,-26584
 2006d54:	20079041 	jmpi	2007904 <_fwalk>

02006d58 <_cleanup>:
 2006d58:	00808074 	movhi	r2,513
 2006d5c:	10851004 	addi	r2,r2,5184
 2006d60:	11000017 	ldw	r4,0(r2)
 2006d64:	2006d4c1 	jmpi	2006d4c <_cleanup_r>

02006d68 <__sfmoreglue>:
 2006d68:	defffc04 	addi	sp,sp,-16
 2006d6c:	dc400115 	stw	r17,4(sp)
 2006d70:	2c401724 	muli	r17,r5,92
 2006d74:	dc800215 	stw	r18,8(sp)
 2006d78:	2825883a 	mov	r18,r5
 2006d7c:	89400304 	addi	r5,r17,12
 2006d80:	dc000015 	stw	r16,0(sp)
 2006d84:	dfc00315 	stw	ra,12(sp)
 2006d88:	20022d40 	call	20022d4 <_malloc_r>
 2006d8c:	0021883a 	mov	r16,zero
 2006d90:	880d883a 	mov	r6,r17
 2006d94:	000b883a 	mov	r5,zero
 2006d98:	10000626 	beq	r2,zero,2006db4 <__sfmoreglue+0x4c>
 2006d9c:	11000304 	addi	r4,r2,12
 2006da0:	14800115 	stw	r18,4(r2)
 2006da4:	10000015 	stw	zero,0(r2)
 2006da8:	11000215 	stw	r4,8(r2)
 2006dac:	1021883a 	mov	r16,r2
 2006db0:	2007e400 	call	2007e40 <memset>
 2006db4:	8005883a 	mov	r2,r16
 2006db8:	dfc00317 	ldw	ra,12(sp)
 2006dbc:	dc800217 	ldw	r18,8(sp)
 2006dc0:	dc400117 	ldw	r17,4(sp)
 2006dc4:	dc000017 	ldw	r16,0(sp)
 2006dc8:	dec00404 	addi	sp,sp,16
 2006dcc:	f800283a 	ret

02006dd0 <__sfp>:
 2006dd0:	defffd04 	addi	sp,sp,-12
 2006dd4:	00808074 	movhi	r2,513
 2006dd8:	10851004 	addi	r2,r2,5184
 2006ddc:	dc000015 	stw	r16,0(sp)
 2006de0:	14000017 	ldw	r16,0(r2)
 2006de4:	dc400115 	stw	r17,4(sp)
 2006de8:	dfc00215 	stw	ra,8(sp)
 2006dec:	80800e17 	ldw	r2,56(r16)
 2006df0:	2023883a 	mov	r17,r4
 2006df4:	10002626 	beq	r2,zero,2006e90 <__sfp+0xc0>
 2006df8:	8400b804 	addi	r16,r16,736
 2006dfc:	80800117 	ldw	r2,4(r16)
 2006e00:	81000217 	ldw	r4,8(r16)
 2006e04:	10ffffc4 	addi	r3,r2,-1
 2006e08:	18000916 	blt	r3,zero,2006e30 <__sfp+0x60>
 2006e0c:	2080030f 	ldh	r2,12(r4)
 2006e10:	10000b26 	beq	r2,zero,2006e40 <__sfp+0x70>
 2006e14:	017fffc4 	movi	r5,-1
 2006e18:	00000206 	br	2006e24 <__sfp+0x54>
 2006e1c:	2080030f 	ldh	r2,12(r4)
 2006e20:	10000726 	beq	r2,zero,2006e40 <__sfp+0x70>
 2006e24:	18ffffc4 	addi	r3,r3,-1
 2006e28:	21001704 	addi	r4,r4,92
 2006e2c:	197ffb1e 	bne	r3,r5,2006e1c <__sfp+0x4c>
 2006e30:	80800017 	ldw	r2,0(r16)
 2006e34:	10001926 	beq	r2,zero,2006e9c <__sfp+0xcc>
 2006e38:	1021883a 	mov	r16,r2
 2006e3c:	003fef06 	br	2006dfc <__sfp+0x2c>
 2006e40:	00bfffc4 	movi	r2,-1
 2006e44:	00c00044 	movi	r3,1
 2006e48:	2080038d 	sth	r2,14(r4)
 2006e4c:	20c0030d 	sth	r3,12(r4)
 2006e50:	20000015 	stw	zero,0(r4)
 2006e54:	20000215 	stw	zero,8(r4)
 2006e58:	20000115 	stw	zero,4(r4)
 2006e5c:	20000415 	stw	zero,16(r4)
 2006e60:	20000515 	stw	zero,20(r4)
 2006e64:	20000615 	stw	zero,24(r4)
 2006e68:	20000c15 	stw	zero,48(r4)
 2006e6c:	20000d15 	stw	zero,52(r4)
 2006e70:	20001115 	stw	zero,68(r4)
 2006e74:	20001215 	stw	zero,72(r4)
 2006e78:	2005883a 	mov	r2,r4
 2006e7c:	dfc00217 	ldw	ra,8(sp)
 2006e80:	dc400117 	ldw	r17,4(sp)
 2006e84:	dc000017 	ldw	r16,0(sp)
 2006e88:	dec00304 	addi	sp,sp,12
 2006e8c:	f800283a 	ret
 2006e90:	8009883a 	mov	r4,r16
 2006e94:	2006c680 	call	2006c68 <__sinit>
 2006e98:	003fd706 	br	2006df8 <__sfp+0x28>
 2006e9c:	8809883a 	mov	r4,r17
 2006ea0:	01400104 	movi	r5,4
 2006ea4:	2006d680 	call	2006d68 <__sfmoreglue>
 2006ea8:	80800015 	stw	r2,0(r16)
 2006eac:	103fe21e 	bne	r2,zero,2006e38 <__sfp+0x68>
 2006eb0:	00800304 	movi	r2,12
 2006eb4:	0009883a 	mov	r4,zero
 2006eb8:	88800015 	stw	r2,0(r17)
 2006ebc:	003fee06 	br	2006e78 <__sfp+0xa8>

02006ec0 <__sflags>:
 2006ec0:	28c00007 	ldb	r3,0(r5)
 2006ec4:	00801c84 	movi	r2,114
 2006ec8:	18800926 	beq	r3,r2,2006ef0 <__sflags+0x30>
 2006ecc:	00801dc4 	movi	r2,119
 2006ed0:	18801426 	beq	r3,r2,2006f24 <__sflags+0x64>
 2006ed4:	00801844 	movi	r2,97
 2006ed8:	18801626 	beq	r3,r2,2006f34 <__sflags+0x74>
 2006edc:	0007883a 	mov	r3,zero
 2006ee0:	00800584 	movi	r2,22
 2006ee4:	20800015 	stw	r2,0(r4)
 2006ee8:	1805883a 	mov	r2,r3
 2006eec:	f800283a 	ret
 2006ef0:	000f883a 	mov	r7,zero
 2006ef4:	0011883a 	mov	r8,zero
 2006ef8:	00c00104 	movi	r3,4
 2006efc:	28800047 	ldb	r2,1(r5)
 2006f00:	10000426 	beq	r2,zero,2006f14 <__sflags+0x54>
 2006f04:	01000ac4 	movi	r4,43
 2006f08:	11000e26 	beq	r2,r4,2006f44 <__sflags+0x84>
 2006f0c:	28800087 	ldb	r2,2(r5)
 2006f10:	11000c26 	beq	r2,r4,2006f44 <__sflags+0x84>
 2006f14:	3a04b03a 	or	r2,r7,r8
 2006f18:	30800015 	stw	r2,0(r6)
 2006f1c:	1805883a 	mov	r2,r3
 2006f20:	f800283a 	ret
 2006f24:	01c00044 	movi	r7,1
 2006f28:	02018004 	movi	r8,1536
 2006f2c:	00c00204 	movi	r3,8
 2006f30:	003ff206 	br	2006efc <__sflags+0x3c>
 2006f34:	01c00044 	movi	r7,1
 2006f38:	02008204 	movi	r8,520
 2006f3c:	00c04204 	movi	r3,264
 2006f40:	003fee06 	br	2006efc <__sflags+0x3c>
 2006f44:	00bffcc4 	movi	r2,-13
 2006f48:	1884703a 	and	r2,r3,r2
 2006f4c:	01c00084 	movi	r7,2
 2006f50:	10c00414 	ori	r3,r2,16
 2006f54:	3a04b03a 	or	r2,r7,r8
 2006f58:	30800015 	stw	r2,0(r6)
 2006f5c:	003fef06 	br	2006f1c <__sflags+0x5c>

02006f60 <_malloc_trim_r>:
 2006f60:	defffb04 	addi	sp,sp,-20
 2006f64:	dcc00315 	stw	r19,12(sp)
 2006f68:	04c08074 	movhi	r19,513
 2006f6c:	9cff4004 	addi	r19,r19,-768
 2006f70:	dc800215 	stw	r18,8(sp)
 2006f74:	dc400115 	stw	r17,4(sp)
 2006f78:	dc000015 	stw	r16,0(sp)
 2006f7c:	2823883a 	mov	r17,r5
 2006f80:	2025883a 	mov	r18,r4
 2006f84:	dfc00415 	stw	ra,16(sp)
 2006f88:	200bc140 	call	200bc14 <__malloc_lock>
 2006f8c:	98800217 	ldw	r2,8(r19)
 2006f90:	9009883a 	mov	r4,r18
 2006f94:	000b883a 	mov	r5,zero
 2006f98:	10c00117 	ldw	r3,4(r2)
 2006f9c:	00bfff04 	movi	r2,-4
 2006fa0:	18a0703a 	and	r16,r3,r2
 2006fa4:	8463c83a 	sub	r17,r16,r17
 2006fa8:	8c43fbc4 	addi	r17,r17,4079
 2006fac:	8822d33a 	srli	r17,r17,12
 2006fb0:	0083ffc4 	movi	r2,4095
 2006fb4:	8c7fffc4 	addi	r17,r17,-1
 2006fb8:	8822933a 	slli	r17,r17,12
 2006fbc:	1440060e 	bge	r2,r17,2006fd8 <_malloc_trim_r+0x78>
 2006fc0:	2002e2c0 	call	2002e2c <_sbrk_r>
 2006fc4:	98c00217 	ldw	r3,8(r19)
 2006fc8:	9009883a 	mov	r4,r18
 2006fcc:	044bc83a 	sub	r5,zero,r17
 2006fd0:	80c7883a 	add	r3,r16,r3
 2006fd4:	10c00926 	beq	r2,r3,2006ffc <_malloc_trim_r+0x9c>
 2006fd8:	200bc340 	call	200bc34 <__malloc_unlock>
 2006fdc:	0005883a 	mov	r2,zero
 2006fe0:	dfc00417 	ldw	ra,16(sp)
 2006fe4:	dcc00317 	ldw	r19,12(sp)
 2006fe8:	dc800217 	ldw	r18,8(sp)
 2006fec:	dc400117 	ldw	r17,4(sp)
 2006ff0:	dc000017 	ldw	r16,0(sp)
 2006ff4:	dec00504 	addi	sp,sp,20
 2006ff8:	f800283a 	ret
 2006ffc:	9009883a 	mov	r4,r18
 2007000:	2002e2c0 	call	2002e2c <_sbrk_r>
 2007004:	844dc83a 	sub	r6,r16,r17
 2007008:	00ffffc4 	movi	r3,-1
 200700c:	9009883a 	mov	r4,r18
 2007010:	000b883a 	mov	r5,zero
 2007014:	01c08074 	movhi	r7,513
 2007018:	39cc1704 	addi	r7,r7,12380
 200701c:	31800054 	ori	r6,r6,1
 2007020:	10c00926 	beq	r2,r3,2007048 <_malloc_trim_r+0xe8>
 2007024:	38800017 	ldw	r2,0(r7)
 2007028:	98c00217 	ldw	r3,8(r19)
 200702c:	9009883a 	mov	r4,r18
 2007030:	1445c83a 	sub	r2,r2,r17
 2007034:	38800015 	stw	r2,0(r7)
 2007038:	19800115 	stw	r6,4(r3)
 200703c:	200bc340 	call	200bc34 <__malloc_unlock>
 2007040:	00800044 	movi	r2,1
 2007044:	003fe606 	br	2006fe0 <_malloc_trim_r+0x80>
 2007048:	2002e2c0 	call	2002e2c <_sbrk_r>
 200704c:	99800217 	ldw	r6,8(r19)
 2007050:	100f883a 	mov	r7,r2
 2007054:	9009883a 	mov	r4,r18
 2007058:	1187c83a 	sub	r3,r2,r6
 200705c:	008003c4 	movi	r2,15
 2007060:	19400054 	ori	r5,r3,1
 2007064:	10ffdc0e 	bge	r2,r3,2006fd8 <_malloc_trim_r+0x78>
 2007068:	00808074 	movhi	r2,513
 200706c:	10851204 	addi	r2,r2,5192
 2007070:	10c00017 	ldw	r3,0(r2)
 2007074:	00808074 	movhi	r2,513
 2007078:	108c1704 	addi	r2,r2,12380
 200707c:	31400115 	stw	r5,4(r6)
 2007080:	38c7c83a 	sub	r3,r7,r3
 2007084:	10c00015 	stw	r3,0(r2)
 2007088:	003fd306 	br	2006fd8 <_malloc_trim_r+0x78>

0200708c <_free_r>:
 200708c:	defffd04 	addi	sp,sp,-12
 2007090:	dc400115 	stw	r17,4(sp)
 2007094:	dc000015 	stw	r16,0(sp)
 2007098:	dfc00215 	stw	ra,8(sp)
 200709c:	2821883a 	mov	r16,r5
 20070a0:	2023883a 	mov	r17,r4
 20070a4:	28005a26 	beq	r5,zero,2007210 <_free_r+0x184>
 20070a8:	200bc140 	call	200bc14 <__malloc_lock>
 20070ac:	823ffe04 	addi	r8,r16,-8
 20070b0:	41400117 	ldw	r5,4(r8)
 20070b4:	00bfff84 	movi	r2,-2
 20070b8:	02808074 	movhi	r10,513
 20070bc:	52bf4004 	addi	r10,r10,-768
 20070c0:	288e703a 	and	r7,r5,r2
 20070c4:	41cd883a 	add	r6,r8,r7
 20070c8:	30c00117 	ldw	r3,4(r6)
 20070cc:	51000217 	ldw	r4,8(r10)
 20070d0:	00bfff04 	movi	r2,-4
 20070d4:	1892703a 	and	r9,r3,r2
 20070d8:	5017883a 	mov	r11,r10
 20070dc:	31006726 	beq	r6,r4,200727c <_free_r+0x1f0>
 20070e0:	2880004c 	andi	r2,r5,1
 20070e4:	1005003a 	cmpeq	r2,r2,zero
 20070e8:	32400115 	stw	r9,4(r6)
 20070ec:	10001a1e 	bne	r2,zero,2007158 <_free_r+0xcc>
 20070f0:	000b883a 	mov	r5,zero
 20070f4:	3247883a 	add	r3,r6,r9
 20070f8:	18800117 	ldw	r2,4(r3)
 20070fc:	1080004c 	andi	r2,r2,1
 2007100:	1000231e 	bne	r2,zero,2007190 <_free_r+0x104>
 2007104:	280ac03a 	cmpne	r5,r5,zero
 2007108:	3a4f883a 	add	r7,r7,r9
 200710c:	2800451e 	bne	r5,zero,2007224 <_free_r+0x198>
 2007110:	31000217 	ldw	r4,8(r6)
 2007114:	00808074 	movhi	r2,513
 2007118:	10bf4204 	addi	r2,r2,-760
 200711c:	20807b26 	beq	r4,r2,200730c <_free_r+0x280>
 2007120:	30800317 	ldw	r2,12(r6)
 2007124:	3a07883a 	add	r3,r7,r8
 2007128:	19c00015 	stw	r7,0(r3)
 200712c:	11000215 	stw	r4,8(r2)
 2007130:	20800315 	stw	r2,12(r4)
 2007134:	38800054 	ori	r2,r7,1
 2007138:	40800115 	stw	r2,4(r8)
 200713c:	28001a26 	beq	r5,zero,20071a8 <_free_r+0x11c>
 2007140:	8809883a 	mov	r4,r17
 2007144:	dfc00217 	ldw	ra,8(sp)
 2007148:	dc400117 	ldw	r17,4(sp)
 200714c:	dc000017 	ldw	r16,0(sp)
 2007150:	dec00304 	addi	sp,sp,12
 2007154:	200bc341 	jmpi	200bc34 <__malloc_unlock>
 2007158:	80bffe17 	ldw	r2,-8(r16)
 200715c:	50c00204 	addi	r3,r10,8
 2007160:	4091c83a 	sub	r8,r8,r2
 2007164:	41000217 	ldw	r4,8(r8)
 2007168:	388f883a 	add	r7,r7,r2
 200716c:	20c06126 	beq	r4,r3,20072f4 <_free_r+0x268>
 2007170:	40800317 	ldw	r2,12(r8)
 2007174:	3247883a 	add	r3,r6,r9
 2007178:	000b883a 	mov	r5,zero
 200717c:	11000215 	stw	r4,8(r2)
 2007180:	20800315 	stw	r2,12(r4)
 2007184:	18800117 	ldw	r2,4(r3)
 2007188:	1080004c 	andi	r2,r2,1
 200718c:	103fdd26 	beq	r2,zero,2007104 <_free_r+0x78>
 2007190:	38800054 	ori	r2,r7,1
 2007194:	3a07883a 	add	r3,r7,r8
 2007198:	280ac03a 	cmpne	r5,r5,zero
 200719c:	40800115 	stw	r2,4(r8)
 20071a0:	19c00015 	stw	r7,0(r3)
 20071a4:	283fe61e 	bne	r5,zero,2007140 <_free_r+0xb4>
 20071a8:	00807fc4 	movi	r2,511
 20071ac:	11c01f2e 	bgeu	r2,r7,200722c <_free_r+0x1a0>
 20071b0:	3806d27a 	srli	r3,r7,9
 20071b4:	1800481e 	bne	r3,zero,20072d8 <_free_r+0x24c>
 20071b8:	3804d0fa 	srli	r2,r7,3
 20071bc:	100690fa 	slli	r3,r2,3
 20071c0:	1acd883a 	add	r6,r3,r11
 20071c4:	31400217 	ldw	r5,8(r6)
 20071c8:	31405926 	beq	r6,r5,2007330 <_free_r+0x2a4>
 20071cc:	28800117 	ldw	r2,4(r5)
 20071d0:	00ffff04 	movi	r3,-4
 20071d4:	10c4703a 	and	r2,r2,r3
 20071d8:	3880022e 	bgeu	r7,r2,20071e4 <_free_r+0x158>
 20071dc:	29400217 	ldw	r5,8(r5)
 20071e0:	317ffa1e 	bne	r6,r5,20071cc <_free_r+0x140>
 20071e4:	29800317 	ldw	r6,12(r5)
 20071e8:	41800315 	stw	r6,12(r8)
 20071ec:	41400215 	stw	r5,8(r8)
 20071f0:	8809883a 	mov	r4,r17
 20071f4:	2a000315 	stw	r8,12(r5)
 20071f8:	32000215 	stw	r8,8(r6)
 20071fc:	dfc00217 	ldw	ra,8(sp)
 2007200:	dc400117 	ldw	r17,4(sp)
 2007204:	dc000017 	ldw	r16,0(sp)
 2007208:	dec00304 	addi	sp,sp,12
 200720c:	200bc341 	jmpi	200bc34 <__malloc_unlock>
 2007210:	dfc00217 	ldw	ra,8(sp)
 2007214:	dc400117 	ldw	r17,4(sp)
 2007218:	dc000017 	ldw	r16,0(sp)
 200721c:	dec00304 	addi	sp,sp,12
 2007220:	f800283a 	ret
 2007224:	31000217 	ldw	r4,8(r6)
 2007228:	003fbd06 	br	2007120 <_free_r+0x94>
 200722c:	3806d0fa 	srli	r3,r7,3
 2007230:	00800044 	movi	r2,1
 2007234:	51400117 	ldw	r5,4(r10)
 2007238:	180890fa 	slli	r4,r3,3
 200723c:	1807d0ba 	srai	r3,r3,2
 2007240:	22c9883a 	add	r4,r4,r11
 2007244:	21800217 	ldw	r6,8(r4)
 2007248:	10c4983a 	sll	r2,r2,r3
 200724c:	41000315 	stw	r4,12(r8)
 2007250:	41800215 	stw	r6,8(r8)
 2007254:	288ab03a 	or	r5,r5,r2
 2007258:	22000215 	stw	r8,8(r4)
 200725c:	8809883a 	mov	r4,r17
 2007260:	51400115 	stw	r5,4(r10)
 2007264:	32000315 	stw	r8,12(r6)
 2007268:	dfc00217 	ldw	ra,8(sp)
 200726c:	dc400117 	ldw	r17,4(sp)
 2007270:	dc000017 	ldw	r16,0(sp)
 2007274:	dec00304 	addi	sp,sp,12
 2007278:	200bc341 	jmpi	200bc34 <__malloc_unlock>
 200727c:	2880004c 	andi	r2,r5,1
 2007280:	3a4d883a 	add	r6,r7,r9
 2007284:	1000071e 	bne	r2,zero,20072a4 <_free_r+0x218>
 2007288:	80bffe17 	ldw	r2,-8(r16)
 200728c:	4091c83a 	sub	r8,r8,r2
 2007290:	41000317 	ldw	r4,12(r8)
 2007294:	40c00217 	ldw	r3,8(r8)
 2007298:	308d883a 	add	r6,r6,r2
 200729c:	20c00215 	stw	r3,8(r4)
 20072a0:	19000315 	stw	r4,12(r3)
 20072a4:	00808074 	movhi	r2,513
 20072a8:	10851104 	addi	r2,r2,5188
 20072ac:	11000017 	ldw	r4,0(r2)
 20072b0:	30c00054 	ori	r3,r6,1
 20072b4:	52000215 	stw	r8,8(r10)
 20072b8:	40c00115 	stw	r3,4(r8)
 20072bc:	313fa036 	bltu	r6,r4,2007140 <_free_r+0xb4>
 20072c0:	00808074 	movhi	r2,513
 20072c4:	108c0704 	addi	r2,r2,12316
 20072c8:	11400017 	ldw	r5,0(r2)
 20072cc:	8809883a 	mov	r4,r17
 20072d0:	2006f600 	call	2006f60 <_malloc_trim_r>
 20072d4:	003f9a06 	br	2007140 <_free_r+0xb4>
 20072d8:	00800104 	movi	r2,4
 20072dc:	10c0072e 	bgeu	r2,r3,20072fc <_free_r+0x270>
 20072e0:	00800504 	movi	r2,20
 20072e4:	10c01936 	bltu	r2,r3,200734c <_free_r+0x2c0>
 20072e8:	188016c4 	addi	r2,r3,91
 20072ec:	100690fa 	slli	r3,r2,3
 20072f0:	003fb306 	br	20071c0 <_free_r+0x134>
 20072f4:	01400044 	movi	r5,1
 20072f8:	003f7e06 	br	20070f4 <_free_r+0x68>
 20072fc:	3804d1ba 	srli	r2,r7,6
 2007300:	10800e04 	addi	r2,r2,56
 2007304:	100690fa 	slli	r3,r2,3
 2007308:	003fad06 	br	20071c0 <_free_r+0x134>
 200730c:	22000315 	stw	r8,12(r4)
 2007310:	22000215 	stw	r8,8(r4)
 2007314:	3a05883a 	add	r2,r7,r8
 2007318:	38c00054 	ori	r3,r7,1
 200731c:	11c00015 	stw	r7,0(r2)
 2007320:	41000215 	stw	r4,8(r8)
 2007324:	40c00115 	stw	r3,4(r8)
 2007328:	41000315 	stw	r4,12(r8)
 200732c:	003f8406 	br	2007140 <_free_r+0xb4>
 2007330:	1005d0ba 	srai	r2,r2,2
 2007334:	00c00044 	movi	r3,1
 2007338:	51000117 	ldw	r4,4(r10)
 200733c:	1886983a 	sll	r3,r3,r2
 2007340:	20c8b03a 	or	r4,r4,r3
 2007344:	51000115 	stw	r4,4(r10)
 2007348:	003fa706 	br	20071e8 <_free_r+0x15c>
 200734c:	00801504 	movi	r2,84
 2007350:	10c00436 	bltu	r2,r3,2007364 <_free_r+0x2d8>
 2007354:	3804d33a 	srli	r2,r7,12
 2007358:	10801b84 	addi	r2,r2,110
 200735c:	100690fa 	slli	r3,r2,3
 2007360:	003f9706 	br	20071c0 <_free_r+0x134>
 2007364:	00805504 	movi	r2,340
 2007368:	10c00436 	bltu	r2,r3,200737c <_free_r+0x2f0>
 200736c:	3804d3fa 	srli	r2,r7,15
 2007370:	10801dc4 	addi	r2,r2,119
 2007374:	100690fa 	slli	r3,r2,3
 2007378:	003f9106 	br	20071c0 <_free_r+0x134>
 200737c:	00815504 	movi	r2,1364
 2007380:	10c0032e 	bgeu	r2,r3,2007390 <_free_r+0x304>
 2007384:	00801f84 	movi	r2,126
 2007388:	00c0fc04 	movi	r3,1008
 200738c:	003f8c06 	br	20071c0 <_free_r+0x134>
 2007390:	3804d4ba 	srli	r2,r7,18
 2007394:	10801f04 	addi	r2,r2,124
 2007398:	100690fa 	slli	r3,r2,3
 200739c:	003f8806 	br	20071c0 <_free_r+0x134>

020073a0 <__sfvwrite_r>:
 20073a0:	30800217 	ldw	r2,8(r6)
 20073a4:	defff504 	addi	sp,sp,-44
 20073a8:	df000915 	stw	fp,36(sp)
 20073ac:	dd800715 	stw	r22,28(sp)
 20073b0:	dc800315 	stw	r18,12(sp)
 20073b4:	dfc00a15 	stw	ra,40(sp)
 20073b8:	ddc00815 	stw	r23,32(sp)
 20073bc:	dd400615 	stw	r21,24(sp)
 20073c0:	dd000515 	stw	r20,20(sp)
 20073c4:	dcc00415 	stw	r19,16(sp)
 20073c8:	dc400215 	stw	r17,8(sp)
 20073cc:	dc000115 	stw	r16,4(sp)
 20073d0:	302d883a 	mov	r22,r6
 20073d4:	2039883a 	mov	fp,r4
 20073d8:	2825883a 	mov	r18,r5
 20073dc:	10001c26 	beq	r2,zero,2007450 <__sfvwrite_r+0xb0>
 20073e0:	29c0030b 	ldhu	r7,12(r5)
 20073e4:	3880020c 	andi	r2,r7,8
 20073e8:	10002726 	beq	r2,zero,2007488 <__sfvwrite_r+0xe8>
 20073ec:	28800417 	ldw	r2,16(r5)
 20073f0:	10002526 	beq	r2,zero,2007488 <__sfvwrite_r+0xe8>
 20073f4:	3880008c 	andi	r2,r7,2
 20073f8:	b5400017 	ldw	r21,0(r22)
 20073fc:	10002826 	beq	r2,zero,20074a0 <__sfvwrite_r+0x100>
 2007400:	0021883a 	mov	r16,zero
 2007404:	0023883a 	mov	r17,zero
 2007408:	880d883a 	mov	r6,r17
 200740c:	e009883a 	mov	r4,fp
 2007410:	00810004 	movi	r2,1024
 2007414:	80006e26 	beq	r16,zero,20075d0 <__sfvwrite_r+0x230>
 2007418:	800f883a 	mov	r7,r16
 200741c:	91400717 	ldw	r5,28(r18)
 2007420:	1400012e 	bgeu	r2,r16,2007428 <__sfvwrite_r+0x88>
 2007424:	100f883a 	mov	r7,r2
 2007428:	90c00917 	ldw	r3,36(r18)
 200742c:	183ee83a 	callr	r3
 2007430:	1007883a 	mov	r3,r2
 2007434:	80a1c83a 	sub	r16,r16,r2
 2007438:	88a3883a 	add	r17,r17,r2
 200743c:	00806d0e 	bge	zero,r2,20075f4 <__sfvwrite_r+0x254>
 2007440:	b0800217 	ldw	r2,8(r22)
 2007444:	10c5c83a 	sub	r2,r2,r3
 2007448:	b0800215 	stw	r2,8(r22)
 200744c:	103fee1e 	bne	r2,zero,2007408 <__sfvwrite_r+0x68>
 2007450:	0009883a 	mov	r4,zero
 2007454:	2005883a 	mov	r2,r4
 2007458:	dfc00a17 	ldw	ra,40(sp)
 200745c:	df000917 	ldw	fp,36(sp)
 2007460:	ddc00817 	ldw	r23,32(sp)
 2007464:	dd800717 	ldw	r22,28(sp)
 2007468:	dd400617 	ldw	r21,24(sp)
 200746c:	dd000517 	ldw	r20,20(sp)
 2007470:	dcc00417 	ldw	r19,16(sp)
 2007474:	dc800317 	ldw	r18,12(sp)
 2007478:	dc400217 	ldw	r17,8(sp)
 200747c:	dc000117 	ldw	r16,4(sp)
 2007480:	dec00b04 	addi	sp,sp,44
 2007484:	f800283a 	ret
 2007488:	20050580 	call	2005058 <__swsetup_r>
 200748c:	1000e41e 	bne	r2,zero,2007820 <__sfvwrite_r+0x480>
 2007490:	91c0030b 	ldhu	r7,12(r18)
 2007494:	b5400017 	ldw	r21,0(r22)
 2007498:	3880008c 	andi	r2,r7,2
 200749c:	103fd81e 	bne	r2,zero,2007400 <__sfvwrite_r+0x60>
 20074a0:	3880004c 	andi	r2,r7,1
 20074a4:	1005003a 	cmpeq	r2,r2,zero
 20074a8:	10005726 	beq	r2,zero,2007608 <__sfvwrite_r+0x268>
 20074ac:	0029883a 	mov	r20,zero
 20074b0:	002f883a 	mov	r23,zero
 20074b4:	a0004226 	beq	r20,zero,20075c0 <__sfvwrite_r+0x220>
 20074b8:	3880800c 	andi	r2,r7,512
 20074bc:	94000217 	ldw	r16,8(r18)
 20074c0:	10008b26 	beq	r2,zero,20076f0 <__sfvwrite_r+0x350>
 20074c4:	800d883a 	mov	r6,r16
 20074c8:	a400a536 	bltu	r20,r16,2007760 <__sfvwrite_r+0x3c0>
 20074cc:	3881200c 	andi	r2,r7,1152
 20074d0:	10002726 	beq	r2,zero,2007570 <__sfvwrite_r+0x1d0>
 20074d4:	90800517 	ldw	r2,20(r18)
 20074d8:	92000417 	ldw	r8,16(r18)
 20074dc:	91400017 	ldw	r5,0(r18)
 20074e0:	1087883a 	add	r3,r2,r2
 20074e4:	1887883a 	add	r3,r3,r2
 20074e8:	1808d7fa 	srli	r4,r3,31
 20074ec:	2a21c83a 	sub	r16,r5,r8
 20074f0:	80800044 	addi	r2,r16,1
 20074f4:	20c9883a 	add	r4,r4,r3
 20074f8:	2027d07a 	srai	r19,r4,1
 20074fc:	a085883a 	add	r2,r20,r2
 2007500:	980d883a 	mov	r6,r19
 2007504:	9880022e 	bgeu	r19,r2,2007510 <__sfvwrite_r+0x170>
 2007508:	1027883a 	mov	r19,r2
 200750c:	100d883a 	mov	r6,r2
 2007510:	3881000c 	andi	r2,r7,1024
 2007514:	1000b826 	beq	r2,zero,20077f8 <__sfvwrite_r+0x458>
 2007518:	300b883a 	mov	r5,r6
 200751c:	e009883a 	mov	r4,fp
 2007520:	20022d40 	call	20022d4 <_malloc_r>
 2007524:	10003126 	beq	r2,zero,20075ec <__sfvwrite_r+0x24c>
 2007528:	91400417 	ldw	r5,16(r18)
 200752c:	1009883a 	mov	r4,r2
 2007530:	800d883a 	mov	r6,r16
 2007534:	1023883a 	mov	r17,r2
 2007538:	2007cc00 	call	2007cc0 <memcpy>
 200753c:	90c0030b 	ldhu	r3,12(r18)
 2007540:	00beffc4 	movi	r2,-1025
 2007544:	1886703a 	and	r3,r3,r2
 2007548:	18c02014 	ori	r3,r3,128
 200754c:	90c0030d 	sth	r3,12(r18)
 2007550:	9c07c83a 	sub	r3,r19,r16
 2007554:	8c05883a 	add	r2,r17,r16
 2007558:	a00d883a 	mov	r6,r20
 200755c:	a021883a 	mov	r16,r20
 2007560:	90800015 	stw	r2,0(r18)
 2007564:	90c00215 	stw	r3,8(r18)
 2007568:	94400415 	stw	r17,16(r18)
 200756c:	94c00515 	stw	r19,20(r18)
 2007570:	91000017 	ldw	r4,0(r18)
 2007574:	b80b883a 	mov	r5,r23
 2007578:	a023883a 	mov	r17,r20
 200757c:	2007d600 	call	2007d60 <memmove>
 2007580:	90c00217 	ldw	r3,8(r18)
 2007584:	90800017 	ldw	r2,0(r18)
 2007588:	a027883a 	mov	r19,r20
 200758c:	1c07c83a 	sub	r3,r3,r16
 2007590:	1405883a 	add	r2,r2,r16
 2007594:	90c00215 	stw	r3,8(r18)
 2007598:	a021883a 	mov	r16,r20
 200759c:	90800015 	stw	r2,0(r18)
 20075a0:	b0800217 	ldw	r2,8(r22)
 20075a4:	1405c83a 	sub	r2,r2,r16
 20075a8:	b0800215 	stw	r2,8(r22)
 20075ac:	103fa826 	beq	r2,zero,2007450 <__sfvwrite_r+0xb0>
 20075b0:	a469c83a 	sub	r20,r20,r17
 20075b4:	91c0030b 	ldhu	r7,12(r18)
 20075b8:	bcef883a 	add	r23,r23,r19
 20075bc:	a03fbe1e 	bne	r20,zero,20074b8 <__sfvwrite_r+0x118>
 20075c0:	adc00017 	ldw	r23,0(r21)
 20075c4:	ad000117 	ldw	r20,4(r21)
 20075c8:	ad400204 	addi	r21,r21,8
 20075cc:	003fb906 	br	20074b4 <__sfvwrite_r+0x114>
 20075d0:	ac400017 	ldw	r17,0(r21)
 20075d4:	ac000117 	ldw	r16,4(r21)
 20075d8:	ad400204 	addi	r21,r21,8
 20075dc:	003f8a06 	br	2007408 <__sfvwrite_r+0x68>
 20075e0:	91400417 	ldw	r5,16(r18)
 20075e4:	e009883a 	mov	r4,fp
 20075e8:	200708c0 	call	200708c <_free_r>
 20075ec:	00800304 	movi	r2,12
 20075f0:	e0800015 	stw	r2,0(fp)
 20075f4:	9080030b 	ldhu	r2,12(r18)
 20075f8:	013fffc4 	movi	r4,-1
 20075fc:	10801014 	ori	r2,r2,64
 2007600:	9080030d 	sth	r2,12(r18)
 2007604:	003f9306 	br	2007454 <__sfvwrite_r+0xb4>
 2007608:	0027883a 	mov	r19,zero
 200760c:	002f883a 	mov	r23,zero
 2007610:	d8000015 	stw	zero,0(sp)
 2007614:	0029883a 	mov	r20,zero
 2007618:	98001e26 	beq	r19,zero,2007694 <__sfvwrite_r+0x2f4>
 200761c:	d8c00017 	ldw	r3,0(sp)
 2007620:	1804c03a 	cmpne	r2,r3,zero
 2007624:	10005e26 	beq	r2,zero,20077a0 <__sfvwrite_r+0x400>
 2007628:	9821883a 	mov	r16,r19
 200762c:	a4c0012e 	bgeu	r20,r19,2007634 <__sfvwrite_r+0x294>
 2007630:	a021883a 	mov	r16,r20
 2007634:	91000017 	ldw	r4,0(r18)
 2007638:	90800417 	ldw	r2,16(r18)
 200763c:	91800217 	ldw	r6,8(r18)
 2007640:	91c00517 	ldw	r7,20(r18)
 2007644:	1100022e 	bgeu	r2,r4,2007650 <__sfvwrite_r+0x2b0>
 2007648:	31e3883a 	add	r17,r6,r7
 200764c:	8c001616 	blt	r17,r16,20076a8 <__sfvwrite_r+0x308>
 2007650:	81c03816 	blt	r16,r7,2007734 <__sfvwrite_r+0x394>
 2007654:	90c00917 	ldw	r3,36(r18)
 2007658:	91400717 	ldw	r5,28(r18)
 200765c:	e009883a 	mov	r4,fp
 2007660:	b80d883a 	mov	r6,r23
 2007664:	183ee83a 	callr	r3
 2007668:	1023883a 	mov	r17,r2
 200766c:	00bfe10e 	bge	zero,r2,20075f4 <__sfvwrite_r+0x254>
 2007670:	a469c83a 	sub	r20,r20,r17
 2007674:	a0001826 	beq	r20,zero,20076d8 <__sfvwrite_r+0x338>
 2007678:	b0800217 	ldw	r2,8(r22)
 200767c:	1445c83a 	sub	r2,r2,r17
 2007680:	b0800215 	stw	r2,8(r22)
 2007684:	103f7226 	beq	r2,zero,2007450 <__sfvwrite_r+0xb0>
 2007688:	9c67c83a 	sub	r19,r19,r17
 200768c:	bc6f883a 	add	r23,r23,r17
 2007690:	983fe21e 	bne	r19,zero,200761c <__sfvwrite_r+0x27c>
 2007694:	adc00017 	ldw	r23,0(r21)
 2007698:	acc00117 	ldw	r19,4(r21)
 200769c:	ad400204 	addi	r21,r21,8
 20076a0:	d8000015 	stw	zero,0(sp)
 20076a4:	003fdc06 	br	2007618 <__sfvwrite_r+0x278>
 20076a8:	b80b883a 	mov	r5,r23
 20076ac:	880d883a 	mov	r6,r17
 20076b0:	2007d600 	call	2007d60 <memmove>
 20076b4:	90c00017 	ldw	r3,0(r18)
 20076b8:	e009883a 	mov	r4,fp
 20076bc:	900b883a 	mov	r5,r18
 20076c0:	1c47883a 	add	r3,r3,r17
 20076c4:	90c00015 	stw	r3,0(r18)
 20076c8:	20069d00 	call	20069d0 <_fflush_r>
 20076cc:	103fc91e 	bne	r2,zero,20075f4 <__sfvwrite_r+0x254>
 20076d0:	a469c83a 	sub	r20,r20,r17
 20076d4:	a03fe81e 	bne	r20,zero,2007678 <__sfvwrite_r+0x2d8>
 20076d8:	e009883a 	mov	r4,fp
 20076dc:	900b883a 	mov	r5,r18
 20076e0:	20069d00 	call	20069d0 <_fflush_r>
 20076e4:	103fc31e 	bne	r2,zero,20075f4 <__sfvwrite_r+0x254>
 20076e8:	d8000015 	stw	zero,0(sp)
 20076ec:	003fe206 	br	2007678 <__sfvwrite_r+0x2d8>
 20076f0:	91000017 	ldw	r4,0(r18)
 20076f4:	90800417 	ldw	r2,16(r18)
 20076f8:	1100022e 	bgeu	r2,r4,2007704 <__sfvwrite_r+0x364>
 20076fc:	8023883a 	mov	r17,r16
 2007700:	85003136 	bltu	r16,r20,20077c8 <__sfvwrite_r+0x428>
 2007704:	91c00517 	ldw	r7,20(r18)
 2007708:	a1c01836 	bltu	r20,r7,200776c <__sfvwrite_r+0x3cc>
 200770c:	90c00917 	ldw	r3,36(r18)
 2007710:	91400717 	ldw	r5,28(r18)
 2007714:	e009883a 	mov	r4,fp
 2007718:	b80d883a 	mov	r6,r23
 200771c:	183ee83a 	callr	r3
 2007720:	1021883a 	mov	r16,r2
 2007724:	00bfb30e 	bge	zero,r2,20075f4 <__sfvwrite_r+0x254>
 2007728:	1023883a 	mov	r17,r2
 200772c:	1027883a 	mov	r19,r2
 2007730:	003f9b06 	br	20075a0 <__sfvwrite_r+0x200>
 2007734:	b80b883a 	mov	r5,r23
 2007738:	800d883a 	mov	r6,r16
 200773c:	2007d600 	call	2007d60 <memmove>
 2007740:	90c00217 	ldw	r3,8(r18)
 2007744:	90800017 	ldw	r2,0(r18)
 2007748:	8023883a 	mov	r17,r16
 200774c:	1c07c83a 	sub	r3,r3,r16
 2007750:	1405883a 	add	r2,r2,r16
 2007754:	90c00215 	stw	r3,8(r18)
 2007758:	90800015 	stw	r2,0(r18)
 200775c:	003fc406 	br	2007670 <__sfvwrite_r+0x2d0>
 2007760:	a00d883a 	mov	r6,r20
 2007764:	a021883a 	mov	r16,r20
 2007768:	003f8106 	br	2007570 <__sfvwrite_r+0x1d0>
 200776c:	b80b883a 	mov	r5,r23
 2007770:	a00d883a 	mov	r6,r20
 2007774:	2007d600 	call	2007d60 <memmove>
 2007778:	90c00217 	ldw	r3,8(r18)
 200777c:	90800017 	ldw	r2,0(r18)
 2007780:	a021883a 	mov	r16,r20
 2007784:	1d07c83a 	sub	r3,r3,r20
 2007788:	1505883a 	add	r2,r2,r20
 200778c:	a023883a 	mov	r17,r20
 2007790:	a027883a 	mov	r19,r20
 2007794:	90c00215 	stw	r3,8(r18)
 2007798:	90800015 	stw	r2,0(r18)
 200779c:	003f8006 	br	20075a0 <__sfvwrite_r+0x200>
 20077a0:	b809883a 	mov	r4,r23
 20077a4:	01400284 	movi	r5,10
 20077a8:	980d883a 	mov	r6,r19
 20077ac:	2007bdc0 	call	2007bdc <memchr>
 20077b0:	10001726 	beq	r2,zero,2007810 <__sfvwrite_r+0x470>
 20077b4:	15c5c83a 	sub	r2,r2,r23
 20077b8:	15000044 	addi	r20,r2,1
 20077bc:	00800044 	movi	r2,1
 20077c0:	d8800015 	stw	r2,0(sp)
 20077c4:	003f9806 	br	2007628 <__sfvwrite_r+0x288>
 20077c8:	b80b883a 	mov	r5,r23
 20077cc:	800d883a 	mov	r6,r16
 20077d0:	2007d600 	call	2007d60 <memmove>
 20077d4:	90c00017 	ldw	r3,0(r18)
 20077d8:	e009883a 	mov	r4,fp
 20077dc:	900b883a 	mov	r5,r18
 20077e0:	1c07883a 	add	r3,r3,r16
 20077e4:	90c00015 	stw	r3,0(r18)
 20077e8:	8027883a 	mov	r19,r16
 20077ec:	20069d00 	call	20069d0 <_fflush_r>
 20077f0:	103f6b26 	beq	r2,zero,20075a0 <__sfvwrite_r+0x200>
 20077f4:	003f7f06 	br	20075f4 <__sfvwrite_r+0x254>
 20077f8:	400b883a 	mov	r5,r8
 20077fc:	e009883a 	mov	r4,fp
 2007800:	2008f440 	call	2008f44 <_realloc_r>
 2007804:	103f7626 	beq	r2,zero,20075e0 <__sfvwrite_r+0x240>
 2007808:	1023883a 	mov	r17,r2
 200780c:	003f5006 	br	2007550 <__sfvwrite_r+0x1b0>
 2007810:	00c00044 	movi	r3,1
 2007814:	9d000044 	addi	r20,r19,1
 2007818:	d8c00015 	stw	r3,0(sp)
 200781c:	003f8206 	br	2007628 <__sfvwrite_r+0x288>
 2007820:	9080030b 	ldhu	r2,12(r18)
 2007824:	00c00244 	movi	r3,9
 2007828:	013fffc4 	movi	r4,-1
 200782c:	10801014 	ori	r2,r2,64
 2007830:	9080030d 	sth	r2,12(r18)
 2007834:	e0c00015 	stw	r3,0(fp)
 2007838:	003f0606 	br	2007454 <__sfvwrite_r+0xb4>

0200783c <_fwalk_reent>:
 200783c:	defff704 	addi	sp,sp,-36
 2007840:	dcc00315 	stw	r19,12(sp)
 2007844:	24c0b804 	addi	r19,r4,736
 2007848:	dd800615 	stw	r22,24(sp)
 200784c:	dd400515 	stw	r21,20(sp)
 2007850:	dfc00815 	stw	ra,32(sp)
 2007854:	ddc00715 	stw	r23,28(sp)
 2007858:	dd000415 	stw	r20,16(sp)
 200785c:	dc800215 	stw	r18,8(sp)
 2007860:	dc400115 	stw	r17,4(sp)
 2007864:	dc000015 	stw	r16,0(sp)
 2007868:	202b883a 	mov	r21,r4
 200786c:	282d883a 	mov	r22,r5
 2007870:	2006c580 	call	2006c58 <__sfp_lock_acquire>
 2007874:	98002126 	beq	r19,zero,20078fc <_fwalk_reent+0xc0>
 2007878:	002f883a 	mov	r23,zero
 200787c:	9c800117 	ldw	r18,4(r19)
 2007880:	9c000217 	ldw	r16,8(r19)
 2007884:	90bfffc4 	addi	r2,r18,-1
 2007888:	10000d16 	blt	r2,zero,20078c0 <_fwalk_reent+0x84>
 200788c:	0023883a 	mov	r17,zero
 2007890:	053fffc4 	movi	r20,-1
 2007894:	8080030f 	ldh	r2,12(r16)
 2007898:	8c400044 	addi	r17,r17,1
 200789c:	10000626 	beq	r2,zero,20078b8 <_fwalk_reent+0x7c>
 20078a0:	8080038f 	ldh	r2,14(r16)
 20078a4:	800b883a 	mov	r5,r16
 20078a8:	a809883a 	mov	r4,r21
 20078ac:	15000226 	beq	r2,r20,20078b8 <_fwalk_reent+0x7c>
 20078b0:	b03ee83a 	callr	r22
 20078b4:	b8aeb03a 	or	r23,r23,r2
 20078b8:	84001704 	addi	r16,r16,92
 20078bc:	947ff51e 	bne	r18,r17,2007894 <_fwalk_reent+0x58>
 20078c0:	9cc00017 	ldw	r19,0(r19)
 20078c4:	983fed1e 	bne	r19,zero,200787c <_fwalk_reent+0x40>
 20078c8:	2006c5c0 	call	2006c5c <__sfp_lock_release>
 20078cc:	b805883a 	mov	r2,r23
 20078d0:	dfc00817 	ldw	ra,32(sp)
 20078d4:	ddc00717 	ldw	r23,28(sp)
 20078d8:	dd800617 	ldw	r22,24(sp)
 20078dc:	dd400517 	ldw	r21,20(sp)
 20078e0:	dd000417 	ldw	r20,16(sp)
 20078e4:	dcc00317 	ldw	r19,12(sp)
 20078e8:	dc800217 	ldw	r18,8(sp)
 20078ec:	dc400117 	ldw	r17,4(sp)
 20078f0:	dc000017 	ldw	r16,0(sp)
 20078f4:	dec00904 	addi	sp,sp,36
 20078f8:	f800283a 	ret
 20078fc:	002f883a 	mov	r23,zero
 2007900:	003ff106 	br	20078c8 <_fwalk_reent+0x8c>

02007904 <_fwalk>:
 2007904:	defff804 	addi	sp,sp,-32
 2007908:	dcc00315 	stw	r19,12(sp)
 200790c:	24c0b804 	addi	r19,r4,736
 2007910:	dd400515 	stw	r21,20(sp)
 2007914:	dfc00715 	stw	ra,28(sp)
 2007918:	dd800615 	stw	r22,24(sp)
 200791c:	dd000415 	stw	r20,16(sp)
 2007920:	dc800215 	stw	r18,8(sp)
 2007924:	dc400115 	stw	r17,4(sp)
 2007928:	dc000015 	stw	r16,0(sp)
 200792c:	282b883a 	mov	r21,r5
 2007930:	2006c580 	call	2006c58 <__sfp_lock_acquire>
 2007934:	98001f26 	beq	r19,zero,20079b4 <_fwalk+0xb0>
 2007938:	002d883a 	mov	r22,zero
 200793c:	9c800117 	ldw	r18,4(r19)
 2007940:	9c000217 	ldw	r16,8(r19)
 2007944:	90bfffc4 	addi	r2,r18,-1
 2007948:	10000c16 	blt	r2,zero,200797c <_fwalk+0x78>
 200794c:	0023883a 	mov	r17,zero
 2007950:	053fffc4 	movi	r20,-1
 2007954:	8080030f 	ldh	r2,12(r16)
 2007958:	8c400044 	addi	r17,r17,1
 200795c:	10000526 	beq	r2,zero,2007974 <_fwalk+0x70>
 2007960:	8080038f 	ldh	r2,14(r16)
 2007964:	8009883a 	mov	r4,r16
 2007968:	15000226 	beq	r2,r20,2007974 <_fwalk+0x70>
 200796c:	a83ee83a 	callr	r21
 2007970:	b0acb03a 	or	r22,r22,r2
 2007974:	84001704 	addi	r16,r16,92
 2007978:	947ff61e 	bne	r18,r17,2007954 <_fwalk+0x50>
 200797c:	9cc00017 	ldw	r19,0(r19)
 2007980:	983fee1e 	bne	r19,zero,200793c <_fwalk+0x38>
 2007984:	2006c5c0 	call	2006c5c <__sfp_lock_release>
 2007988:	b005883a 	mov	r2,r22
 200798c:	dfc00717 	ldw	ra,28(sp)
 2007990:	dd800617 	ldw	r22,24(sp)
 2007994:	dd400517 	ldw	r21,20(sp)
 2007998:	dd000417 	ldw	r20,16(sp)
 200799c:	dcc00317 	ldw	r19,12(sp)
 20079a0:	dc800217 	ldw	r18,8(sp)
 20079a4:	dc400117 	ldw	r17,4(sp)
 20079a8:	dc000017 	ldw	r16,0(sp)
 20079ac:	dec00804 	addi	sp,sp,32
 20079b0:	f800283a 	ret
 20079b4:	002d883a 	mov	r22,zero
 20079b8:	003ff206 	br	2007984 <_fwalk+0x80>

020079bc <_gettimeofday_r>:
 20079bc:	defffd04 	addi	sp,sp,-12
 20079c0:	dc000015 	stw	r16,0(sp)
 20079c4:	04008074 	movhi	r16,513
 20079c8:	840c0604 	addi	r16,r16,12312
 20079cc:	dc400115 	stw	r17,4(sp)
 20079d0:	80000015 	stw	zero,0(r16)
 20079d4:	2023883a 	mov	r17,r4
 20079d8:	2809883a 	mov	r4,r5
 20079dc:	300b883a 	mov	r5,r6
 20079e0:	dfc00215 	stw	ra,8(sp)
 20079e4:	200b6300 	call	200b630 <gettimeofday>
 20079e8:	1007883a 	mov	r3,r2
 20079ec:	00bfffc4 	movi	r2,-1
 20079f0:	18800626 	beq	r3,r2,2007a0c <_gettimeofday_r+0x50>
 20079f4:	1805883a 	mov	r2,r3
 20079f8:	dfc00217 	ldw	ra,8(sp)
 20079fc:	dc400117 	ldw	r17,4(sp)
 2007a00:	dc000017 	ldw	r16,0(sp)
 2007a04:	dec00304 	addi	sp,sp,12
 2007a08:	f800283a 	ret
 2007a0c:	80800017 	ldw	r2,0(r16)
 2007a10:	103ff826 	beq	r2,zero,20079f4 <_gettimeofday_r+0x38>
 2007a14:	88800015 	stw	r2,0(r17)
 2007a18:	1805883a 	mov	r2,r3
 2007a1c:	dfc00217 	ldw	ra,8(sp)
 2007a20:	dc400117 	ldw	r17,4(sp)
 2007a24:	dc000017 	ldw	r16,0(sp)
 2007a28:	dec00304 	addi	sp,sp,12
 2007a2c:	f800283a 	ret

02007a30 <_isatty_r>:
 2007a30:	defffd04 	addi	sp,sp,-12
 2007a34:	dc000015 	stw	r16,0(sp)
 2007a38:	04008074 	movhi	r16,513
 2007a3c:	840c0604 	addi	r16,r16,12312
 2007a40:	dc400115 	stw	r17,4(sp)
 2007a44:	80000015 	stw	zero,0(r16)
 2007a48:	2023883a 	mov	r17,r4
 2007a4c:	2809883a 	mov	r4,r5
 2007a50:	dfc00215 	stw	ra,8(sp)
 2007a54:	200b84c0 	call	200b84c <isatty>
 2007a58:	1007883a 	mov	r3,r2
 2007a5c:	00bfffc4 	movi	r2,-1
 2007a60:	18800626 	beq	r3,r2,2007a7c <_isatty_r+0x4c>
 2007a64:	1805883a 	mov	r2,r3
 2007a68:	dfc00217 	ldw	ra,8(sp)
 2007a6c:	dc400117 	ldw	r17,4(sp)
 2007a70:	dc000017 	ldw	r16,0(sp)
 2007a74:	dec00304 	addi	sp,sp,12
 2007a78:	f800283a 	ret
 2007a7c:	80800017 	ldw	r2,0(r16)
 2007a80:	103ff826 	beq	r2,zero,2007a64 <_isatty_r+0x34>
 2007a84:	88800015 	stw	r2,0(r17)
 2007a88:	1805883a 	mov	r2,r3
 2007a8c:	dfc00217 	ldw	ra,8(sp)
 2007a90:	dc400117 	ldw	r17,4(sp)
 2007a94:	dc000017 	ldw	r16,0(sp)
 2007a98:	dec00304 	addi	sp,sp,12
 2007a9c:	f800283a 	ret

02007aa0 <__locale_charset>:
 2007aa0:	d0a00517 	ldw	r2,-32748(gp)
 2007aa4:	f800283a 	ret

02007aa8 <_localeconv_r>:
 2007aa8:	00808074 	movhi	r2,513
 2007aac:	10bd3304 	addi	r2,r2,-2868
 2007ab0:	f800283a 	ret

02007ab4 <localeconv>:
 2007ab4:	00808074 	movhi	r2,513
 2007ab8:	10850f04 	addi	r2,r2,5180
 2007abc:	11000017 	ldw	r4,0(r2)
 2007ac0:	2007aa81 	jmpi	2007aa8 <_localeconv_r>

02007ac4 <_setlocale_r>:
 2007ac4:	defffc04 	addi	sp,sp,-16
 2007ac8:	00c08074 	movhi	r3,513
 2007acc:	18fd0904 	addi	r3,r3,-3036
 2007ad0:	dc800215 	stw	r18,8(sp)
 2007ad4:	dc400115 	stw	r17,4(sp)
 2007ad8:	dc000015 	stw	r16,0(sp)
 2007adc:	2023883a 	mov	r17,r4
 2007ae0:	2825883a 	mov	r18,r5
 2007ae4:	dfc00315 	stw	ra,12(sp)
 2007ae8:	3021883a 	mov	r16,r6
 2007aec:	3009883a 	mov	r4,r6
 2007af0:	180b883a 	mov	r5,r3
 2007af4:	30000926 	beq	r6,zero,2007b1c <_setlocale_r+0x58>
 2007af8:	20095a80 	call	20095a8 <strcmp>
 2007afc:	8009883a 	mov	r4,r16
 2007b00:	01408074 	movhi	r5,513
 2007b04:	297d1a04 	addi	r5,r5,-2968
 2007b08:	10000b1e 	bne	r2,zero,2007b38 <_setlocale_r+0x74>
 2007b0c:	8c000d15 	stw	r16,52(r17)
 2007b10:	8c800c15 	stw	r18,48(r17)
 2007b14:	00c08074 	movhi	r3,513
 2007b18:	18fd0904 	addi	r3,r3,-3036
 2007b1c:	1805883a 	mov	r2,r3
 2007b20:	dfc00317 	ldw	ra,12(sp)
 2007b24:	dc800217 	ldw	r18,8(sp)
 2007b28:	dc400117 	ldw	r17,4(sp)
 2007b2c:	dc000017 	ldw	r16,0(sp)
 2007b30:	dec00404 	addi	sp,sp,16
 2007b34:	f800283a 	ret
 2007b38:	20095a80 	call	20095a8 <strcmp>
 2007b3c:	0007883a 	mov	r3,zero
 2007b40:	103ff226 	beq	r2,zero,2007b0c <_setlocale_r+0x48>
 2007b44:	003ff506 	br	2007b1c <_setlocale_r+0x58>

02007b48 <setlocale>:
 2007b48:	01808074 	movhi	r6,513
 2007b4c:	31850f04 	addi	r6,r6,5180
 2007b50:	2007883a 	mov	r3,r4
 2007b54:	31000017 	ldw	r4,0(r6)
 2007b58:	280d883a 	mov	r6,r5
 2007b5c:	180b883a 	mov	r5,r3
 2007b60:	2007ac41 	jmpi	2007ac4 <_setlocale_r>

02007b64 <_lseek_r>:
 2007b64:	defffd04 	addi	sp,sp,-12
 2007b68:	dc000015 	stw	r16,0(sp)
 2007b6c:	04008074 	movhi	r16,513
 2007b70:	840c0604 	addi	r16,r16,12312
 2007b74:	dc400115 	stw	r17,4(sp)
 2007b78:	80000015 	stw	zero,0(r16)
 2007b7c:	2023883a 	mov	r17,r4
 2007b80:	2809883a 	mov	r4,r5
 2007b84:	300b883a 	mov	r5,r6
 2007b88:	380d883a 	mov	r6,r7
 2007b8c:	dfc00215 	stw	ra,8(sp)
 2007b90:	200ba580 	call	200ba58 <lseek>
 2007b94:	1007883a 	mov	r3,r2
 2007b98:	00bfffc4 	movi	r2,-1
 2007b9c:	18800626 	beq	r3,r2,2007bb8 <_lseek_r+0x54>
 2007ba0:	1805883a 	mov	r2,r3
 2007ba4:	dfc00217 	ldw	ra,8(sp)
 2007ba8:	dc400117 	ldw	r17,4(sp)
 2007bac:	dc000017 	ldw	r16,0(sp)
 2007bb0:	dec00304 	addi	sp,sp,12
 2007bb4:	f800283a 	ret
 2007bb8:	80800017 	ldw	r2,0(r16)
 2007bbc:	103ff826 	beq	r2,zero,2007ba0 <_lseek_r+0x3c>
 2007bc0:	88800015 	stw	r2,0(r17)
 2007bc4:	1805883a 	mov	r2,r3
 2007bc8:	dfc00217 	ldw	ra,8(sp)
 2007bcc:	dc400117 	ldw	r17,4(sp)
 2007bd0:	dc000017 	ldw	r16,0(sp)
 2007bd4:	dec00304 	addi	sp,sp,12
 2007bd8:	f800283a 	ret

02007bdc <memchr>:
 2007bdc:	008000c4 	movi	r2,3
 2007be0:	29403fcc 	andi	r5,r5,255
 2007be4:	2007883a 	mov	r3,r4
 2007be8:	1180022e 	bgeu	r2,r6,2007bf4 <memchr+0x18>
 2007bec:	2084703a 	and	r2,r4,r2
 2007bf0:	10000b26 	beq	r2,zero,2007c20 <memchr+0x44>
 2007bf4:	313fffc4 	addi	r4,r6,-1
 2007bf8:	3000051e 	bne	r6,zero,2007c10 <memchr+0x34>
 2007bfc:	00002c06 	br	2007cb0 <memchr+0xd4>
 2007c00:	213fffc4 	addi	r4,r4,-1
 2007c04:	00bfffc4 	movi	r2,-1
 2007c08:	18c00044 	addi	r3,r3,1
 2007c0c:	20802826 	beq	r4,r2,2007cb0 <memchr+0xd4>
 2007c10:	18800003 	ldbu	r2,0(r3)
 2007c14:	28bffa1e 	bne	r5,r2,2007c00 <memchr+0x24>
 2007c18:	1805883a 	mov	r2,r3
 2007c1c:	f800283a 	ret
 2007c20:	0011883a 	mov	r8,zero
 2007c24:	0007883a 	mov	r3,zero
 2007c28:	01c00104 	movi	r7,4
 2007c2c:	4004923a 	slli	r2,r8,8
 2007c30:	18c00044 	addi	r3,r3,1
 2007c34:	1151883a 	add	r8,r2,r5
 2007c38:	19fffc1e 	bne	r3,r7,2007c2c <memchr+0x50>
 2007c3c:	02bfbff4 	movhi	r10,65279
 2007c40:	52bfbfc4 	addi	r10,r10,-257
 2007c44:	02602074 	movhi	r9,32897
 2007c48:	4a602004 	addi	r9,r9,-32640
 2007c4c:	02c000c4 	movi	r11,3
 2007c50:	20800017 	ldw	r2,0(r4)
 2007c54:	31bfff04 	addi	r6,r6,-4
 2007c58:	200f883a 	mov	r7,r4
 2007c5c:	1204f03a 	xor	r2,r2,r8
 2007c60:	1287883a 	add	r3,r2,r10
 2007c64:	1a46703a 	and	r3,r3,r9
 2007c68:	0084303a 	nor	r2,zero,r2
 2007c6c:	10c4703a 	and	r2,r2,r3
 2007c70:	10000b26 	beq	r2,zero,2007ca0 <memchr+0xc4>
 2007c74:	20800003 	ldbu	r2,0(r4)
 2007c78:	28800f26 	beq	r5,r2,2007cb8 <memchr+0xdc>
 2007c7c:	20800043 	ldbu	r2,1(r4)
 2007c80:	21c00044 	addi	r7,r4,1
 2007c84:	28800c26 	beq	r5,r2,2007cb8 <memchr+0xdc>
 2007c88:	20800083 	ldbu	r2,2(r4)
 2007c8c:	21c00084 	addi	r7,r4,2
 2007c90:	28800926 	beq	r5,r2,2007cb8 <memchr+0xdc>
 2007c94:	208000c3 	ldbu	r2,3(r4)
 2007c98:	21c000c4 	addi	r7,r4,3
 2007c9c:	28800626 	beq	r5,r2,2007cb8 <memchr+0xdc>
 2007ca0:	21000104 	addi	r4,r4,4
 2007ca4:	59bfea36 	bltu	r11,r6,2007c50 <memchr+0x74>
 2007ca8:	2007883a 	mov	r3,r4
 2007cac:	003fd106 	br	2007bf4 <memchr+0x18>
 2007cb0:	0005883a 	mov	r2,zero
 2007cb4:	f800283a 	ret
 2007cb8:	3805883a 	mov	r2,r7
 2007cbc:	f800283a 	ret

02007cc0 <memcpy>:
 2007cc0:	01c003c4 	movi	r7,15
 2007cc4:	2007883a 	mov	r3,r4
 2007cc8:	3980032e 	bgeu	r7,r6,2007cd8 <memcpy+0x18>
 2007ccc:	2904b03a 	or	r2,r5,r4
 2007cd0:	108000cc 	andi	r2,r2,3
 2007cd4:	10000926 	beq	r2,zero,2007cfc <memcpy+0x3c>
 2007cd8:	30000626 	beq	r6,zero,2007cf4 <memcpy+0x34>
 2007cdc:	30cd883a 	add	r6,r6,r3
 2007ce0:	28800003 	ldbu	r2,0(r5)
 2007ce4:	29400044 	addi	r5,r5,1
 2007ce8:	18800005 	stb	r2,0(r3)
 2007cec:	18c00044 	addi	r3,r3,1
 2007cf0:	30fffb1e 	bne	r6,r3,2007ce0 <memcpy+0x20>
 2007cf4:	2005883a 	mov	r2,r4
 2007cf8:	f800283a 	ret
 2007cfc:	3811883a 	mov	r8,r7
 2007d00:	200f883a 	mov	r7,r4
 2007d04:	28c00017 	ldw	r3,0(r5)
 2007d08:	31bffc04 	addi	r6,r6,-16
 2007d0c:	38c00015 	stw	r3,0(r7)
 2007d10:	28800117 	ldw	r2,4(r5)
 2007d14:	38800115 	stw	r2,4(r7)
 2007d18:	28c00217 	ldw	r3,8(r5)
 2007d1c:	38c00215 	stw	r3,8(r7)
 2007d20:	28800317 	ldw	r2,12(r5)
 2007d24:	29400404 	addi	r5,r5,16
 2007d28:	38800315 	stw	r2,12(r7)
 2007d2c:	39c00404 	addi	r7,r7,16
 2007d30:	41bff436 	bltu	r8,r6,2007d04 <memcpy+0x44>
 2007d34:	008000c4 	movi	r2,3
 2007d38:	1180072e 	bgeu	r2,r6,2007d58 <memcpy+0x98>
 2007d3c:	1007883a 	mov	r3,r2
 2007d40:	28800017 	ldw	r2,0(r5)
 2007d44:	31bfff04 	addi	r6,r6,-4
 2007d48:	29400104 	addi	r5,r5,4
 2007d4c:	38800015 	stw	r2,0(r7)
 2007d50:	39c00104 	addi	r7,r7,4
 2007d54:	19bffa36 	bltu	r3,r6,2007d40 <memcpy+0x80>
 2007d58:	3807883a 	mov	r3,r7
 2007d5c:	003fde06 	br	2007cd8 <memcpy+0x18>

02007d60 <memmove>:
 2007d60:	2807883a 	mov	r3,r5
 2007d64:	2011883a 	mov	r8,r4
 2007d68:	29000c2e 	bgeu	r5,r4,2007d9c <memmove+0x3c>
 2007d6c:	298f883a 	add	r7,r5,r6
 2007d70:	21c00a2e 	bgeu	r4,r7,2007d9c <memmove+0x3c>
 2007d74:	30000726 	beq	r6,zero,2007d94 <memmove+0x34>
 2007d78:	2187883a 	add	r3,r4,r6
 2007d7c:	198dc83a 	sub	r6,r3,r6
 2007d80:	39ffffc4 	addi	r7,r7,-1
 2007d84:	38800003 	ldbu	r2,0(r7)
 2007d88:	18ffffc4 	addi	r3,r3,-1
 2007d8c:	18800005 	stb	r2,0(r3)
 2007d90:	19bffb1e 	bne	r3,r6,2007d80 <memmove+0x20>
 2007d94:	2005883a 	mov	r2,r4
 2007d98:	f800283a 	ret
 2007d9c:	01c003c4 	movi	r7,15
 2007da0:	39800a36 	bltu	r7,r6,2007dcc <memmove+0x6c>
 2007da4:	303ffb26 	beq	r6,zero,2007d94 <memmove+0x34>
 2007da8:	400f883a 	mov	r7,r8
 2007dac:	320d883a 	add	r6,r6,r8
 2007db0:	28800003 	ldbu	r2,0(r5)
 2007db4:	29400044 	addi	r5,r5,1
 2007db8:	38800005 	stb	r2,0(r7)
 2007dbc:	39c00044 	addi	r7,r7,1
 2007dc0:	39bffb1e 	bne	r7,r6,2007db0 <memmove+0x50>
 2007dc4:	2005883a 	mov	r2,r4
 2007dc8:	f800283a 	ret
 2007dcc:	1904b03a 	or	r2,r3,r4
 2007dd0:	108000cc 	andi	r2,r2,3
 2007dd4:	103ff31e 	bne	r2,zero,2007da4 <memmove+0x44>
 2007dd8:	3811883a 	mov	r8,r7
 2007ddc:	180b883a 	mov	r5,r3
 2007de0:	200f883a 	mov	r7,r4
 2007de4:	28c00017 	ldw	r3,0(r5)
 2007de8:	31bffc04 	addi	r6,r6,-16
 2007dec:	38c00015 	stw	r3,0(r7)
 2007df0:	28800117 	ldw	r2,4(r5)
 2007df4:	38800115 	stw	r2,4(r7)
 2007df8:	28c00217 	ldw	r3,8(r5)
 2007dfc:	38c00215 	stw	r3,8(r7)
 2007e00:	28800317 	ldw	r2,12(r5)
 2007e04:	29400404 	addi	r5,r5,16
 2007e08:	38800315 	stw	r2,12(r7)
 2007e0c:	39c00404 	addi	r7,r7,16
 2007e10:	41bff436 	bltu	r8,r6,2007de4 <memmove+0x84>
 2007e14:	008000c4 	movi	r2,3
 2007e18:	1180072e 	bgeu	r2,r6,2007e38 <memmove+0xd8>
 2007e1c:	1007883a 	mov	r3,r2
 2007e20:	28800017 	ldw	r2,0(r5)
 2007e24:	31bfff04 	addi	r6,r6,-4
 2007e28:	29400104 	addi	r5,r5,4
 2007e2c:	38800015 	stw	r2,0(r7)
 2007e30:	39c00104 	addi	r7,r7,4
 2007e34:	19bffa36 	bltu	r3,r6,2007e20 <memmove+0xc0>
 2007e38:	3811883a 	mov	r8,r7
 2007e3c:	003fd906 	br	2007da4 <memmove+0x44>

02007e40 <memset>:
 2007e40:	008000c4 	movi	r2,3
 2007e44:	29403fcc 	andi	r5,r5,255
 2007e48:	2007883a 	mov	r3,r4
 2007e4c:	1180022e 	bgeu	r2,r6,2007e58 <memset+0x18>
 2007e50:	2084703a 	and	r2,r4,r2
 2007e54:	10000826 	beq	r2,zero,2007e78 <memset+0x38>
 2007e58:	30000526 	beq	r6,zero,2007e70 <memset+0x30>
 2007e5c:	2805883a 	mov	r2,r5
 2007e60:	30cd883a 	add	r6,r6,r3
 2007e64:	18800005 	stb	r2,0(r3)
 2007e68:	18c00044 	addi	r3,r3,1
 2007e6c:	19bffd1e 	bne	r3,r6,2007e64 <memset+0x24>
 2007e70:	2005883a 	mov	r2,r4
 2007e74:	f800283a 	ret
 2007e78:	2804923a 	slli	r2,r5,8
 2007e7c:	020003c4 	movi	r8,15
 2007e80:	200f883a 	mov	r7,r4
 2007e84:	2884b03a 	or	r2,r5,r2
 2007e88:	1006943a 	slli	r3,r2,16
 2007e8c:	10c6b03a 	or	r3,r2,r3
 2007e90:	41800a2e 	bgeu	r8,r6,2007ebc <memset+0x7c>
 2007e94:	4005883a 	mov	r2,r8
 2007e98:	31bffc04 	addi	r6,r6,-16
 2007e9c:	38c00015 	stw	r3,0(r7)
 2007ea0:	38c00115 	stw	r3,4(r7)
 2007ea4:	38c00215 	stw	r3,8(r7)
 2007ea8:	38c00315 	stw	r3,12(r7)
 2007eac:	39c00404 	addi	r7,r7,16
 2007eb0:	11bff936 	bltu	r2,r6,2007e98 <memset+0x58>
 2007eb4:	008000c4 	movi	r2,3
 2007eb8:	1180052e 	bgeu	r2,r6,2007ed0 <memset+0x90>
 2007ebc:	31bfff04 	addi	r6,r6,-4
 2007ec0:	008000c4 	movi	r2,3
 2007ec4:	38c00015 	stw	r3,0(r7)
 2007ec8:	39c00104 	addi	r7,r7,4
 2007ecc:	11bffb36 	bltu	r2,r6,2007ebc <memset+0x7c>
 2007ed0:	3807883a 	mov	r3,r7
 2007ed4:	003fe006 	br	2007e58 <memset+0x18>

02007ed8 <_Bfree>:
 2007ed8:	28000826 	beq	r5,zero,2007efc <_Bfree+0x24>
 2007edc:	28800117 	ldw	r2,4(r5)
 2007ee0:	21001317 	ldw	r4,76(r4)
 2007ee4:	1085883a 	add	r2,r2,r2
 2007ee8:	1085883a 	add	r2,r2,r2
 2007eec:	1105883a 	add	r2,r2,r4
 2007ef0:	10c00017 	ldw	r3,0(r2)
 2007ef4:	28c00015 	stw	r3,0(r5)
 2007ef8:	11400015 	stw	r5,0(r2)
 2007efc:	f800283a 	ret

02007f00 <__hi0bits>:
 2007f00:	20bfffec 	andhi	r2,r4,65535
 2007f04:	10001426 	beq	r2,zero,2007f58 <__hi0bits+0x58>
 2007f08:	0007883a 	mov	r3,zero
 2007f0c:	20bfc02c 	andhi	r2,r4,65280
 2007f10:	1000021e 	bne	r2,zero,2007f1c <__hi0bits+0x1c>
 2007f14:	2008923a 	slli	r4,r4,8
 2007f18:	18c00204 	addi	r3,r3,8
 2007f1c:	20bc002c 	andhi	r2,r4,61440
 2007f20:	1000021e 	bne	r2,zero,2007f2c <__hi0bits+0x2c>
 2007f24:	2008913a 	slli	r4,r4,4
 2007f28:	18c00104 	addi	r3,r3,4
 2007f2c:	20b0002c 	andhi	r2,r4,49152
 2007f30:	1000031e 	bne	r2,zero,2007f40 <__hi0bits+0x40>
 2007f34:	2105883a 	add	r2,r4,r4
 2007f38:	18c00084 	addi	r3,r3,2
 2007f3c:	1089883a 	add	r4,r2,r2
 2007f40:	20000316 	blt	r4,zero,2007f50 <__hi0bits+0x50>
 2007f44:	2090002c 	andhi	r2,r4,16384
 2007f48:	10000626 	beq	r2,zero,2007f64 <__hi0bits+0x64>
 2007f4c:	18c00044 	addi	r3,r3,1
 2007f50:	1805883a 	mov	r2,r3
 2007f54:	f800283a 	ret
 2007f58:	2008943a 	slli	r4,r4,16
 2007f5c:	00c00404 	movi	r3,16
 2007f60:	003fea06 	br	2007f0c <__hi0bits+0xc>
 2007f64:	00c00804 	movi	r3,32
 2007f68:	1805883a 	mov	r2,r3
 2007f6c:	f800283a 	ret

02007f70 <__lo0bits>:
 2007f70:	20c00017 	ldw	r3,0(r4)
 2007f74:	188001cc 	andi	r2,r3,7
 2007f78:	10000a26 	beq	r2,zero,2007fa4 <__lo0bits+0x34>
 2007f7c:	1880004c 	andi	r2,r3,1
 2007f80:	1005003a 	cmpeq	r2,r2,zero
 2007f84:	10002126 	beq	r2,zero,200800c <__lo0bits+0x9c>
 2007f88:	1880008c 	andi	r2,r3,2
 2007f8c:	1000251e 	bne	r2,zero,2008024 <__lo0bits+0xb4>
 2007f90:	1804d0ba 	srli	r2,r3,2
 2007f94:	01400084 	movi	r5,2
 2007f98:	20800015 	stw	r2,0(r4)
 2007f9c:	2805883a 	mov	r2,r5
 2007fa0:	f800283a 	ret
 2007fa4:	18bfffcc 	andi	r2,r3,65535
 2007fa8:	10001526 	beq	r2,zero,2008000 <__lo0bits+0x90>
 2007fac:	000b883a 	mov	r5,zero
 2007fb0:	18803fcc 	andi	r2,r3,255
 2007fb4:	1000021e 	bne	r2,zero,2007fc0 <__lo0bits+0x50>
 2007fb8:	1806d23a 	srli	r3,r3,8
 2007fbc:	29400204 	addi	r5,r5,8
 2007fc0:	188003cc 	andi	r2,r3,15
 2007fc4:	1000021e 	bne	r2,zero,2007fd0 <__lo0bits+0x60>
 2007fc8:	1806d13a 	srli	r3,r3,4
 2007fcc:	29400104 	addi	r5,r5,4
 2007fd0:	188000cc 	andi	r2,r3,3
 2007fd4:	1000021e 	bne	r2,zero,2007fe0 <__lo0bits+0x70>
 2007fd8:	1806d0ba 	srli	r3,r3,2
 2007fdc:	29400084 	addi	r5,r5,2
 2007fe0:	1880004c 	andi	r2,r3,1
 2007fe4:	1000031e 	bne	r2,zero,2007ff4 <__lo0bits+0x84>
 2007fe8:	1806d07a 	srli	r3,r3,1
 2007fec:	18000a26 	beq	r3,zero,2008018 <__lo0bits+0xa8>
 2007ff0:	29400044 	addi	r5,r5,1
 2007ff4:	2805883a 	mov	r2,r5
 2007ff8:	20c00015 	stw	r3,0(r4)
 2007ffc:	f800283a 	ret
 2008000:	1806d43a 	srli	r3,r3,16
 2008004:	01400404 	movi	r5,16
 2008008:	003fe906 	br	2007fb0 <__lo0bits+0x40>
 200800c:	000b883a 	mov	r5,zero
 2008010:	2805883a 	mov	r2,r5
 2008014:	f800283a 	ret
 2008018:	01400804 	movi	r5,32
 200801c:	2805883a 	mov	r2,r5
 2008020:	f800283a 	ret
 2008024:	1804d07a 	srli	r2,r3,1
 2008028:	01400044 	movi	r5,1
 200802c:	20800015 	stw	r2,0(r4)
 2008030:	003fda06 	br	2007f9c <__lo0bits+0x2c>

02008034 <__mcmp>:
 2008034:	20800417 	ldw	r2,16(r4)
 2008038:	28c00417 	ldw	r3,16(r5)
 200803c:	10cfc83a 	sub	r7,r2,r3
 2008040:	38000c1e 	bne	r7,zero,2008074 <__mcmp+0x40>
 2008044:	18c5883a 	add	r2,r3,r3
 2008048:	1085883a 	add	r2,r2,r2
 200804c:	10c00504 	addi	r3,r2,20
 2008050:	21000504 	addi	r4,r4,20
 2008054:	28cb883a 	add	r5,r5,r3
 2008058:	2085883a 	add	r2,r4,r2
 200805c:	10bfff04 	addi	r2,r2,-4
 2008060:	297fff04 	addi	r5,r5,-4
 2008064:	11800017 	ldw	r6,0(r2)
 2008068:	28c00017 	ldw	r3,0(r5)
 200806c:	30c0031e 	bne	r6,r3,200807c <__mcmp+0x48>
 2008070:	20bffa36 	bltu	r4,r2,200805c <__mcmp+0x28>
 2008074:	3805883a 	mov	r2,r7
 2008078:	f800283a 	ret
 200807c:	30c00336 	bltu	r6,r3,200808c <__mcmp+0x58>
 2008080:	01c00044 	movi	r7,1
 2008084:	3805883a 	mov	r2,r7
 2008088:	f800283a 	ret
 200808c:	01ffffc4 	movi	r7,-1
 2008090:	003ff806 	br	2008074 <__mcmp+0x40>

02008094 <__ulp>:
 2008094:	295ffc2c 	andhi	r5,r5,32752
 2008098:	013f3034 	movhi	r4,64704
 200809c:	290b883a 	add	r5,r5,r4
 20080a0:	0145c83a 	sub	r2,zero,r5
 20080a4:	1007d53a 	srai	r3,r2,20
 20080a8:	000d883a 	mov	r6,zero
 20080ac:	0140040e 	bge	zero,r5,20080c0 <__ulp+0x2c>
 20080b0:	280f883a 	mov	r7,r5
 20080b4:	3807883a 	mov	r3,r7
 20080b8:	3005883a 	mov	r2,r6
 20080bc:	f800283a 	ret
 20080c0:	008004c4 	movi	r2,19
 20080c4:	193ffb04 	addi	r4,r3,-20
 20080c8:	10c00c0e 	bge	r2,r3,20080fc <__ulp+0x68>
 20080cc:	008007c4 	movi	r2,31
 20080d0:	1107c83a 	sub	r3,r2,r4
 20080d4:	00800784 	movi	r2,30
 20080d8:	01400044 	movi	r5,1
 20080dc:	11000216 	blt	r2,r4,20080e8 <__ulp+0x54>
 20080e0:	00800044 	movi	r2,1
 20080e4:	10ca983a 	sll	r5,r2,r3
 20080e8:	000f883a 	mov	r7,zero
 20080ec:	280d883a 	mov	r6,r5
 20080f0:	3807883a 	mov	r3,r7
 20080f4:	3005883a 	mov	r2,r6
 20080f8:	f800283a 	ret
 20080fc:	00800234 	movhi	r2,8
 2008100:	10cfd83a 	sra	r7,r2,r3
 2008104:	000d883a 	mov	r6,zero
 2008108:	3005883a 	mov	r2,r6
 200810c:	3807883a 	mov	r3,r7
 2008110:	f800283a 	ret

02008114 <__b2d>:
 2008114:	20800417 	ldw	r2,16(r4)
 2008118:	defff904 	addi	sp,sp,-28
 200811c:	dd000415 	stw	r20,16(sp)
 2008120:	1085883a 	add	r2,r2,r2
 2008124:	25000504 	addi	r20,r4,20
 2008128:	1085883a 	add	r2,r2,r2
 200812c:	dc000015 	stw	r16,0(sp)
 2008130:	a0a1883a 	add	r16,r20,r2
 2008134:	dd400515 	stw	r21,20(sp)
 2008138:	857fff17 	ldw	r21,-4(r16)
 200813c:	dc400115 	stw	r17,4(sp)
 2008140:	dfc00615 	stw	ra,24(sp)
 2008144:	a809883a 	mov	r4,r21
 2008148:	2823883a 	mov	r17,r5
 200814c:	dcc00315 	stw	r19,12(sp)
 2008150:	dc800215 	stw	r18,8(sp)
 2008154:	2007f000 	call	2007f00 <__hi0bits>
 2008158:	100b883a 	mov	r5,r2
 200815c:	00800804 	movi	r2,32
 2008160:	1145c83a 	sub	r2,r2,r5
 2008164:	88800015 	stw	r2,0(r17)
 2008168:	00800284 	movi	r2,10
 200816c:	80ffff04 	addi	r3,r16,-4
 2008170:	11401416 	blt	r2,r5,20081c4 <__b2d+0xb0>
 2008174:	008002c4 	movi	r2,11
 2008178:	1149c83a 	sub	r4,r2,r5
 200817c:	a0c02736 	bltu	r20,r3,200821c <__b2d+0x108>
 2008180:	000d883a 	mov	r6,zero
 2008184:	28800544 	addi	r2,r5,21
 2008188:	a906d83a 	srl	r3,r21,r4
 200818c:	a884983a 	sll	r2,r21,r2
 2008190:	1ccffc34 	orhi	r19,r3,16368
 2008194:	11a4b03a 	or	r18,r2,r6
 2008198:	9005883a 	mov	r2,r18
 200819c:	9807883a 	mov	r3,r19
 20081a0:	dfc00617 	ldw	ra,24(sp)
 20081a4:	dd400517 	ldw	r21,20(sp)
 20081a8:	dd000417 	ldw	r20,16(sp)
 20081ac:	dcc00317 	ldw	r19,12(sp)
 20081b0:	dc800217 	ldw	r18,8(sp)
 20081b4:	dc400117 	ldw	r17,4(sp)
 20081b8:	dc000017 	ldw	r16,0(sp)
 20081bc:	dec00704 	addi	sp,sp,28
 20081c0:	f800283a 	ret
 20081c4:	a0c00e36 	bltu	r20,r3,2008200 <__b2d+0xec>
 20081c8:	293ffd44 	addi	r4,r5,-11
 20081cc:	000d883a 	mov	r6,zero
 20081d0:	20000f26 	beq	r4,zero,2008210 <__b2d+0xfc>
 20081d4:	00800804 	movi	r2,32
 20081d8:	110bc83a 	sub	r5,r2,r4
 20081dc:	a0c01236 	bltu	r20,r3,2008228 <__b2d+0x114>
 20081e0:	000f883a 	mov	r7,zero
 20081e4:	a904983a 	sll	r2,r21,r4
 20081e8:	3146d83a 	srl	r3,r6,r5
 20081ec:	3108983a 	sll	r4,r6,r4
 20081f0:	108ffc34 	orhi	r2,r2,16368
 20081f4:	18a6b03a 	or	r19,r3,r2
 20081f8:	3924b03a 	or	r18,r7,r4
 20081fc:	003fe606 	br	2008198 <__b2d+0x84>
 2008200:	293ffd44 	addi	r4,r5,-11
 2008204:	81bffe17 	ldw	r6,-8(r16)
 2008208:	80fffe04 	addi	r3,r16,-8
 200820c:	203ff11e 	bne	r4,zero,20081d4 <__b2d+0xc0>
 2008210:	accffc34 	orhi	r19,r21,16368
 2008214:	3025883a 	mov	r18,r6
 2008218:	003fdf06 	br	2008198 <__b2d+0x84>
 200821c:	18bfff17 	ldw	r2,-4(r3)
 2008220:	110cd83a 	srl	r6,r2,r4
 2008224:	003fd706 	br	2008184 <__b2d+0x70>
 2008228:	18bfff17 	ldw	r2,-4(r3)
 200822c:	114ed83a 	srl	r7,r2,r5
 2008230:	003fec06 	br	20081e4 <__b2d+0xd0>

02008234 <__ratio>:
 2008234:	defff904 	addi	sp,sp,-28
 2008238:	dc400215 	stw	r17,8(sp)
 200823c:	2823883a 	mov	r17,r5
 2008240:	d80b883a 	mov	r5,sp
 2008244:	dfc00615 	stw	ra,24(sp)
 2008248:	dd000515 	stw	r20,20(sp)
 200824c:	dcc00415 	stw	r19,16(sp)
 2008250:	dc800315 	stw	r18,12(sp)
 2008254:	2025883a 	mov	r18,r4
 2008258:	20081140 	call	2008114 <__b2d>
 200825c:	8809883a 	mov	r4,r17
 2008260:	d9400104 	addi	r5,sp,4
 2008264:	1027883a 	mov	r19,r2
 2008268:	1829883a 	mov	r20,r3
 200826c:	20081140 	call	2008114 <__b2d>
 2008270:	89000417 	ldw	r4,16(r17)
 2008274:	91c00417 	ldw	r7,16(r18)
 2008278:	d9800117 	ldw	r6,4(sp)
 200827c:	180b883a 	mov	r5,r3
 2008280:	390fc83a 	sub	r7,r7,r4
 2008284:	1009883a 	mov	r4,r2
 2008288:	d8800017 	ldw	r2,0(sp)
 200828c:	380e917a 	slli	r7,r7,5
 2008290:	2011883a 	mov	r8,r4
 2008294:	1185c83a 	sub	r2,r2,r6
 2008298:	11c5883a 	add	r2,r2,r7
 200829c:	1006953a 	slli	r3,r2,20
 20082a0:	2813883a 	mov	r9,r5
 20082a4:	00800d0e 	bge	zero,r2,20082dc <__ratio+0xa8>
 20082a8:	1d29883a 	add	r20,r3,r20
 20082ac:	a00b883a 	mov	r5,r20
 20082b0:	480f883a 	mov	r7,r9
 20082b4:	9809883a 	mov	r4,r19
 20082b8:	400d883a 	mov	r6,r8
 20082bc:	200ac900 	call	200ac90 <__divdf3>
 20082c0:	dfc00617 	ldw	ra,24(sp)
 20082c4:	dd000517 	ldw	r20,20(sp)
 20082c8:	dcc00417 	ldw	r19,16(sp)
 20082cc:	dc800317 	ldw	r18,12(sp)
 20082d0:	dc400217 	ldw	r17,8(sp)
 20082d4:	dec00704 	addi	sp,sp,28
 20082d8:	f800283a 	ret
 20082dc:	28d3c83a 	sub	r9,r5,r3
 20082e0:	003ff206 	br	20082ac <__ratio+0x78>

020082e4 <_mprec_log10>:
 20082e4:	defffe04 	addi	sp,sp,-8
 20082e8:	008005c4 	movi	r2,23
 20082ec:	dc000015 	stw	r16,0(sp)
 20082f0:	dfc00115 	stw	ra,4(sp)
 20082f4:	2021883a 	mov	r16,r4
 20082f8:	11000c16 	blt	r2,r4,200832c <_mprec_log10+0x48>
 20082fc:	200490fa 	slli	r2,r4,3
 2008300:	00c08074 	movhi	r3,513
 2008304:	18fd3f04 	addi	r3,r3,-2820
 2008308:	10c5883a 	add	r2,r2,r3
 200830c:	12400117 	ldw	r9,4(r2)
 2008310:	12000017 	ldw	r8,0(r2)
 2008314:	4807883a 	mov	r3,r9
 2008318:	4005883a 	mov	r2,r8
 200831c:	dfc00117 	ldw	ra,4(sp)
 2008320:	dc000017 	ldw	r16,0(sp)
 2008324:	dec00204 	addi	sp,sp,8
 2008328:	f800283a 	ret
 200832c:	0011883a 	mov	r8,zero
 2008330:	024ffc34 	movhi	r9,16368
 2008334:	0005883a 	mov	r2,zero
 2008338:	00d00934 	movhi	r3,16420
 200833c:	480b883a 	mov	r5,r9
 2008340:	4009883a 	mov	r4,r8
 2008344:	180f883a 	mov	r7,r3
 2008348:	100d883a 	mov	r6,r2
 200834c:	200a8cc0 	call	200a8cc <__muldf3>
 2008350:	843fffc4 	addi	r16,r16,-1
 2008354:	1011883a 	mov	r8,r2
 2008358:	1813883a 	mov	r9,r3
 200835c:	803ff51e 	bne	r16,zero,2008334 <_mprec_log10+0x50>
 2008360:	4005883a 	mov	r2,r8
 2008364:	4807883a 	mov	r3,r9
 2008368:	dfc00117 	ldw	ra,4(sp)
 200836c:	dc000017 	ldw	r16,0(sp)
 2008370:	dec00204 	addi	sp,sp,8
 2008374:	f800283a 	ret

02008378 <__copybits>:
 2008378:	297fffc4 	addi	r5,r5,-1
 200837c:	30800417 	ldw	r2,16(r6)
 2008380:	280bd17a 	srai	r5,r5,5
 2008384:	31800504 	addi	r6,r6,20
 2008388:	1085883a 	add	r2,r2,r2
 200838c:	294b883a 	add	r5,r5,r5
 2008390:	294b883a 	add	r5,r5,r5
 2008394:	1085883a 	add	r2,r2,r2
 2008398:	290b883a 	add	r5,r5,r4
 200839c:	3087883a 	add	r3,r6,r2
 20083a0:	29400104 	addi	r5,r5,4
 20083a4:	30c0052e 	bgeu	r6,r3,20083bc <__copybits+0x44>
 20083a8:	30800017 	ldw	r2,0(r6)
 20083ac:	31800104 	addi	r6,r6,4
 20083b0:	20800015 	stw	r2,0(r4)
 20083b4:	21000104 	addi	r4,r4,4
 20083b8:	30fffb36 	bltu	r6,r3,20083a8 <__copybits+0x30>
 20083bc:	2140032e 	bgeu	r4,r5,20083cc <__copybits+0x54>
 20083c0:	20000015 	stw	zero,0(r4)
 20083c4:	21000104 	addi	r4,r4,4
 20083c8:	217ffd36 	bltu	r4,r5,20083c0 <__copybits+0x48>
 20083cc:	f800283a 	ret

020083d0 <__any_on>:
 20083d0:	20800417 	ldw	r2,16(r4)
 20083d4:	2807d17a 	srai	r3,r5,5
 20083d8:	21000504 	addi	r4,r4,20
 20083dc:	10c00d0e 	bge	r2,r3,2008414 <__any_on+0x44>
 20083e0:	1085883a 	add	r2,r2,r2
 20083e4:	1085883a 	add	r2,r2,r2
 20083e8:	208d883a 	add	r6,r4,r2
 20083ec:	2180182e 	bgeu	r4,r6,2008450 <__any_on+0x80>
 20083f0:	30bfff17 	ldw	r2,-4(r6)
 20083f4:	30ffff04 	addi	r3,r6,-4
 20083f8:	1000041e 	bne	r2,zero,200840c <__any_on+0x3c>
 20083fc:	20c0142e 	bgeu	r4,r3,2008450 <__any_on+0x80>
 2008400:	18ffff04 	addi	r3,r3,-4
 2008404:	18800017 	ldw	r2,0(r3)
 2008408:	103ffc26 	beq	r2,zero,20083fc <__any_on+0x2c>
 200840c:	00800044 	movi	r2,1
 2008410:	f800283a 	ret
 2008414:	18800a0e 	bge	r3,r2,2008440 <__any_on+0x70>
 2008418:	294007cc 	andi	r5,r5,31
 200841c:	28000826 	beq	r5,zero,2008440 <__any_on+0x70>
 2008420:	18c5883a 	add	r2,r3,r3
 2008424:	1085883a 	add	r2,r2,r2
 2008428:	208d883a 	add	r6,r4,r2
 200842c:	30c00017 	ldw	r3,0(r6)
 2008430:	1944d83a 	srl	r2,r3,r5
 2008434:	1144983a 	sll	r2,r2,r5
 2008438:	18bff41e 	bne	r3,r2,200840c <__any_on+0x3c>
 200843c:	003feb06 	br	20083ec <__any_on+0x1c>
 2008440:	18c5883a 	add	r2,r3,r3
 2008444:	1085883a 	add	r2,r2,r2
 2008448:	208d883a 	add	r6,r4,r2
 200844c:	003fe706 	br	20083ec <__any_on+0x1c>
 2008450:	0005883a 	mov	r2,zero
 2008454:	f800283a 	ret

02008458 <_Balloc>:
 2008458:	20c01317 	ldw	r3,76(r4)
 200845c:	defffb04 	addi	sp,sp,-20
 2008460:	dcc00315 	stw	r19,12(sp)
 2008464:	dc800215 	stw	r18,8(sp)
 2008468:	dfc00415 	stw	ra,16(sp)
 200846c:	2825883a 	mov	r18,r5
 2008470:	dc400115 	stw	r17,4(sp)
 2008474:	dc000015 	stw	r16,0(sp)
 2008478:	2027883a 	mov	r19,r4
 200847c:	01800404 	movi	r6,16
 2008480:	01400104 	movi	r5,4
 2008484:	18001726 	beq	r3,zero,20084e4 <_Balloc+0x8c>
 2008488:	01400044 	movi	r5,1
 200848c:	9485883a 	add	r2,r18,r18
 2008490:	2ca2983a 	sll	r17,r5,r18
 2008494:	1085883a 	add	r2,r2,r2
 2008498:	10c7883a 	add	r3,r2,r3
 200849c:	1c000017 	ldw	r16,0(r3)
 20084a0:	8c4d883a 	add	r6,r17,r17
 20084a4:	318d883a 	add	r6,r6,r6
 20084a8:	9809883a 	mov	r4,r19
 20084ac:	31800504 	addi	r6,r6,20
 20084b0:	80001226 	beq	r16,zero,20084fc <_Balloc+0xa4>
 20084b4:	80800017 	ldw	r2,0(r16)
 20084b8:	18800015 	stw	r2,0(r3)
 20084bc:	80000415 	stw	zero,16(r16)
 20084c0:	80000315 	stw	zero,12(r16)
 20084c4:	8005883a 	mov	r2,r16
 20084c8:	dfc00417 	ldw	ra,16(sp)
 20084cc:	dcc00317 	ldw	r19,12(sp)
 20084d0:	dc800217 	ldw	r18,8(sp)
 20084d4:	dc400117 	ldw	r17,4(sp)
 20084d8:	dc000017 	ldw	r16,0(sp)
 20084dc:	dec00504 	addi	sp,sp,20
 20084e0:	f800283a 	ret
 20084e4:	20096640 	call	2009664 <_calloc_r>
 20084e8:	1007883a 	mov	r3,r2
 20084ec:	0021883a 	mov	r16,zero
 20084f0:	98801315 	stw	r2,76(r19)
 20084f4:	103fe41e 	bne	r2,zero,2008488 <_Balloc+0x30>
 20084f8:	003ff206 	br	20084c4 <_Balloc+0x6c>
 20084fc:	20096640 	call	2009664 <_calloc_r>
 2008500:	103ff026 	beq	r2,zero,20084c4 <_Balloc+0x6c>
 2008504:	1021883a 	mov	r16,r2
 2008508:	14800115 	stw	r18,4(r2)
 200850c:	14400215 	stw	r17,8(r2)
 2008510:	003fea06 	br	20084bc <_Balloc+0x64>

02008514 <__d2b>:
 2008514:	defff504 	addi	sp,sp,-44
 2008518:	dcc00515 	stw	r19,20(sp)
 200851c:	04c00044 	movi	r19,1
 2008520:	dc000215 	stw	r16,8(sp)
 2008524:	2821883a 	mov	r16,r5
 2008528:	980b883a 	mov	r5,r19
 200852c:	ddc00915 	stw	r23,36(sp)
 2008530:	dd800815 	stw	r22,32(sp)
 2008534:	dd400715 	stw	r21,28(sp)
 2008538:	dd000615 	stw	r20,24(sp)
 200853c:	dc800415 	stw	r18,16(sp)
 2008540:	dc400315 	stw	r17,12(sp)
 2008544:	dfc00a15 	stw	ra,40(sp)
 2008548:	3023883a 	mov	r17,r6
 200854c:	382d883a 	mov	r22,r7
 2008550:	ddc00b17 	ldw	r23,44(sp)
 2008554:	20084580 	call	2008458 <_Balloc>
 2008558:	1025883a 	mov	r18,r2
 200855c:	00a00034 	movhi	r2,32768
 2008560:	10bfffc4 	addi	r2,r2,-1
 2008564:	8888703a 	and	r4,r17,r2
 2008568:	202ad53a 	srli	r21,r4,20
 200856c:	00800434 	movhi	r2,16
 2008570:	10bfffc4 	addi	r2,r2,-1
 2008574:	8886703a 	and	r3,r17,r2
 2008578:	a829003a 	cmpeq	r20,r21,zero
 200857c:	800b883a 	mov	r5,r16
 2008580:	d8c00115 	stw	r3,4(sp)
 2008584:	94000504 	addi	r16,r18,20
 2008588:	a000021e 	bne	r20,zero,2008594 <__d2b+0x80>
 200858c:	18c00434 	orhi	r3,r3,16
 2008590:	d8c00115 	stw	r3,4(sp)
 2008594:	28002726 	beq	r5,zero,2008634 <__d2b+0x120>
 2008598:	d809883a 	mov	r4,sp
 200859c:	d9400015 	stw	r5,0(sp)
 20085a0:	2007f700 	call	2007f70 <__lo0bits>
 20085a4:	100d883a 	mov	r6,r2
 20085a8:	10003526 	beq	r2,zero,2008680 <__d2b+0x16c>
 20085ac:	d8c00117 	ldw	r3,4(sp)
 20085b0:	00800804 	movi	r2,32
 20085b4:	1185c83a 	sub	r2,r2,r6
 20085b8:	d9000017 	ldw	r4,0(sp)
 20085bc:	1886983a 	sll	r3,r3,r2
 20085c0:	1906b03a 	or	r3,r3,r4
 20085c4:	90c00515 	stw	r3,20(r18)
 20085c8:	d8c00117 	ldw	r3,4(sp)
 20085cc:	1986d83a 	srl	r3,r3,r6
 20085d0:	d8c00115 	stw	r3,4(sp)
 20085d4:	180b003a 	cmpeq	r5,r3,zero
 20085d8:	00800084 	movi	r2,2
 20085dc:	114bc83a 	sub	r5,r2,r5
 20085e0:	80c00115 	stw	r3,4(r16)
 20085e4:	91400415 	stw	r5,16(r18)
 20085e8:	a0001a1e 	bne	r20,zero,2008654 <__d2b+0x140>
 20085ec:	3545883a 	add	r2,r6,r21
 20085f0:	10bef344 	addi	r2,r2,-1075
 20085f4:	00c00d44 	movi	r3,53
 20085f8:	b0800015 	stw	r2,0(r22)
 20085fc:	1987c83a 	sub	r3,r3,r6
 2008600:	b8c00015 	stw	r3,0(r23)
 2008604:	9005883a 	mov	r2,r18
 2008608:	dfc00a17 	ldw	ra,40(sp)
 200860c:	ddc00917 	ldw	r23,36(sp)
 2008610:	dd800817 	ldw	r22,32(sp)
 2008614:	dd400717 	ldw	r21,28(sp)
 2008618:	dd000617 	ldw	r20,24(sp)
 200861c:	dcc00517 	ldw	r19,20(sp)
 2008620:	dc800417 	ldw	r18,16(sp)
 2008624:	dc400317 	ldw	r17,12(sp)
 2008628:	dc000217 	ldw	r16,8(sp)
 200862c:	dec00b04 	addi	sp,sp,44
 2008630:	f800283a 	ret
 2008634:	d9000104 	addi	r4,sp,4
 2008638:	2007f700 	call	2007f70 <__lo0bits>
 200863c:	11800804 	addi	r6,r2,32
 2008640:	d8800117 	ldw	r2,4(sp)
 2008644:	94c00415 	stw	r19,16(r18)
 2008648:	980b883a 	mov	r5,r19
 200864c:	90800515 	stw	r2,20(r18)
 2008650:	a03fe626 	beq	r20,zero,20085ec <__d2b+0xd8>
 2008654:	2945883a 	add	r2,r5,r5
 2008658:	1085883a 	add	r2,r2,r2
 200865c:	1405883a 	add	r2,r2,r16
 2008660:	113fff17 	ldw	r4,-4(r2)
 2008664:	30fef384 	addi	r3,r6,-1074
 2008668:	2820917a 	slli	r16,r5,5
 200866c:	b0c00015 	stw	r3,0(r22)
 2008670:	2007f000 	call	2007f00 <__hi0bits>
 2008674:	80a1c83a 	sub	r16,r16,r2
 2008678:	bc000015 	stw	r16,0(r23)
 200867c:	003fe106 	br	2008604 <__d2b+0xf0>
 2008680:	d8800017 	ldw	r2,0(sp)
 2008684:	90800515 	stw	r2,20(r18)
 2008688:	d8c00117 	ldw	r3,4(sp)
 200868c:	003fd106 	br	20085d4 <__d2b+0xc0>

02008690 <__mdiff>:
 2008690:	defffb04 	addi	sp,sp,-20
 2008694:	dc000015 	stw	r16,0(sp)
 2008698:	2821883a 	mov	r16,r5
 200869c:	dc800215 	stw	r18,8(sp)
 20086a0:	300b883a 	mov	r5,r6
 20086a4:	2025883a 	mov	r18,r4
 20086a8:	8009883a 	mov	r4,r16
 20086ac:	dc400115 	stw	r17,4(sp)
 20086b0:	dfc00415 	stw	ra,16(sp)
 20086b4:	dcc00315 	stw	r19,12(sp)
 20086b8:	3023883a 	mov	r17,r6
 20086bc:	20080340 	call	2008034 <__mcmp>
 20086c0:	10004226 	beq	r2,zero,20087cc <__mdiff+0x13c>
 20086c4:	10005016 	blt	r2,zero,2008808 <__mdiff+0x178>
 20086c8:	0027883a 	mov	r19,zero
 20086cc:	81400117 	ldw	r5,4(r16)
 20086d0:	9009883a 	mov	r4,r18
 20086d4:	20084580 	call	2008458 <_Balloc>
 20086d8:	1019883a 	mov	r12,r2
 20086dc:	82800417 	ldw	r10,16(r16)
 20086e0:	88800417 	ldw	r2,16(r17)
 20086e4:	81800504 	addi	r6,r16,20
 20086e8:	5287883a 	add	r3,r10,r10
 20086ec:	1085883a 	add	r2,r2,r2
 20086f0:	18c7883a 	add	r3,r3,r3
 20086f4:	1085883a 	add	r2,r2,r2
 20086f8:	8a000504 	addi	r8,r17,20
 20086fc:	64c00315 	stw	r19,12(r12)
 2008700:	30db883a 	add	r13,r6,r3
 2008704:	4097883a 	add	r11,r8,r2
 2008708:	61c00504 	addi	r7,r12,20
 200870c:	0013883a 	mov	r9,zero
 2008710:	31000017 	ldw	r4,0(r6)
 2008714:	41400017 	ldw	r5,0(r8)
 2008718:	42000104 	addi	r8,r8,4
 200871c:	20bfffcc 	andi	r2,r4,65535
 2008720:	28ffffcc 	andi	r3,r5,65535
 2008724:	10c5c83a 	sub	r2,r2,r3
 2008728:	1245883a 	add	r2,r2,r9
 200872c:	2008d43a 	srli	r4,r4,16
 2008730:	280ad43a 	srli	r5,r5,16
 2008734:	1007d43a 	srai	r3,r2,16
 2008738:	3880000d 	sth	r2,0(r7)
 200873c:	2149c83a 	sub	r4,r4,r5
 2008740:	20c9883a 	add	r4,r4,r3
 2008744:	3900008d 	sth	r4,2(r7)
 2008748:	31800104 	addi	r6,r6,4
 200874c:	39c00104 	addi	r7,r7,4
 2008750:	2013d43a 	srai	r9,r4,16
 2008754:	42ffee36 	bltu	r8,r11,2008710 <__mdiff+0x80>
 2008758:	33400c2e 	bgeu	r6,r13,200878c <__mdiff+0xfc>
 200875c:	30800017 	ldw	r2,0(r6)
 2008760:	31800104 	addi	r6,r6,4
 2008764:	10ffffcc 	andi	r3,r2,65535
 2008768:	1a47883a 	add	r3,r3,r9
 200876c:	1004d43a 	srli	r2,r2,16
 2008770:	1809d43a 	srai	r4,r3,16
 2008774:	38c0000d 	sth	r3,0(r7)
 2008778:	1105883a 	add	r2,r2,r4
 200877c:	3880008d 	sth	r2,2(r7)
 2008780:	1013d43a 	srai	r9,r2,16
 2008784:	39c00104 	addi	r7,r7,4
 2008788:	337ff436 	bltu	r6,r13,200875c <__mdiff+0xcc>
 200878c:	38bfff17 	ldw	r2,-4(r7)
 2008790:	38ffff04 	addi	r3,r7,-4
 2008794:	1000041e 	bne	r2,zero,20087a8 <__mdiff+0x118>
 2008798:	18ffff04 	addi	r3,r3,-4
 200879c:	18800017 	ldw	r2,0(r3)
 20087a0:	52bfffc4 	addi	r10,r10,-1
 20087a4:	103ffc26 	beq	r2,zero,2008798 <__mdiff+0x108>
 20087a8:	6005883a 	mov	r2,r12
 20087ac:	62800415 	stw	r10,16(r12)
 20087b0:	dfc00417 	ldw	ra,16(sp)
 20087b4:	dcc00317 	ldw	r19,12(sp)
 20087b8:	dc800217 	ldw	r18,8(sp)
 20087bc:	dc400117 	ldw	r17,4(sp)
 20087c0:	dc000017 	ldw	r16,0(sp)
 20087c4:	dec00504 	addi	sp,sp,20
 20087c8:	f800283a 	ret
 20087cc:	9009883a 	mov	r4,r18
 20087d0:	000b883a 	mov	r5,zero
 20087d4:	20084580 	call	2008458 <_Balloc>
 20087d8:	1019883a 	mov	r12,r2
 20087dc:	00800044 	movi	r2,1
 20087e0:	60800415 	stw	r2,16(r12)
 20087e4:	6005883a 	mov	r2,r12
 20087e8:	60000515 	stw	zero,20(r12)
 20087ec:	dfc00417 	ldw	ra,16(sp)
 20087f0:	dcc00317 	ldw	r19,12(sp)
 20087f4:	dc800217 	ldw	r18,8(sp)
 20087f8:	dc400117 	ldw	r17,4(sp)
 20087fc:	dc000017 	ldw	r16,0(sp)
 2008800:	dec00504 	addi	sp,sp,20
 2008804:	f800283a 	ret
 2008808:	880d883a 	mov	r6,r17
 200880c:	04c00044 	movi	r19,1
 2008810:	8023883a 	mov	r17,r16
 2008814:	3021883a 	mov	r16,r6
 2008818:	003fac06 	br	20086cc <__mdiff+0x3c>

0200881c <__lshift>:
 200881c:	defff904 	addi	sp,sp,-28
 2008820:	28800417 	ldw	r2,16(r5)
 2008824:	dc000015 	stw	r16,0(sp)
 2008828:	3021d17a 	srai	r16,r6,5
 200882c:	28c00217 	ldw	r3,8(r5)
 2008830:	10800044 	addi	r2,r2,1
 2008834:	dc400115 	stw	r17,4(sp)
 2008838:	80a3883a 	add	r17,r16,r2
 200883c:	dd400515 	stw	r21,20(sp)
 2008840:	dd000415 	stw	r20,16(sp)
 2008844:	dc800215 	stw	r18,8(sp)
 2008848:	dfc00615 	stw	ra,24(sp)
 200884c:	2825883a 	mov	r18,r5
 2008850:	dcc00315 	stw	r19,12(sp)
 2008854:	3029883a 	mov	r20,r6
 2008858:	202b883a 	mov	r21,r4
 200885c:	29400117 	ldw	r5,4(r5)
 2008860:	1c40030e 	bge	r3,r17,2008870 <__lshift+0x54>
 2008864:	18c7883a 	add	r3,r3,r3
 2008868:	29400044 	addi	r5,r5,1
 200886c:	1c7ffd16 	blt	r3,r17,2008864 <__lshift+0x48>
 2008870:	a809883a 	mov	r4,r21
 2008874:	20084580 	call	2008458 <_Balloc>
 2008878:	1027883a 	mov	r19,r2
 200887c:	11400504 	addi	r5,r2,20
 2008880:	0400090e 	bge	zero,r16,20088a8 <__lshift+0x8c>
 2008884:	2805883a 	mov	r2,r5
 2008888:	0007883a 	mov	r3,zero
 200888c:	18c00044 	addi	r3,r3,1
 2008890:	10000015 	stw	zero,0(r2)
 2008894:	10800104 	addi	r2,r2,4
 2008898:	80fffc1e 	bne	r16,r3,200888c <__lshift+0x70>
 200889c:	8405883a 	add	r2,r16,r16
 20088a0:	1085883a 	add	r2,r2,r2
 20088a4:	288b883a 	add	r5,r5,r2
 20088a8:	90800417 	ldw	r2,16(r18)
 20088ac:	91000504 	addi	r4,r18,20
 20088b0:	a18007cc 	andi	r6,r20,31
 20088b4:	1085883a 	add	r2,r2,r2
 20088b8:	1085883a 	add	r2,r2,r2
 20088bc:	208f883a 	add	r7,r4,r2
 20088c0:	30001e26 	beq	r6,zero,200893c <__lshift+0x120>
 20088c4:	00800804 	movi	r2,32
 20088c8:	1191c83a 	sub	r8,r2,r6
 20088cc:	0007883a 	mov	r3,zero
 20088d0:	20800017 	ldw	r2,0(r4)
 20088d4:	1184983a 	sll	r2,r2,r6
 20088d8:	1884b03a 	or	r2,r3,r2
 20088dc:	28800015 	stw	r2,0(r5)
 20088e0:	20c00017 	ldw	r3,0(r4)
 20088e4:	21000104 	addi	r4,r4,4
 20088e8:	29400104 	addi	r5,r5,4
 20088ec:	1a06d83a 	srl	r3,r3,r8
 20088f0:	21fff736 	bltu	r4,r7,20088d0 <__lshift+0xb4>
 20088f4:	28c00015 	stw	r3,0(r5)
 20088f8:	18000126 	beq	r3,zero,2008900 <__lshift+0xe4>
 20088fc:	8c400044 	addi	r17,r17,1
 2008900:	88bfffc4 	addi	r2,r17,-1
 2008904:	98800415 	stw	r2,16(r19)
 2008908:	a809883a 	mov	r4,r21
 200890c:	900b883a 	mov	r5,r18
 2008910:	2007ed80 	call	2007ed8 <_Bfree>
 2008914:	9805883a 	mov	r2,r19
 2008918:	dfc00617 	ldw	ra,24(sp)
 200891c:	dd400517 	ldw	r21,20(sp)
 2008920:	dd000417 	ldw	r20,16(sp)
 2008924:	dcc00317 	ldw	r19,12(sp)
 2008928:	dc800217 	ldw	r18,8(sp)
 200892c:	dc400117 	ldw	r17,4(sp)
 2008930:	dc000017 	ldw	r16,0(sp)
 2008934:	dec00704 	addi	sp,sp,28
 2008938:	f800283a 	ret
 200893c:	20800017 	ldw	r2,0(r4)
 2008940:	21000104 	addi	r4,r4,4
 2008944:	28800015 	stw	r2,0(r5)
 2008948:	29400104 	addi	r5,r5,4
 200894c:	21ffec2e 	bgeu	r4,r7,2008900 <__lshift+0xe4>
 2008950:	20800017 	ldw	r2,0(r4)
 2008954:	21000104 	addi	r4,r4,4
 2008958:	28800015 	stw	r2,0(r5)
 200895c:	29400104 	addi	r5,r5,4
 2008960:	21fff636 	bltu	r4,r7,200893c <__lshift+0x120>
 2008964:	003fe606 	br	2008900 <__lshift+0xe4>

02008968 <__multiply>:
 2008968:	defff904 	addi	sp,sp,-28
 200896c:	dcc00315 	stw	r19,12(sp)
 2008970:	dc800215 	stw	r18,8(sp)
 2008974:	2cc00417 	ldw	r19,16(r5)
 2008978:	34800417 	ldw	r18,16(r6)
 200897c:	dd000415 	stw	r20,16(sp)
 2008980:	dc400115 	stw	r17,4(sp)
 2008984:	dfc00615 	stw	ra,24(sp)
 2008988:	dd400515 	stw	r21,20(sp)
 200898c:	dc000015 	stw	r16,0(sp)
 2008990:	2823883a 	mov	r17,r5
 2008994:	3029883a 	mov	r20,r6
 2008998:	9c80040e 	bge	r19,r18,20089ac <__multiply+0x44>
 200899c:	9027883a 	mov	r19,r18
 20089a0:	2c800417 	ldw	r18,16(r5)
 20089a4:	2829883a 	mov	r20,r5
 20089a8:	3023883a 	mov	r17,r6
 20089ac:	88800217 	ldw	r2,8(r17)
 20089b0:	9ca1883a 	add	r16,r19,r18
 20089b4:	89400117 	ldw	r5,4(r17)
 20089b8:	1400010e 	bge	r2,r16,20089c0 <__multiply+0x58>
 20089bc:	29400044 	addi	r5,r5,1
 20089c0:	20084580 	call	2008458 <_Balloc>
 20089c4:	102b883a 	mov	r21,r2
 20089c8:	8405883a 	add	r2,r16,r16
 20089cc:	1085883a 	add	r2,r2,r2
 20089d0:	a9000504 	addi	r4,r21,20
 20089d4:	209d883a 	add	r14,r4,r2
 20089d8:	2380042e 	bgeu	r4,r14,20089ec <__multiply+0x84>
 20089dc:	2005883a 	mov	r2,r4
 20089e0:	10000015 	stw	zero,0(r2)
 20089e4:	10800104 	addi	r2,r2,4
 20089e8:	13bffd36 	bltu	r2,r14,20089e0 <__multiply+0x78>
 20089ec:	9485883a 	add	r2,r18,r18
 20089f0:	9cc7883a 	add	r3,r19,r19
 20089f4:	a1800504 	addi	r6,r20,20
 20089f8:	1085883a 	add	r2,r2,r2
 20089fc:	8b400504 	addi	r13,r17,20
 2008a00:	18c7883a 	add	r3,r3,r3
 2008a04:	309f883a 	add	r15,r6,r2
 2008a08:	68d7883a 	add	r11,r13,r3
 2008a0c:	33c03b2e 	bgeu	r6,r15,2008afc <__multiply+0x194>
 2008a10:	2019883a 	mov	r12,r4
 2008a14:	30800017 	ldw	r2,0(r6)
 2008a18:	127fffcc 	andi	r9,r2,65535
 2008a1c:	48001826 	beq	r9,zero,2008a80 <__multiply+0x118>
 2008a20:	6811883a 	mov	r8,r13
 2008a24:	600f883a 	mov	r7,r12
 2008a28:	0015883a 	mov	r10,zero
 2008a2c:	40c00017 	ldw	r3,0(r8)
 2008a30:	39400017 	ldw	r5,0(r7)
 2008a34:	42000104 	addi	r8,r8,4
 2008a38:	193fffcc 	andi	r4,r3,65535
 2008a3c:	4909383a 	mul	r4,r9,r4
 2008a40:	1806d43a 	srli	r3,r3,16
 2008a44:	28bfffcc 	andi	r2,r5,65535
 2008a48:	5085883a 	add	r2,r10,r2
 2008a4c:	2089883a 	add	r4,r4,r2
 2008a50:	48c7383a 	mul	r3,r9,r3
 2008a54:	280ad43a 	srli	r5,r5,16
 2008a58:	2004d43a 	srli	r2,r4,16
 2008a5c:	3900000d 	sth	r4,0(r7)
 2008a60:	1947883a 	add	r3,r3,r5
 2008a64:	10c5883a 	add	r2,r2,r3
 2008a68:	3880008d 	sth	r2,2(r7)
 2008a6c:	1014d43a 	srli	r10,r2,16
 2008a70:	39c00104 	addi	r7,r7,4
 2008a74:	42ffed36 	bltu	r8,r11,2008a2c <__multiply+0xc4>
 2008a78:	3a800015 	stw	r10,0(r7)
 2008a7c:	30800017 	ldw	r2,0(r6)
 2008a80:	1012d43a 	srli	r9,r2,16
 2008a84:	48001926 	beq	r9,zero,2008aec <__multiply+0x184>
 2008a88:	60800017 	ldw	r2,0(r12)
 2008a8c:	6811883a 	mov	r8,r13
 2008a90:	600f883a 	mov	r7,r12
 2008a94:	0015883a 	mov	r10,zero
 2008a98:	100b883a 	mov	r5,r2
 2008a9c:	41000017 	ldw	r4,0(r8)
 2008aa0:	2806d43a 	srli	r3,r5,16
 2008aa4:	3880000d 	sth	r2,0(r7)
 2008aa8:	20bfffcc 	andi	r2,r4,65535
 2008aac:	4885383a 	mul	r2,r9,r2
 2008ab0:	50c7883a 	add	r3,r10,r3
 2008ab4:	2008d43a 	srli	r4,r4,16
 2008ab8:	10c5883a 	add	r2,r2,r3
 2008abc:	3880008d 	sth	r2,2(r7)
 2008ac0:	39c00104 	addi	r7,r7,4
 2008ac4:	39400017 	ldw	r5,0(r7)
 2008ac8:	4909383a 	mul	r4,r9,r4
 2008acc:	1004d43a 	srli	r2,r2,16
 2008ad0:	28ffffcc 	andi	r3,r5,65535
 2008ad4:	20c9883a 	add	r4,r4,r3
 2008ad8:	1105883a 	add	r2,r2,r4
 2008adc:	42000104 	addi	r8,r8,4
 2008ae0:	1014d43a 	srli	r10,r2,16
 2008ae4:	42ffed36 	bltu	r8,r11,2008a9c <__multiply+0x134>
 2008ae8:	38800015 	stw	r2,0(r7)
 2008aec:	31800104 	addi	r6,r6,4
 2008af0:	33c0022e 	bgeu	r6,r15,2008afc <__multiply+0x194>
 2008af4:	63000104 	addi	r12,r12,4
 2008af8:	003fc606 	br	2008a14 <__multiply+0xac>
 2008afc:	0400090e 	bge	zero,r16,2008b24 <__multiply+0x1bc>
 2008b00:	70bfff17 	ldw	r2,-4(r14)
 2008b04:	70ffff04 	addi	r3,r14,-4
 2008b08:	10000326 	beq	r2,zero,2008b18 <__multiply+0x1b0>
 2008b0c:	00000506 	br	2008b24 <__multiply+0x1bc>
 2008b10:	18800017 	ldw	r2,0(r3)
 2008b14:	1000031e 	bne	r2,zero,2008b24 <__multiply+0x1bc>
 2008b18:	843fffc4 	addi	r16,r16,-1
 2008b1c:	18ffff04 	addi	r3,r3,-4
 2008b20:	803ffb1e 	bne	r16,zero,2008b10 <__multiply+0x1a8>
 2008b24:	a805883a 	mov	r2,r21
 2008b28:	ac000415 	stw	r16,16(r21)
 2008b2c:	dfc00617 	ldw	ra,24(sp)
 2008b30:	dd400517 	ldw	r21,20(sp)
 2008b34:	dd000417 	ldw	r20,16(sp)
 2008b38:	dcc00317 	ldw	r19,12(sp)
 2008b3c:	dc800217 	ldw	r18,8(sp)
 2008b40:	dc400117 	ldw	r17,4(sp)
 2008b44:	dc000017 	ldw	r16,0(sp)
 2008b48:	dec00704 	addi	sp,sp,28
 2008b4c:	f800283a 	ret

02008b50 <__i2b>:
 2008b50:	defffd04 	addi	sp,sp,-12
 2008b54:	dc000015 	stw	r16,0(sp)
 2008b58:	04000044 	movi	r16,1
 2008b5c:	dc800115 	stw	r18,4(sp)
 2008b60:	2825883a 	mov	r18,r5
 2008b64:	800b883a 	mov	r5,r16
 2008b68:	dfc00215 	stw	ra,8(sp)
 2008b6c:	20084580 	call	2008458 <_Balloc>
 2008b70:	14000415 	stw	r16,16(r2)
 2008b74:	14800515 	stw	r18,20(r2)
 2008b78:	dfc00217 	ldw	ra,8(sp)
 2008b7c:	dc800117 	ldw	r18,4(sp)
 2008b80:	dc000017 	ldw	r16,0(sp)
 2008b84:	dec00304 	addi	sp,sp,12
 2008b88:	f800283a 	ret

02008b8c <__multadd>:
 2008b8c:	defffa04 	addi	sp,sp,-24
 2008b90:	dc800215 	stw	r18,8(sp)
 2008b94:	2c800417 	ldw	r18,16(r5)
 2008b98:	dd000415 	stw	r20,16(sp)
 2008b9c:	dcc00315 	stw	r19,12(sp)
 2008ba0:	dc000015 	stw	r16,0(sp)
 2008ba4:	dfc00515 	stw	ra,20(sp)
 2008ba8:	3821883a 	mov	r16,r7
 2008bac:	dc400115 	stw	r17,4(sp)
 2008bb0:	2827883a 	mov	r19,r5
 2008bb4:	2029883a 	mov	r20,r4
 2008bb8:	2a000504 	addi	r8,r5,20
 2008bbc:	000f883a 	mov	r7,zero
 2008bc0:	40800017 	ldw	r2,0(r8)
 2008bc4:	39c00044 	addi	r7,r7,1
 2008bc8:	10ffffcc 	andi	r3,r2,65535
 2008bcc:	1987383a 	mul	r3,r3,r6
 2008bd0:	1004d43a 	srli	r2,r2,16
 2008bd4:	1c07883a 	add	r3,r3,r16
 2008bd8:	180ad43a 	srli	r5,r3,16
 2008bdc:	1185383a 	mul	r2,r2,r6
 2008be0:	18ffffcc 	andi	r3,r3,65535
 2008be4:	1145883a 	add	r2,r2,r5
 2008be8:	1008943a 	slli	r4,r2,16
 2008bec:	1020d43a 	srli	r16,r2,16
 2008bf0:	20c9883a 	add	r4,r4,r3
 2008bf4:	41000015 	stw	r4,0(r8)
 2008bf8:	42000104 	addi	r8,r8,4
 2008bfc:	3cbff016 	blt	r7,r18,2008bc0 <__multadd+0x34>
 2008c00:	80000826 	beq	r16,zero,2008c24 <__multadd+0x98>
 2008c04:	98800217 	ldw	r2,8(r19)
 2008c08:	90800f0e 	bge	r18,r2,2008c48 <__multadd+0xbc>
 2008c0c:	9485883a 	add	r2,r18,r18
 2008c10:	1085883a 	add	r2,r2,r2
 2008c14:	14c5883a 	add	r2,r2,r19
 2008c18:	90c00044 	addi	r3,r18,1
 2008c1c:	14000515 	stw	r16,20(r2)
 2008c20:	98c00415 	stw	r3,16(r19)
 2008c24:	9805883a 	mov	r2,r19
 2008c28:	dfc00517 	ldw	ra,20(sp)
 2008c2c:	dd000417 	ldw	r20,16(sp)
 2008c30:	dcc00317 	ldw	r19,12(sp)
 2008c34:	dc800217 	ldw	r18,8(sp)
 2008c38:	dc400117 	ldw	r17,4(sp)
 2008c3c:	dc000017 	ldw	r16,0(sp)
 2008c40:	dec00604 	addi	sp,sp,24
 2008c44:	f800283a 	ret
 2008c48:	99400117 	ldw	r5,4(r19)
 2008c4c:	a009883a 	mov	r4,r20
 2008c50:	29400044 	addi	r5,r5,1
 2008c54:	20084580 	call	2008458 <_Balloc>
 2008c58:	99800417 	ldw	r6,16(r19)
 2008c5c:	99400304 	addi	r5,r19,12
 2008c60:	11000304 	addi	r4,r2,12
 2008c64:	318d883a 	add	r6,r6,r6
 2008c68:	318d883a 	add	r6,r6,r6
 2008c6c:	31800204 	addi	r6,r6,8
 2008c70:	1023883a 	mov	r17,r2
 2008c74:	2007cc00 	call	2007cc0 <memcpy>
 2008c78:	980b883a 	mov	r5,r19
 2008c7c:	a009883a 	mov	r4,r20
 2008c80:	2007ed80 	call	2007ed8 <_Bfree>
 2008c84:	8827883a 	mov	r19,r17
 2008c88:	003fe006 	br	2008c0c <__multadd+0x80>

02008c8c <__pow5mult>:
 2008c8c:	defffa04 	addi	sp,sp,-24
 2008c90:	308000cc 	andi	r2,r6,3
 2008c94:	dd000415 	stw	r20,16(sp)
 2008c98:	dcc00315 	stw	r19,12(sp)
 2008c9c:	dc000015 	stw	r16,0(sp)
 2008ca0:	dfc00515 	stw	ra,20(sp)
 2008ca4:	dc800215 	stw	r18,8(sp)
 2008ca8:	dc400115 	stw	r17,4(sp)
 2008cac:	3021883a 	mov	r16,r6
 2008cb0:	2027883a 	mov	r19,r4
 2008cb4:	2829883a 	mov	r20,r5
 2008cb8:	10002b1e 	bne	r2,zero,2008d68 <__pow5mult+0xdc>
 2008cbc:	8025d0ba 	srai	r18,r16,2
 2008cc0:	90001b26 	beq	r18,zero,2008d30 <__pow5mult+0xa4>
 2008cc4:	9c001217 	ldw	r16,72(r19)
 2008cc8:	8000081e 	bne	r16,zero,2008cec <__pow5mult+0x60>
 2008ccc:	00003006 	br	2008d90 <__pow5mult+0x104>
 2008cd0:	800b883a 	mov	r5,r16
 2008cd4:	800d883a 	mov	r6,r16
 2008cd8:	9809883a 	mov	r4,r19
 2008cdc:	90001426 	beq	r18,zero,2008d30 <__pow5mult+0xa4>
 2008ce0:	80800017 	ldw	r2,0(r16)
 2008ce4:	10001b26 	beq	r2,zero,2008d54 <__pow5mult+0xc8>
 2008ce8:	1021883a 	mov	r16,r2
 2008cec:	9080004c 	andi	r2,r18,1
 2008cf0:	1005003a 	cmpeq	r2,r2,zero
 2008cf4:	9025d07a 	srai	r18,r18,1
 2008cf8:	800d883a 	mov	r6,r16
 2008cfc:	9809883a 	mov	r4,r19
 2008d00:	a00b883a 	mov	r5,r20
 2008d04:	103ff21e 	bne	r2,zero,2008cd0 <__pow5mult+0x44>
 2008d08:	20089680 	call	2008968 <__multiply>
 2008d0c:	a00b883a 	mov	r5,r20
 2008d10:	9809883a 	mov	r4,r19
 2008d14:	1023883a 	mov	r17,r2
 2008d18:	2007ed80 	call	2007ed8 <_Bfree>
 2008d1c:	8829883a 	mov	r20,r17
 2008d20:	800b883a 	mov	r5,r16
 2008d24:	800d883a 	mov	r6,r16
 2008d28:	9809883a 	mov	r4,r19
 2008d2c:	903fec1e 	bne	r18,zero,2008ce0 <__pow5mult+0x54>
 2008d30:	a005883a 	mov	r2,r20
 2008d34:	dfc00517 	ldw	ra,20(sp)
 2008d38:	dd000417 	ldw	r20,16(sp)
 2008d3c:	dcc00317 	ldw	r19,12(sp)
 2008d40:	dc800217 	ldw	r18,8(sp)
 2008d44:	dc400117 	ldw	r17,4(sp)
 2008d48:	dc000017 	ldw	r16,0(sp)
 2008d4c:	dec00604 	addi	sp,sp,24
 2008d50:	f800283a 	ret
 2008d54:	20089680 	call	2008968 <__multiply>
 2008d58:	80800015 	stw	r2,0(r16)
 2008d5c:	1021883a 	mov	r16,r2
 2008d60:	10000015 	stw	zero,0(r2)
 2008d64:	003fe106 	br	2008cec <__pow5mult+0x60>
 2008d68:	1085883a 	add	r2,r2,r2
 2008d6c:	00c08074 	movhi	r3,513
 2008d70:	18fd8504 	addi	r3,r3,-2540
 2008d74:	1085883a 	add	r2,r2,r2
 2008d78:	10c5883a 	add	r2,r2,r3
 2008d7c:	11bfff17 	ldw	r6,-4(r2)
 2008d80:	000f883a 	mov	r7,zero
 2008d84:	2008b8c0 	call	2008b8c <__multadd>
 2008d88:	1029883a 	mov	r20,r2
 2008d8c:	003fcb06 	br	2008cbc <__pow5mult+0x30>
 2008d90:	9809883a 	mov	r4,r19
 2008d94:	01409c44 	movi	r5,625
 2008d98:	2008b500 	call	2008b50 <__i2b>
 2008d9c:	98801215 	stw	r2,72(r19)
 2008da0:	1021883a 	mov	r16,r2
 2008da4:	10000015 	stw	zero,0(r2)
 2008da8:	003fd006 	br	2008cec <__pow5mult+0x60>

02008dac <__s2b>:
 2008dac:	defff904 	addi	sp,sp,-28
 2008db0:	dcc00315 	stw	r19,12(sp)
 2008db4:	dc800215 	stw	r18,8(sp)
 2008db8:	2827883a 	mov	r19,r5
 2008dbc:	2025883a 	mov	r18,r4
 2008dc0:	01400244 	movi	r5,9
 2008dc4:	39000204 	addi	r4,r7,8
 2008dc8:	dd000415 	stw	r20,16(sp)
 2008dcc:	dc400115 	stw	r17,4(sp)
 2008dd0:	dfc00615 	stw	ra,24(sp)
 2008dd4:	dd400515 	stw	r21,20(sp)
 2008dd8:	dc000015 	stw	r16,0(sp)
 2008ddc:	3829883a 	mov	r20,r7
 2008de0:	3023883a 	mov	r17,r6
 2008de4:	20011140 	call	2001114 <__divsi3>
 2008de8:	00c00044 	movi	r3,1
 2008dec:	1880350e 	bge	r3,r2,2008ec4 <__s2b+0x118>
 2008df0:	000b883a 	mov	r5,zero
 2008df4:	18c7883a 	add	r3,r3,r3
 2008df8:	29400044 	addi	r5,r5,1
 2008dfc:	18bffd16 	blt	r3,r2,2008df4 <__s2b+0x48>
 2008e00:	9009883a 	mov	r4,r18
 2008e04:	20084580 	call	2008458 <_Balloc>
 2008e08:	1011883a 	mov	r8,r2
 2008e0c:	d8800717 	ldw	r2,28(sp)
 2008e10:	00c00044 	movi	r3,1
 2008e14:	01800244 	movi	r6,9
 2008e18:	40800515 	stw	r2,20(r8)
 2008e1c:	40c00415 	stw	r3,16(r8)
 2008e20:	3440260e 	bge	r6,r17,2008ebc <__s2b+0x110>
 2008e24:	3021883a 	mov	r16,r6
 2008e28:	99ab883a 	add	r21,r19,r6
 2008e2c:	9c05883a 	add	r2,r19,r16
 2008e30:	11c00007 	ldb	r7,0(r2)
 2008e34:	400b883a 	mov	r5,r8
 2008e38:	9009883a 	mov	r4,r18
 2008e3c:	39fff404 	addi	r7,r7,-48
 2008e40:	01800284 	movi	r6,10
 2008e44:	2008b8c0 	call	2008b8c <__multadd>
 2008e48:	84000044 	addi	r16,r16,1
 2008e4c:	1011883a 	mov	r8,r2
 2008e50:	8c3ff61e 	bne	r17,r16,2008e2c <__s2b+0x80>
 2008e54:	ac45883a 	add	r2,r21,r17
 2008e58:	117ffe04 	addi	r5,r2,-8
 2008e5c:	880d883a 	mov	r6,r17
 2008e60:	35000c0e 	bge	r6,r20,2008e94 <__s2b+0xe8>
 2008e64:	a185c83a 	sub	r2,r20,r6
 2008e68:	2821883a 	mov	r16,r5
 2008e6c:	28a3883a 	add	r17,r5,r2
 2008e70:	81c00007 	ldb	r7,0(r16)
 2008e74:	400b883a 	mov	r5,r8
 2008e78:	9009883a 	mov	r4,r18
 2008e7c:	39fff404 	addi	r7,r7,-48
 2008e80:	01800284 	movi	r6,10
 2008e84:	2008b8c0 	call	2008b8c <__multadd>
 2008e88:	84000044 	addi	r16,r16,1
 2008e8c:	1011883a 	mov	r8,r2
 2008e90:	847ff71e 	bne	r16,r17,2008e70 <__s2b+0xc4>
 2008e94:	4005883a 	mov	r2,r8
 2008e98:	dfc00617 	ldw	ra,24(sp)
 2008e9c:	dd400517 	ldw	r21,20(sp)
 2008ea0:	dd000417 	ldw	r20,16(sp)
 2008ea4:	dcc00317 	ldw	r19,12(sp)
 2008ea8:	dc800217 	ldw	r18,8(sp)
 2008eac:	dc400117 	ldw	r17,4(sp)
 2008eb0:	dc000017 	ldw	r16,0(sp)
 2008eb4:	dec00704 	addi	sp,sp,28
 2008eb8:	f800283a 	ret
 2008ebc:	99400284 	addi	r5,r19,10
 2008ec0:	003fe706 	br	2008e60 <__s2b+0xb4>
 2008ec4:	000b883a 	mov	r5,zero
 2008ec8:	003fcd06 	br	2008e00 <__s2b+0x54>

02008ecc <_read_r>:
 2008ecc:	defffd04 	addi	sp,sp,-12
 2008ed0:	dc000015 	stw	r16,0(sp)
 2008ed4:	04008074 	movhi	r16,513
 2008ed8:	840c0604 	addi	r16,r16,12312
 2008edc:	dc400115 	stw	r17,4(sp)
 2008ee0:	80000015 	stw	zero,0(r16)
 2008ee4:	2023883a 	mov	r17,r4
 2008ee8:	2809883a 	mov	r4,r5
 2008eec:	300b883a 	mov	r5,r6
 2008ef0:	380d883a 	mov	r6,r7
 2008ef4:	dfc00215 	stw	ra,8(sp)
 2008ef8:	200bf180 	call	200bf18 <read>
 2008efc:	1007883a 	mov	r3,r2
 2008f00:	00bfffc4 	movi	r2,-1
 2008f04:	18800626 	beq	r3,r2,2008f20 <_read_r+0x54>
 2008f08:	1805883a 	mov	r2,r3
 2008f0c:	dfc00217 	ldw	ra,8(sp)
 2008f10:	dc400117 	ldw	r17,4(sp)
 2008f14:	dc000017 	ldw	r16,0(sp)
 2008f18:	dec00304 	addi	sp,sp,12
 2008f1c:	f800283a 	ret
 2008f20:	80800017 	ldw	r2,0(r16)
 2008f24:	103ff826 	beq	r2,zero,2008f08 <_read_r+0x3c>
 2008f28:	88800015 	stw	r2,0(r17)
 2008f2c:	1805883a 	mov	r2,r3
 2008f30:	dfc00217 	ldw	ra,8(sp)
 2008f34:	dc400117 	ldw	r17,4(sp)
 2008f38:	dc000017 	ldw	r16,0(sp)
 2008f3c:	dec00304 	addi	sp,sp,12
 2008f40:	f800283a 	ret

02008f44 <_realloc_r>:
 2008f44:	defff404 	addi	sp,sp,-48
 2008f48:	dd800815 	stw	r22,32(sp)
 2008f4c:	dc800415 	stw	r18,16(sp)
 2008f50:	dc400315 	stw	r17,12(sp)
 2008f54:	dfc00b15 	stw	ra,44(sp)
 2008f58:	df000a15 	stw	fp,40(sp)
 2008f5c:	ddc00915 	stw	r23,36(sp)
 2008f60:	dd400715 	stw	r21,28(sp)
 2008f64:	dd000615 	stw	r20,24(sp)
 2008f68:	dcc00515 	stw	r19,20(sp)
 2008f6c:	dc000215 	stw	r16,8(sp)
 2008f70:	2825883a 	mov	r18,r5
 2008f74:	3023883a 	mov	r17,r6
 2008f78:	202d883a 	mov	r22,r4
 2008f7c:	2800c926 	beq	r5,zero,20092a4 <_realloc_r+0x360>
 2008f80:	200bc140 	call	200bc14 <__malloc_lock>
 2008f84:	943ffe04 	addi	r16,r18,-8
 2008f88:	88c002c4 	addi	r3,r17,11
 2008f8c:	00800584 	movi	r2,22
 2008f90:	82000117 	ldw	r8,4(r16)
 2008f94:	10c01b2e 	bgeu	r2,r3,2009004 <_realloc_r+0xc0>
 2008f98:	00bffe04 	movi	r2,-8
 2008f9c:	188e703a 	and	r7,r3,r2
 2008fa0:	3839883a 	mov	fp,r7
 2008fa4:	38001a16 	blt	r7,zero,2009010 <_realloc_r+0xcc>
 2008fa8:	e4401936 	bltu	fp,r17,2009010 <_realloc_r+0xcc>
 2008fac:	013fff04 	movi	r4,-4
 2008fb0:	4126703a 	and	r19,r8,r4
 2008fb4:	99c02616 	blt	r19,r7,2009050 <_realloc_r+0x10c>
 2008fb8:	802b883a 	mov	r21,r16
 2008fbc:	9829883a 	mov	r20,r19
 2008fc0:	84000204 	addi	r16,r16,8
 2008fc4:	a80f883a 	mov	r7,r21
 2008fc8:	a70dc83a 	sub	r6,r20,fp
 2008fcc:	008003c4 	movi	r2,15
 2008fd0:	1180c136 	bltu	r2,r6,20092d8 <_realloc_r+0x394>
 2008fd4:	38800117 	ldw	r2,4(r7)
 2008fd8:	a549883a 	add	r4,r20,r21
 2008fdc:	1080004c 	andi	r2,r2,1
 2008fe0:	a084b03a 	or	r2,r20,r2
 2008fe4:	38800115 	stw	r2,4(r7)
 2008fe8:	20c00117 	ldw	r3,4(r4)
 2008fec:	18c00054 	ori	r3,r3,1
 2008ff0:	20c00115 	stw	r3,4(r4)
 2008ff4:	b009883a 	mov	r4,r22
 2008ff8:	200bc340 	call	200bc34 <__malloc_unlock>
 2008ffc:	8023883a 	mov	r17,r16
 2009000:	00000606 	br	200901c <_realloc_r+0xd8>
 2009004:	01c00404 	movi	r7,16
 2009008:	3839883a 	mov	fp,r7
 200900c:	e47fe72e 	bgeu	fp,r17,2008fac <_realloc_r+0x68>
 2009010:	00800304 	movi	r2,12
 2009014:	0023883a 	mov	r17,zero
 2009018:	b0800015 	stw	r2,0(r22)
 200901c:	8805883a 	mov	r2,r17
 2009020:	dfc00b17 	ldw	ra,44(sp)
 2009024:	df000a17 	ldw	fp,40(sp)
 2009028:	ddc00917 	ldw	r23,36(sp)
 200902c:	dd800817 	ldw	r22,32(sp)
 2009030:	dd400717 	ldw	r21,28(sp)
 2009034:	dd000617 	ldw	r20,24(sp)
 2009038:	dcc00517 	ldw	r19,20(sp)
 200903c:	dc800417 	ldw	r18,16(sp)
 2009040:	dc400317 	ldw	r17,12(sp)
 2009044:	dc000217 	ldw	r16,8(sp)
 2009048:	dec00c04 	addi	sp,sp,48
 200904c:	f800283a 	ret
 2009050:	00808074 	movhi	r2,513
 2009054:	10bf4004 	addi	r2,r2,-768
 2009058:	12400217 	ldw	r9,8(r2)
 200905c:	84cd883a 	add	r6,r16,r19
 2009060:	802b883a 	mov	r21,r16
 2009064:	3240b926 	beq	r6,r9,200934c <_realloc_r+0x408>
 2009068:	31400117 	ldw	r5,4(r6)
 200906c:	00bfff84 	movi	r2,-2
 2009070:	2884703a 	and	r2,r5,r2
 2009074:	1185883a 	add	r2,r2,r6
 2009078:	10c00117 	ldw	r3,4(r2)
 200907c:	18c0004c 	andi	r3,r3,1
 2009080:	1807003a 	cmpeq	r3,r3,zero
 2009084:	1800a326 	beq	r3,zero,2009314 <_realloc_r+0x3d0>
 2009088:	2908703a 	and	r4,r5,r4
 200908c:	9929883a 	add	r20,r19,r4
 2009090:	a1c0a30e 	bge	r20,r7,2009320 <_realloc_r+0x3dc>
 2009094:	4080004c 	andi	r2,r8,1
 2009098:	1000551e 	bne	r2,zero,20091f0 <_realloc_r+0x2ac>
 200909c:	80800017 	ldw	r2,0(r16)
 20090a0:	80afc83a 	sub	r23,r16,r2
 20090a4:	b8c00117 	ldw	r3,4(r23)
 20090a8:	00bfff04 	movi	r2,-4
 20090ac:	1884703a 	and	r2,r3,r2
 20090b0:	30002e26 	beq	r6,zero,200916c <_realloc_r+0x228>
 20090b4:	3240b926 	beq	r6,r9,200939c <_realloc_r+0x458>
 20090b8:	98a9883a 	add	r20,r19,r2
 20090bc:	2509883a 	add	r4,r4,r20
 20090c0:	d9000015 	stw	r4,0(sp)
 20090c4:	21c02a16 	blt	r4,r7,2009170 <_realloc_r+0x22c>
 20090c8:	30800317 	ldw	r2,12(r6)
 20090cc:	30c00217 	ldw	r3,8(r6)
 20090d0:	01400904 	movi	r5,36
 20090d4:	99bfff04 	addi	r6,r19,-4
 20090d8:	18800315 	stw	r2,12(r3)
 20090dc:	10c00215 	stw	r3,8(r2)
 20090e0:	b9000317 	ldw	r4,12(r23)
 20090e4:	b8800217 	ldw	r2,8(r23)
 20090e8:	b82b883a 	mov	r21,r23
 20090ec:	bc000204 	addi	r16,r23,8
 20090f0:	20800215 	stw	r2,8(r4)
 20090f4:	11000315 	stw	r4,12(r2)
 20090f8:	2980e436 	bltu	r5,r6,200948c <_realloc_r+0x548>
 20090fc:	008004c4 	movi	r2,19
 2009100:	9009883a 	mov	r4,r18
 2009104:	8011883a 	mov	r8,r16
 2009108:	11800f2e 	bgeu	r2,r6,2009148 <_realloc_r+0x204>
 200910c:	90800017 	ldw	r2,0(r18)
 2009110:	ba000404 	addi	r8,r23,16
 2009114:	91000204 	addi	r4,r18,8
 2009118:	b8800215 	stw	r2,8(r23)
 200911c:	90c00117 	ldw	r3,4(r18)
 2009120:	008006c4 	movi	r2,27
 2009124:	b8c00315 	stw	r3,12(r23)
 2009128:	1180072e 	bgeu	r2,r6,2009148 <_realloc_r+0x204>
 200912c:	90c00217 	ldw	r3,8(r18)
 2009130:	ba000604 	addi	r8,r23,24
 2009134:	91000404 	addi	r4,r18,16
 2009138:	b8c00415 	stw	r3,16(r23)
 200913c:	90800317 	ldw	r2,12(r18)
 2009140:	b8800515 	stw	r2,20(r23)
 2009144:	3140e726 	beq	r6,r5,20094e4 <_realloc_r+0x5a0>
 2009148:	20800017 	ldw	r2,0(r4)
 200914c:	dd000017 	ldw	r20,0(sp)
 2009150:	b80f883a 	mov	r7,r23
 2009154:	40800015 	stw	r2,0(r8)
 2009158:	20c00117 	ldw	r3,4(r4)
 200915c:	40c00115 	stw	r3,4(r8)
 2009160:	20800217 	ldw	r2,8(r4)
 2009164:	40800215 	stw	r2,8(r8)
 2009168:	003f9706 	br	2008fc8 <_realloc_r+0x84>
 200916c:	98a9883a 	add	r20,r19,r2
 2009170:	a1c01f16 	blt	r20,r7,20091f0 <_realloc_r+0x2ac>
 2009174:	b8c00317 	ldw	r3,12(r23)
 2009178:	b8800217 	ldw	r2,8(r23)
 200917c:	99bfff04 	addi	r6,r19,-4
 2009180:	01400904 	movi	r5,36
 2009184:	b82b883a 	mov	r21,r23
 2009188:	18800215 	stw	r2,8(r3)
 200918c:	10c00315 	stw	r3,12(r2)
 2009190:	bc000204 	addi	r16,r23,8
 2009194:	2980c336 	bltu	r5,r6,20094a4 <_realloc_r+0x560>
 2009198:	008004c4 	movi	r2,19
 200919c:	9009883a 	mov	r4,r18
 20091a0:	8011883a 	mov	r8,r16
 20091a4:	11800f2e 	bgeu	r2,r6,20091e4 <_realloc_r+0x2a0>
 20091a8:	90800017 	ldw	r2,0(r18)
 20091ac:	ba000404 	addi	r8,r23,16
 20091b0:	91000204 	addi	r4,r18,8
 20091b4:	b8800215 	stw	r2,8(r23)
 20091b8:	90c00117 	ldw	r3,4(r18)
 20091bc:	008006c4 	movi	r2,27
 20091c0:	b8c00315 	stw	r3,12(r23)
 20091c4:	1180072e 	bgeu	r2,r6,20091e4 <_realloc_r+0x2a0>
 20091c8:	90c00217 	ldw	r3,8(r18)
 20091cc:	ba000604 	addi	r8,r23,24
 20091d0:	91000404 	addi	r4,r18,16
 20091d4:	b8c00415 	stw	r3,16(r23)
 20091d8:	90800317 	ldw	r2,12(r18)
 20091dc:	b8800515 	stw	r2,20(r23)
 20091e0:	3140c726 	beq	r6,r5,2009500 <_realloc_r+0x5bc>
 20091e4:	20800017 	ldw	r2,0(r4)
 20091e8:	b80f883a 	mov	r7,r23
 20091ec:	003fd906 	br	2009154 <_realloc_r+0x210>
 20091f0:	880b883a 	mov	r5,r17
 20091f4:	b009883a 	mov	r4,r22
 20091f8:	20022d40 	call	20022d4 <_malloc_r>
 20091fc:	1023883a 	mov	r17,r2
 2009200:	10002526 	beq	r2,zero,2009298 <_realloc_r+0x354>
 2009204:	80800117 	ldw	r2,4(r16)
 2009208:	00ffff84 	movi	r3,-2
 200920c:	893ffe04 	addi	r4,r17,-8
 2009210:	10c4703a 	and	r2,r2,r3
 2009214:	8085883a 	add	r2,r16,r2
 2009218:	20809526 	beq	r4,r2,2009470 <_realloc_r+0x52c>
 200921c:	99bfff04 	addi	r6,r19,-4
 2009220:	01c00904 	movi	r7,36
 2009224:	39804536 	bltu	r7,r6,200933c <_realloc_r+0x3f8>
 2009228:	008004c4 	movi	r2,19
 200922c:	9009883a 	mov	r4,r18
 2009230:	880b883a 	mov	r5,r17
 2009234:	11800f2e 	bgeu	r2,r6,2009274 <_realloc_r+0x330>
 2009238:	90800017 	ldw	r2,0(r18)
 200923c:	89400204 	addi	r5,r17,8
 2009240:	91000204 	addi	r4,r18,8
 2009244:	88800015 	stw	r2,0(r17)
 2009248:	90c00117 	ldw	r3,4(r18)
 200924c:	008006c4 	movi	r2,27
 2009250:	88c00115 	stw	r3,4(r17)
 2009254:	1180072e 	bgeu	r2,r6,2009274 <_realloc_r+0x330>
 2009258:	90c00217 	ldw	r3,8(r18)
 200925c:	89400404 	addi	r5,r17,16
 2009260:	91000404 	addi	r4,r18,16
 2009264:	88c00215 	stw	r3,8(r17)
 2009268:	90800317 	ldw	r2,12(r18)
 200926c:	88800315 	stw	r2,12(r17)
 2009270:	31c09126 	beq	r6,r7,20094b8 <_realloc_r+0x574>
 2009274:	20800017 	ldw	r2,0(r4)
 2009278:	28800015 	stw	r2,0(r5)
 200927c:	20c00117 	ldw	r3,4(r4)
 2009280:	28c00115 	stw	r3,4(r5)
 2009284:	20800217 	ldw	r2,8(r4)
 2009288:	28800215 	stw	r2,8(r5)
 200928c:	900b883a 	mov	r5,r18
 2009290:	b009883a 	mov	r4,r22
 2009294:	200708c0 	call	200708c <_free_r>
 2009298:	b009883a 	mov	r4,r22
 200929c:	200bc340 	call	200bc34 <__malloc_unlock>
 20092a0:	003f5e06 	br	200901c <_realloc_r+0xd8>
 20092a4:	300b883a 	mov	r5,r6
 20092a8:	dfc00b17 	ldw	ra,44(sp)
 20092ac:	df000a17 	ldw	fp,40(sp)
 20092b0:	ddc00917 	ldw	r23,36(sp)
 20092b4:	dd800817 	ldw	r22,32(sp)
 20092b8:	dd400717 	ldw	r21,28(sp)
 20092bc:	dd000617 	ldw	r20,24(sp)
 20092c0:	dcc00517 	ldw	r19,20(sp)
 20092c4:	dc800417 	ldw	r18,16(sp)
 20092c8:	dc400317 	ldw	r17,12(sp)
 20092cc:	dc000217 	ldw	r16,8(sp)
 20092d0:	dec00c04 	addi	sp,sp,48
 20092d4:	20022d41 	jmpi	20022d4 <_malloc_r>
 20092d8:	38800117 	ldw	r2,4(r7)
 20092dc:	e54b883a 	add	r5,fp,r21
 20092e0:	31000054 	ori	r4,r6,1
 20092e4:	1080004c 	andi	r2,r2,1
 20092e8:	1704b03a 	or	r2,r2,fp
 20092ec:	38800115 	stw	r2,4(r7)
 20092f0:	29000115 	stw	r4,4(r5)
 20092f4:	2987883a 	add	r3,r5,r6
 20092f8:	18800117 	ldw	r2,4(r3)
 20092fc:	29400204 	addi	r5,r5,8
 2009300:	b009883a 	mov	r4,r22
 2009304:	10800054 	ori	r2,r2,1
 2009308:	18800115 	stw	r2,4(r3)
 200930c:	200708c0 	call	200708c <_free_r>
 2009310:	003f3806 	br	2008ff4 <_realloc_r+0xb0>
 2009314:	000d883a 	mov	r6,zero
 2009318:	0009883a 	mov	r4,zero
 200931c:	003f5d06 	br	2009094 <_realloc_r+0x150>
 2009320:	30c00217 	ldw	r3,8(r6)
 2009324:	30800317 	ldw	r2,12(r6)
 2009328:	800f883a 	mov	r7,r16
 200932c:	84000204 	addi	r16,r16,8
 2009330:	10c00215 	stw	r3,8(r2)
 2009334:	18800315 	stw	r2,12(r3)
 2009338:	003f2306 	br	2008fc8 <_realloc_r+0x84>
 200933c:	8809883a 	mov	r4,r17
 2009340:	900b883a 	mov	r5,r18
 2009344:	2007d600 	call	2007d60 <memmove>
 2009348:	003fd006 	br	200928c <_realloc_r+0x348>
 200934c:	30800117 	ldw	r2,4(r6)
 2009350:	e0c00404 	addi	r3,fp,16
 2009354:	1108703a 	and	r4,r2,r4
 2009358:	9905883a 	add	r2,r19,r4
 200935c:	10ff4d16 	blt	r2,r3,2009094 <_realloc_r+0x150>
 2009360:	1705c83a 	sub	r2,r2,fp
 2009364:	870b883a 	add	r5,r16,fp
 2009368:	10800054 	ori	r2,r2,1
 200936c:	28800115 	stw	r2,4(r5)
 2009370:	80c00117 	ldw	r3,4(r16)
 2009374:	00808074 	movhi	r2,513
 2009378:	10bf4004 	addi	r2,r2,-768
 200937c:	b009883a 	mov	r4,r22
 2009380:	18c0004c 	andi	r3,r3,1
 2009384:	e0c6b03a 	or	r3,fp,r3
 2009388:	11400215 	stw	r5,8(r2)
 200938c:	80c00115 	stw	r3,4(r16)
 2009390:	200bc340 	call	200bc34 <__malloc_unlock>
 2009394:	84400204 	addi	r17,r16,8
 2009398:	003f2006 	br	200901c <_realloc_r+0xd8>
 200939c:	98a9883a 	add	r20,r19,r2
 20093a0:	2509883a 	add	r4,r4,r20
 20093a4:	e0800404 	addi	r2,fp,16
 20093a8:	d9000115 	stw	r4,4(sp)
 20093ac:	20bf7016 	blt	r4,r2,2009170 <_realloc_r+0x22c>
 20093b0:	b8c00317 	ldw	r3,12(r23)
 20093b4:	b8800217 	ldw	r2,8(r23)
 20093b8:	99bfff04 	addi	r6,r19,-4
 20093bc:	01400904 	movi	r5,36
 20093c0:	18800215 	stw	r2,8(r3)
 20093c4:	10c00315 	stw	r3,12(r2)
 20093c8:	bc400204 	addi	r17,r23,8
 20093cc:	29804136 	bltu	r5,r6,20094d4 <_realloc_r+0x590>
 20093d0:	008004c4 	movi	r2,19
 20093d4:	9009883a 	mov	r4,r18
 20093d8:	880f883a 	mov	r7,r17
 20093dc:	11800f2e 	bgeu	r2,r6,200941c <_realloc_r+0x4d8>
 20093e0:	90800017 	ldw	r2,0(r18)
 20093e4:	b9c00404 	addi	r7,r23,16
 20093e8:	91000204 	addi	r4,r18,8
 20093ec:	b8800215 	stw	r2,8(r23)
 20093f0:	90c00117 	ldw	r3,4(r18)
 20093f4:	008006c4 	movi	r2,27
 20093f8:	b8c00315 	stw	r3,12(r23)
 20093fc:	1180072e 	bgeu	r2,r6,200941c <_realloc_r+0x4d8>
 2009400:	90c00217 	ldw	r3,8(r18)
 2009404:	b9c00604 	addi	r7,r23,24
 2009408:	91000404 	addi	r4,r18,16
 200940c:	b8c00415 	stw	r3,16(r23)
 2009410:	90800317 	ldw	r2,12(r18)
 2009414:	b8800515 	stw	r2,20(r23)
 2009418:	31404026 	beq	r6,r5,200951c <_realloc_r+0x5d8>
 200941c:	20800017 	ldw	r2,0(r4)
 2009420:	38800015 	stw	r2,0(r7)
 2009424:	20c00117 	ldw	r3,4(r4)
 2009428:	38c00115 	stw	r3,4(r7)
 200942c:	20800217 	ldw	r2,8(r4)
 2009430:	38800215 	stw	r2,8(r7)
 2009434:	d8c00117 	ldw	r3,4(sp)
 2009438:	bf0b883a 	add	r5,r23,fp
 200943c:	b009883a 	mov	r4,r22
 2009440:	1f05c83a 	sub	r2,r3,fp
 2009444:	10800054 	ori	r2,r2,1
 2009448:	28800115 	stw	r2,4(r5)
 200944c:	b8c00117 	ldw	r3,4(r23)
 2009450:	00808074 	movhi	r2,513
 2009454:	10bf4004 	addi	r2,r2,-768
 2009458:	11400215 	stw	r5,8(r2)
 200945c:	18c0004c 	andi	r3,r3,1
 2009460:	e0c6b03a 	or	r3,fp,r3
 2009464:	b8c00115 	stw	r3,4(r23)
 2009468:	200bc340 	call	200bc34 <__malloc_unlock>
 200946c:	003eeb06 	br	200901c <_realloc_r+0xd8>
 2009470:	20800117 	ldw	r2,4(r4)
 2009474:	00ffff04 	movi	r3,-4
 2009478:	800f883a 	mov	r7,r16
 200947c:	10c4703a 	and	r2,r2,r3
 2009480:	98a9883a 	add	r20,r19,r2
 2009484:	84000204 	addi	r16,r16,8
 2009488:	003ecf06 	br	2008fc8 <_realloc_r+0x84>
 200948c:	900b883a 	mov	r5,r18
 2009490:	8009883a 	mov	r4,r16
 2009494:	2007d600 	call	2007d60 <memmove>
 2009498:	dd000017 	ldw	r20,0(sp)
 200949c:	b80f883a 	mov	r7,r23
 20094a0:	003ec906 	br	2008fc8 <_realloc_r+0x84>
 20094a4:	900b883a 	mov	r5,r18
 20094a8:	8009883a 	mov	r4,r16
 20094ac:	2007d600 	call	2007d60 <memmove>
 20094b0:	b80f883a 	mov	r7,r23
 20094b4:	003ec406 	br	2008fc8 <_realloc_r+0x84>
 20094b8:	90c00417 	ldw	r3,16(r18)
 20094bc:	89400604 	addi	r5,r17,24
 20094c0:	91000604 	addi	r4,r18,24
 20094c4:	88c00415 	stw	r3,16(r17)
 20094c8:	90800517 	ldw	r2,20(r18)
 20094cc:	88800515 	stw	r2,20(r17)
 20094d0:	003f6806 	br	2009274 <_realloc_r+0x330>
 20094d4:	900b883a 	mov	r5,r18
 20094d8:	8809883a 	mov	r4,r17
 20094dc:	2007d600 	call	2007d60 <memmove>
 20094e0:	003fd406 	br	2009434 <_realloc_r+0x4f0>
 20094e4:	90c00417 	ldw	r3,16(r18)
 20094e8:	91000604 	addi	r4,r18,24
 20094ec:	ba000804 	addi	r8,r23,32
 20094f0:	b8c00615 	stw	r3,24(r23)
 20094f4:	90800517 	ldw	r2,20(r18)
 20094f8:	b8800715 	stw	r2,28(r23)
 20094fc:	003f1206 	br	2009148 <_realloc_r+0x204>
 2009500:	90c00417 	ldw	r3,16(r18)
 2009504:	91000604 	addi	r4,r18,24
 2009508:	ba000804 	addi	r8,r23,32
 200950c:	b8c00615 	stw	r3,24(r23)
 2009510:	90800517 	ldw	r2,20(r18)
 2009514:	b8800715 	stw	r2,28(r23)
 2009518:	003f3206 	br	20091e4 <_realloc_r+0x2a0>
 200951c:	90c00417 	ldw	r3,16(r18)
 2009520:	91000604 	addi	r4,r18,24
 2009524:	b9c00804 	addi	r7,r23,32
 2009528:	b8c00615 	stw	r3,24(r23)
 200952c:	90800517 	ldw	r2,20(r18)
 2009530:	b8800715 	stw	r2,28(r23)
 2009534:	003fb906 	br	200941c <_realloc_r+0x4d8>

02009538 <__isinfd>:
 2009538:	200d883a 	mov	r6,r4
 200953c:	0109c83a 	sub	r4,zero,r4
 2009540:	2188b03a 	or	r4,r4,r6
 2009544:	2008d7fa 	srli	r4,r4,31
 2009548:	00a00034 	movhi	r2,32768
 200954c:	10bfffc4 	addi	r2,r2,-1
 2009550:	1144703a 	and	r2,r2,r5
 2009554:	2088b03a 	or	r4,r4,r2
 2009558:	009ffc34 	movhi	r2,32752
 200955c:	1105c83a 	sub	r2,r2,r4
 2009560:	0087c83a 	sub	r3,zero,r2
 2009564:	10c4b03a 	or	r2,r2,r3
 2009568:	1004d7fa 	srli	r2,r2,31
 200956c:	00c00044 	movi	r3,1
 2009570:	1885c83a 	sub	r2,r3,r2
 2009574:	f800283a 	ret

02009578 <__isnand>:
 2009578:	200d883a 	mov	r6,r4
 200957c:	0109c83a 	sub	r4,zero,r4
 2009580:	2188b03a 	or	r4,r4,r6
 2009584:	2008d7fa 	srli	r4,r4,31
 2009588:	00a00034 	movhi	r2,32768
 200958c:	10bfffc4 	addi	r2,r2,-1
 2009590:	1144703a 	and	r2,r2,r5
 2009594:	2088b03a 	or	r4,r4,r2
 2009598:	009ffc34 	movhi	r2,32752
 200959c:	1105c83a 	sub	r2,r2,r4
 20095a0:	1004d7fa 	srli	r2,r2,31
 20095a4:	f800283a 	ret

020095a8 <strcmp>:
 20095a8:	2144b03a 	or	r2,r4,r5
 20095ac:	108000cc 	andi	r2,r2,3
 20095b0:	10001d1e 	bne	r2,zero,2009628 <strcmp+0x80>
 20095b4:	200f883a 	mov	r7,r4
 20095b8:	28800017 	ldw	r2,0(r5)
 20095bc:	21000017 	ldw	r4,0(r4)
 20095c0:	280d883a 	mov	r6,r5
 20095c4:	2080161e 	bne	r4,r2,2009620 <strcmp+0x78>
 20095c8:	023fbff4 	movhi	r8,65279
 20095cc:	423fbfc4 	addi	r8,r8,-257
 20095d0:	2207883a 	add	r3,r4,r8
 20095d4:	01602074 	movhi	r5,32897
 20095d8:	29602004 	addi	r5,r5,-32640
 20095dc:	1946703a 	and	r3,r3,r5
 20095e0:	0104303a 	nor	r2,zero,r4
 20095e4:	10c4703a 	and	r2,r2,r3
 20095e8:	10001c1e 	bne	r2,zero,200965c <strcmp+0xb4>
 20095ec:	4013883a 	mov	r9,r8
 20095f0:	2811883a 	mov	r8,r5
 20095f4:	00000106 	br	20095fc <strcmp+0x54>
 20095f8:	1800181e 	bne	r3,zero,200965c <strcmp+0xb4>
 20095fc:	39c00104 	addi	r7,r7,4
 2009600:	39000017 	ldw	r4,0(r7)
 2009604:	31800104 	addi	r6,r6,4
 2009608:	31400017 	ldw	r5,0(r6)
 200960c:	2245883a 	add	r2,r4,r9
 2009610:	1204703a 	and	r2,r2,r8
 2009614:	0106303a 	nor	r3,zero,r4
 2009618:	1886703a 	and	r3,r3,r2
 200961c:	217ff626 	beq	r4,r5,20095f8 <strcmp+0x50>
 2009620:	3809883a 	mov	r4,r7
 2009624:	300b883a 	mov	r5,r6
 2009628:	20c00007 	ldb	r3,0(r4)
 200962c:	1800051e 	bne	r3,zero,2009644 <strcmp+0x9c>
 2009630:	00000606 	br	200964c <strcmp+0xa4>
 2009634:	21000044 	addi	r4,r4,1
 2009638:	20c00007 	ldb	r3,0(r4)
 200963c:	29400044 	addi	r5,r5,1
 2009640:	18000226 	beq	r3,zero,200964c <strcmp+0xa4>
 2009644:	28800007 	ldb	r2,0(r5)
 2009648:	18bffa26 	beq	r3,r2,2009634 <strcmp+0x8c>
 200964c:	20c00003 	ldbu	r3,0(r4)
 2009650:	28800003 	ldbu	r2,0(r5)
 2009654:	1885c83a 	sub	r2,r3,r2
 2009658:	f800283a 	ret
 200965c:	0005883a 	mov	r2,zero
 2009660:	f800283a 	ret

02009664 <_calloc_r>:
 2009664:	298b383a 	mul	r5,r5,r6
 2009668:	defffe04 	addi	sp,sp,-8
 200966c:	dc000015 	stw	r16,0(sp)
 2009670:	dfc00115 	stw	ra,4(sp)
 2009674:	20022d40 	call	20022d4 <_malloc_r>
 2009678:	1021883a 	mov	r16,r2
 200967c:	01c00904 	movi	r7,36
 2009680:	10000d26 	beq	r2,zero,20096b8 <_calloc_r+0x54>
 2009684:	10ffff17 	ldw	r3,-4(r2)
 2009688:	1009883a 	mov	r4,r2
 200968c:	00bfff04 	movi	r2,-4
 2009690:	1886703a 	and	r3,r3,r2
 2009694:	1887883a 	add	r3,r3,r2
 2009698:	180d883a 	mov	r6,r3
 200969c:	000b883a 	mov	r5,zero
 20096a0:	38c01736 	bltu	r7,r3,2009700 <_calloc_r+0x9c>
 20096a4:	008004c4 	movi	r2,19
 20096a8:	10c00836 	bltu	r2,r3,20096cc <_calloc_r+0x68>
 20096ac:	20000215 	stw	zero,8(r4)
 20096b0:	20000015 	stw	zero,0(r4)
 20096b4:	20000115 	stw	zero,4(r4)
 20096b8:	8005883a 	mov	r2,r16
 20096bc:	dfc00117 	ldw	ra,4(sp)
 20096c0:	dc000017 	ldw	r16,0(sp)
 20096c4:	dec00204 	addi	sp,sp,8
 20096c8:	f800283a 	ret
 20096cc:	008006c4 	movi	r2,27
 20096d0:	80000015 	stw	zero,0(r16)
 20096d4:	80000115 	stw	zero,4(r16)
 20096d8:	81000204 	addi	r4,r16,8
 20096dc:	10fff32e 	bgeu	r2,r3,20096ac <_calloc_r+0x48>
 20096e0:	80000215 	stw	zero,8(r16)
 20096e4:	80000315 	stw	zero,12(r16)
 20096e8:	81000404 	addi	r4,r16,16
 20096ec:	19ffef1e 	bne	r3,r7,20096ac <_calloc_r+0x48>
 20096f0:	81000604 	addi	r4,r16,24
 20096f4:	80000415 	stw	zero,16(r16)
 20096f8:	80000515 	stw	zero,20(r16)
 20096fc:	003feb06 	br	20096ac <_calloc_r+0x48>
 2009700:	2007e400 	call	2007e40 <memset>
 2009704:	8005883a 	mov	r2,r16
 2009708:	dfc00117 	ldw	ra,4(sp)
 200970c:	dc000017 	ldw	r16,0(sp)
 2009710:	dec00204 	addi	sp,sp,8
 2009714:	f800283a 	ret

02009718 <_fclose_r>:
 2009718:	defffc04 	addi	sp,sp,-16
 200971c:	dc400115 	stw	r17,4(sp)
 2009720:	dc000015 	stw	r16,0(sp)
 2009724:	dfc00315 	stw	ra,12(sp)
 2009728:	dc800215 	stw	r18,8(sp)
 200972c:	2821883a 	mov	r16,r5
 2009730:	2023883a 	mov	r17,r4
 2009734:	28002926 	beq	r5,zero,20097dc <_fclose_r+0xc4>
 2009738:	2006c580 	call	2006c58 <__sfp_lock_acquire>
 200973c:	88000226 	beq	r17,zero,2009748 <_fclose_r+0x30>
 2009740:	88800e17 	ldw	r2,56(r17)
 2009744:	10002d26 	beq	r2,zero,20097fc <_fclose_r+0xe4>
 2009748:	8080030f 	ldh	r2,12(r16)
 200974c:	10002226 	beq	r2,zero,20097d8 <_fclose_r+0xc0>
 2009750:	8809883a 	mov	r4,r17
 2009754:	800b883a 	mov	r5,r16
 2009758:	20069d00 	call	20069d0 <_fflush_r>
 200975c:	1025883a 	mov	r18,r2
 2009760:	80800b17 	ldw	r2,44(r16)
 2009764:	10000426 	beq	r2,zero,2009778 <_fclose_r+0x60>
 2009768:	81400717 	ldw	r5,28(r16)
 200976c:	8809883a 	mov	r4,r17
 2009770:	103ee83a 	callr	r2
 2009774:	10002a16 	blt	r2,zero,2009820 <_fclose_r+0x108>
 2009778:	8080030b 	ldhu	r2,12(r16)
 200977c:	1080200c 	andi	r2,r2,128
 2009780:	1000231e 	bne	r2,zero,2009810 <_fclose_r+0xf8>
 2009784:	81400c17 	ldw	r5,48(r16)
 2009788:	28000526 	beq	r5,zero,20097a0 <_fclose_r+0x88>
 200978c:	80801004 	addi	r2,r16,64
 2009790:	28800226 	beq	r5,r2,200979c <_fclose_r+0x84>
 2009794:	8809883a 	mov	r4,r17
 2009798:	200708c0 	call	200708c <_free_r>
 200979c:	80000c15 	stw	zero,48(r16)
 20097a0:	81401117 	ldw	r5,68(r16)
 20097a4:	28000326 	beq	r5,zero,20097b4 <_fclose_r+0x9c>
 20097a8:	8809883a 	mov	r4,r17
 20097ac:	200708c0 	call	200708c <_free_r>
 20097b0:	80001115 	stw	zero,68(r16)
 20097b4:	8000030d 	sth	zero,12(r16)
 20097b8:	2006c5c0 	call	2006c5c <__sfp_lock_release>
 20097bc:	9005883a 	mov	r2,r18
 20097c0:	dfc00317 	ldw	ra,12(sp)
 20097c4:	dc800217 	ldw	r18,8(sp)
 20097c8:	dc400117 	ldw	r17,4(sp)
 20097cc:	dc000017 	ldw	r16,0(sp)
 20097d0:	dec00404 	addi	sp,sp,16
 20097d4:	f800283a 	ret
 20097d8:	2006c5c0 	call	2006c5c <__sfp_lock_release>
 20097dc:	0025883a 	mov	r18,zero
 20097e0:	9005883a 	mov	r2,r18
 20097e4:	dfc00317 	ldw	ra,12(sp)
 20097e8:	dc800217 	ldw	r18,8(sp)
 20097ec:	dc400117 	ldw	r17,4(sp)
 20097f0:	dc000017 	ldw	r16,0(sp)
 20097f4:	dec00404 	addi	sp,sp,16
 20097f8:	f800283a 	ret
 20097fc:	8809883a 	mov	r4,r17
 2009800:	2006c680 	call	2006c68 <__sinit>
 2009804:	8080030f 	ldh	r2,12(r16)
 2009808:	103fd11e 	bne	r2,zero,2009750 <_fclose_r+0x38>
 200980c:	003ff206 	br	20097d8 <_fclose_r+0xc0>
 2009810:	81400417 	ldw	r5,16(r16)
 2009814:	8809883a 	mov	r4,r17
 2009818:	200708c0 	call	200708c <_free_r>
 200981c:	003fd906 	br	2009784 <_fclose_r+0x6c>
 2009820:	04bfffc4 	movi	r18,-1
 2009824:	003fd406 	br	2009778 <_fclose_r+0x60>

02009828 <fclose>:
 2009828:	00808074 	movhi	r2,513
 200982c:	10850f04 	addi	r2,r2,5180
 2009830:	200b883a 	mov	r5,r4
 2009834:	11000017 	ldw	r4,0(r2)
 2009838:	20097181 	jmpi	2009718 <_fclose_r>

0200983c <__udivdi3>:
 200983c:	defff004 	addi	sp,sp,-64
 2009840:	2005883a 	mov	r2,r4
 2009844:	3011883a 	mov	r8,r6
 2009848:	df000e15 	stw	fp,56(sp)
 200984c:	dd000a15 	stw	r20,40(sp)
 2009850:	dc000615 	stw	r16,24(sp)
 2009854:	dfc00f15 	stw	ra,60(sp)
 2009858:	ddc00d15 	stw	r23,52(sp)
 200985c:	dd800c15 	stw	r22,48(sp)
 2009860:	dd400b15 	stw	r21,44(sp)
 2009864:	dcc00915 	stw	r19,36(sp)
 2009868:	dc800815 	stw	r18,32(sp)
 200986c:	dc400715 	stw	r17,28(sp)
 2009870:	4021883a 	mov	r16,r8
 2009874:	1039883a 	mov	fp,r2
 2009878:	2829883a 	mov	r20,r5
 200987c:	38003b1e 	bne	r7,zero,200996c <__udivdi3+0x130>
 2009880:	2a005c36 	bltu	r5,r8,20099f4 <__udivdi3+0x1b8>
 2009884:	4000a626 	beq	r8,zero,2009b20 <__udivdi3+0x2e4>
 2009888:	00bfffd4 	movui	r2,65535
 200988c:	14009e36 	bltu	r2,r16,2009b08 <__udivdi3+0x2cc>
 2009890:	00803fc4 	movi	r2,255
 2009894:	14013d36 	bltu	r2,r16,2009d8c <__udivdi3+0x550>
 2009898:	000b883a 	mov	r5,zero
 200989c:	0005883a 	mov	r2,zero
 20098a0:	8084d83a 	srl	r2,r16,r2
 20098a4:	01008074 	movhi	r4,513
 20098a8:	213cc904 	addi	r4,r4,-3292
 20098ac:	01800804 	movi	r6,32
 20098b0:	1105883a 	add	r2,r2,r4
 20098b4:	10c00003 	ldbu	r3,0(r2)
 20098b8:	28c7883a 	add	r3,r5,r3
 20098bc:	30edc83a 	sub	r22,r6,r3
 20098c0:	b000ee1e 	bne	r22,zero,2009c7c <__udivdi3+0x440>
 20098c4:	802ad43a 	srli	r21,r16,16
 20098c8:	00800044 	movi	r2,1
 20098cc:	a423c83a 	sub	r17,r20,r16
 20098d0:	85ffffcc 	andi	r23,r16,65535
 20098d4:	d8800315 	stw	r2,12(sp)
 20098d8:	8809883a 	mov	r4,r17
 20098dc:	a80b883a 	mov	r5,r21
 20098e0:	20011d40 	call	20011d4 <__udivsi3>
 20098e4:	8809883a 	mov	r4,r17
 20098e8:	a80b883a 	mov	r5,r21
 20098ec:	102d883a 	mov	r22,r2
 20098f0:	20011dc0 	call	20011dc <__umodsi3>
 20098f4:	1004943a 	slli	r2,r2,16
 20098f8:	e006d43a 	srli	r3,fp,16
 20098fc:	bda3383a 	mul	r17,r23,r22
 2009900:	10c4b03a 	or	r2,r2,r3
 2009904:	1440042e 	bgeu	r2,r17,2009918 <__udivdi3+0xdc>
 2009908:	1405883a 	add	r2,r2,r16
 200990c:	b5bfffc4 	addi	r22,r22,-1
 2009910:	14000136 	bltu	r2,r16,2009918 <__udivdi3+0xdc>
 2009914:	14413d36 	bltu	r2,r17,2009e0c <__udivdi3+0x5d0>
 2009918:	1463c83a 	sub	r17,r2,r17
 200991c:	8809883a 	mov	r4,r17
 2009920:	a80b883a 	mov	r5,r21
 2009924:	20011d40 	call	20011d4 <__udivsi3>
 2009928:	8809883a 	mov	r4,r17
 200992c:	a80b883a 	mov	r5,r21
 2009930:	1029883a 	mov	r20,r2
 2009934:	20011dc0 	call	20011dc <__umodsi3>
 2009938:	1004943a 	slli	r2,r2,16
 200993c:	bd09383a 	mul	r4,r23,r20
 2009940:	e0ffffcc 	andi	r3,fp,65535
 2009944:	10c4b03a 	or	r2,r2,r3
 2009948:	1100042e 	bgeu	r2,r4,200995c <__udivdi3+0x120>
 200994c:	8085883a 	add	r2,r16,r2
 2009950:	a53fffc4 	addi	r20,r20,-1
 2009954:	14000136 	bltu	r2,r16,200995c <__udivdi3+0x120>
 2009958:	11012036 	bltu	r2,r4,2009ddc <__udivdi3+0x5a0>
 200995c:	b004943a 	slli	r2,r22,16
 2009960:	d9000317 	ldw	r4,12(sp)
 2009964:	a084b03a 	or	r2,r20,r2
 2009968:	00001506 	br	20099c0 <__udivdi3+0x184>
 200996c:	380d883a 	mov	r6,r7
 2009970:	29c06236 	bltu	r5,r7,2009afc <__udivdi3+0x2c0>
 2009974:	00bfffd4 	movui	r2,65535
 2009978:	11c05a36 	bltu	r2,r7,2009ae4 <__udivdi3+0x2a8>
 200997c:	00803fc4 	movi	r2,255
 2009980:	11c0fc36 	bltu	r2,r7,2009d74 <__udivdi3+0x538>
 2009984:	000b883a 	mov	r5,zero
 2009988:	0005883a 	mov	r2,zero
 200998c:	3084d83a 	srl	r2,r6,r2
 2009990:	01008074 	movhi	r4,513
 2009994:	213cc904 	addi	r4,r4,-3292
 2009998:	01c00804 	movi	r7,32
 200999c:	1105883a 	add	r2,r2,r4
 20099a0:	10c00003 	ldbu	r3,0(r2)
 20099a4:	28c7883a 	add	r3,r5,r3
 20099a8:	38efc83a 	sub	r23,r7,r3
 20099ac:	b800691e 	bne	r23,zero,2009b54 <__udivdi3+0x318>
 20099b0:	35000136 	bltu	r6,r20,20099b8 <__udivdi3+0x17c>
 20099b4:	e4005136 	bltu	fp,r16,2009afc <__udivdi3+0x2c0>
 20099b8:	00800044 	movi	r2,1
 20099bc:	0009883a 	mov	r4,zero
 20099c0:	2007883a 	mov	r3,r4
 20099c4:	dfc00f17 	ldw	ra,60(sp)
 20099c8:	df000e17 	ldw	fp,56(sp)
 20099cc:	ddc00d17 	ldw	r23,52(sp)
 20099d0:	dd800c17 	ldw	r22,48(sp)
 20099d4:	dd400b17 	ldw	r21,44(sp)
 20099d8:	dd000a17 	ldw	r20,40(sp)
 20099dc:	dcc00917 	ldw	r19,36(sp)
 20099e0:	dc800817 	ldw	r18,32(sp)
 20099e4:	dc400717 	ldw	r17,28(sp)
 20099e8:	dc000617 	ldw	r16,24(sp)
 20099ec:	dec01004 	addi	sp,sp,64
 20099f0:	f800283a 	ret
 20099f4:	00bfffd4 	movui	r2,65535
 20099f8:	12005036 	bltu	r2,r8,2009b3c <__udivdi3+0x300>
 20099fc:	00803fc4 	movi	r2,255
 2009a00:	1200e836 	bltu	r2,r8,2009da4 <__udivdi3+0x568>
 2009a04:	000b883a 	mov	r5,zero
 2009a08:	0005883a 	mov	r2,zero
 2009a0c:	8084d83a 	srl	r2,r16,r2
 2009a10:	01008074 	movhi	r4,513
 2009a14:	213cc904 	addi	r4,r4,-3292
 2009a18:	01800804 	movi	r6,32
 2009a1c:	1105883a 	add	r2,r2,r4
 2009a20:	10c00003 	ldbu	r3,0(r2)
 2009a24:	28c7883a 	add	r3,r5,r3
 2009a28:	30cbc83a 	sub	r5,r6,r3
 2009a2c:	28000626 	beq	r5,zero,2009a48 <__udivdi3+0x20c>
 2009a30:	3145c83a 	sub	r2,r6,r5
 2009a34:	e084d83a 	srl	r2,fp,r2
 2009a38:	a146983a 	sll	r3,r20,r5
 2009a3c:	e178983a 	sll	fp,fp,r5
 2009a40:	8160983a 	sll	r16,r16,r5
 2009a44:	18a8b03a 	or	r20,r3,r2
 2009a48:	802ad43a 	srli	r21,r16,16
 2009a4c:	a009883a 	mov	r4,r20
 2009a50:	85ffffcc 	andi	r23,r16,65535
 2009a54:	a80b883a 	mov	r5,r21
 2009a58:	20011d40 	call	20011d4 <__udivsi3>
 2009a5c:	a009883a 	mov	r4,r20
 2009a60:	a80b883a 	mov	r5,r21
 2009a64:	102d883a 	mov	r22,r2
 2009a68:	20011dc0 	call	20011dc <__umodsi3>
 2009a6c:	1004943a 	slli	r2,r2,16
 2009a70:	e006d43a 	srli	r3,fp,16
 2009a74:	bda3383a 	mul	r17,r23,r22
 2009a78:	10c4b03a 	or	r2,r2,r3
 2009a7c:	1440042e 	bgeu	r2,r17,2009a90 <__udivdi3+0x254>
 2009a80:	1405883a 	add	r2,r2,r16
 2009a84:	b5bfffc4 	addi	r22,r22,-1
 2009a88:	14000136 	bltu	r2,r16,2009a90 <__udivdi3+0x254>
 2009a8c:	1440d536 	bltu	r2,r17,2009de4 <__udivdi3+0x5a8>
 2009a90:	1463c83a 	sub	r17,r2,r17
 2009a94:	8809883a 	mov	r4,r17
 2009a98:	a80b883a 	mov	r5,r21
 2009a9c:	20011d40 	call	20011d4 <__udivsi3>
 2009aa0:	8809883a 	mov	r4,r17
 2009aa4:	a80b883a 	mov	r5,r21
 2009aa8:	1029883a 	mov	r20,r2
 2009aac:	20011dc0 	call	20011dc <__umodsi3>
 2009ab0:	1004943a 	slli	r2,r2,16
 2009ab4:	bd09383a 	mul	r4,r23,r20
 2009ab8:	e0ffffcc 	andi	r3,fp,65535
 2009abc:	10c4b03a 	or	r2,r2,r3
 2009ac0:	1100042e 	bgeu	r2,r4,2009ad4 <__udivdi3+0x298>
 2009ac4:	8085883a 	add	r2,r16,r2
 2009ac8:	a53fffc4 	addi	r20,r20,-1
 2009acc:	14000136 	bltu	r2,r16,2009ad4 <__udivdi3+0x298>
 2009ad0:	1100c736 	bltu	r2,r4,2009df0 <__udivdi3+0x5b4>
 2009ad4:	b004943a 	slli	r2,r22,16
 2009ad8:	0009883a 	mov	r4,zero
 2009adc:	a084b03a 	or	r2,r20,r2
 2009ae0:	003fb706 	br	20099c0 <__udivdi3+0x184>
 2009ae4:	00804034 	movhi	r2,256
 2009ae8:	10bfffc4 	addi	r2,r2,-1
 2009aec:	11c0a436 	bltu	r2,r7,2009d80 <__udivdi3+0x544>
 2009af0:	01400404 	movi	r5,16
 2009af4:	2805883a 	mov	r2,r5
 2009af8:	003fa406 	br	200998c <__udivdi3+0x150>
 2009afc:	0005883a 	mov	r2,zero
 2009b00:	0009883a 	mov	r4,zero
 2009b04:	003fae06 	br	20099c0 <__udivdi3+0x184>
 2009b08:	00804034 	movhi	r2,256
 2009b0c:	10bfffc4 	addi	r2,r2,-1
 2009b10:	1400a136 	bltu	r2,r16,2009d98 <__udivdi3+0x55c>
 2009b14:	01400404 	movi	r5,16
 2009b18:	2805883a 	mov	r2,r5
 2009b1c:	003f6006 	br	20098a0 <__udivdi3+0x64>
 2009b20:	01000044 	movi	r4,1
 2009b24:	000b883a 	mov	r5,zero
 2009b28:	20011d40 	call	20011d4 <__udivsi3>
 2009b2c:	1021883a 	mov	r16,r2
 2009b30:	00bfffd4 	movui	r2,65535
 2009b34:	143ff436 	bltu	r2,r16,2009b08 <__udivdi3+0x2cc>
 2009b38:	003f5506 	br	2009890 <__udivdi3+0x54>
 2009b3c:	00804034 	movhi	r2,256
 2009b40:	10bfffc4 	addi	r2,r2,-1
 2009b44:	12009a36 	bltu	r2,r8,2009db0 <__udivdi3+0x574>
 2009b48:	01400404 	movi	r5,16
 2009b4c:	2805883a 	mov	r2,r5
 2009b50:	003fae06 	br	2009a0c <__udivdi3+0x1d0>
 2009b54:	3dc5c83a 	sub	r2,r7,r23
 2009b58:	35c8983a 	sll	r4,r6,r23
 2009b5c:	8086d83a 	srl	r3,r16,r2
 2009b60:	a0a2d83a 	srl	r17,r20,r2
 2009b64:	e084d83a 	srl	r2,fp,r2
 2009b68:	20eab03a 	or	r21,r4,r3
 2009b6c:	a82cd43a 	srli	r22,r21,16
 2009b70:	a5c6983a 	sll	r3,r20,r23
 2009b74:	8809883a 	mov	r4,r17
 2009b78:	b00b883a 	mov	r5,r22
 2009b7c:	1886b03a 	or	r3,r3,r2
 2009b80:	d8c00215 	stw	r3,8(sp)
 2009b84:	20011d40 	call	20011d4 <__udivsi3>
 2009b88:	8809883a 	mov	r4,r17
 2009b8c:	b00b883a 	mov	r5,r22
 2009b90:	1029883a 	mov	r20,r2
 2009b94:	20011dc0 	call	20011dc <__umodsi3>
 2009b98:	a8ffffcc 	andi	r3,r21,65535
 2009b9c:	d8c00515 	stw	r3,20(sp)
 2009ba0:	d9000217 	ldw	r4,8(sp)
 2009ba4:	d9400517 	ldw	r5,20(sp)
 2009ba8:	1004943a 	slli	r2,r2,16
 2009bac:	2006d43a 	srli	r3,r4,16
 2009bb0:	85e0983a 	sll	r16,r16,r23
 2009bb4:	2d23383a 	mul	r17,r5,r20
 2009bb8:	10c4b03a 	or	r2,r2,r3
 2009bbc:	dc000015 	stw	r16,0(sp)
 2009bc0:	1440032e 	bgeu	r2,r17,2009bd0 <__udivdi3+0x394>
 2009bc4:	1545883a 	add	r2,r2,r21
 2009bc8:	a53fffc4 	addi	r20,r20,-1
 2009bcc:	15407f2e 	bgeu	r2,r21,2009dcc <__udivdi3+0x590>
 2009bd0:	1463c83a 	sub	r17,r2,r17
 2009bd4:	8809883a 	mov	r4,r17
 2009bd8:	b00b883a 	mov	r5,r22
 2009bdc:	20011d40 	call	20011d4 <__udivsi3>
 2009be0:	8809883a 	mov	r4,r17
 2009be4:	b00b883a 	mov	r5,r22
 2009be8:	1021883a 	mov	r16,r2
 2009bec:	20011dc0 	call	20011dc <__umodsi3>
 2009bf0:	d8c00517 	ldw	r3,20(sp)
 2009bf4:	d9000217 	ldw	r4,8(sp)
 2009bf8:	1004943a 	slli	r2,r2,16
 2009bfc:	1c0f383a 	mul	r7,r3,r16
 2009c00:	20ffffcc 	andi	r3,r4,65535
 2009c04:	10e2b03a 	or	r17,r2,r3
 2009c08:	89c0032e 	bgeu	r17,r7,2009c18 <__udivdi3+0x3dc>
 2009c0c:	8d63883a 	add	r17,r17,r21
 2009c10:	843fffc4 	addi	r16,r16,-1
 2009c14:	8d40692e 	bgeu	r17,r21,2009dbc <__udivdi3+0x580>
 2009c18:	a008943a 	slli	r4,r20,16
 2009c1c:	d9400017 	ldw	r5,0(sp)
 2009c20:	89e3c83a 	sub	r17,r17,r7
 2009c24:	8110b03a 	or	r8,r16,r4
 2009c28:	280cd43a 	srli	r6,r5,16
 2009c2c:	28ffffcc 	andi	r3,r5,65535
 2009c30:	40bfffcc 	andi	r2,r8,65535
 2009c34:	400ad43a 	srli	r5,r8,16
 2009c38:	10d3383a 	mul	r9,r2,r3
 2009c3c:	1185383a 	mul	r2,r2,r6
 2009c40:	28c7383a 	mul	r3,r5,r3
 2009c44:	4808d43a 	srli	r4,r9,16
 2009c48:	298b383a 	mul	r5,r5,r6
 2009c4c:	10c5883a 	add	r2,r2,r3
 2009c50:	2089883a 	add	r4,r4,r2
 2009c54:	20c0022e 	bgeu	r4,r3,2009c60 <__udivdi3+0x424>
 2009c58:	00800074 	movhi	r2,1
 2009c5c:	288b883a 	add	r5,r5,r2
 2009c60:	2004d43a 	srli	r2,r4,16
 2009c64:	288b883a 	add	r5,r5,r2
 2009c68:	89403f36 	bltu	r17,r5,2009d68 <__udivdi3+0x52c>
 2009c6c:	89403926 	beq	r17,r5,2009d54 <__udivdi3+0x518>
 2009c70:	4005883a 	mov	r2,r8
 2009c74:	0009883a 	mov	r4,zero
 2009c78:	003f5106 	br	20099c0 <__udivdi3+0x184>
 2009c7c:	85a0983a 	sll	r16,r16,r22
 2009c80:	3585c83a 	sub	r2,r6,r22
 2009c84:	a0a2d83a 	srl	r17,r20,r2
 2009c88:	802ad43a 	srli	r21,r16,16
 2009c8c:	e084d83a 	srl	r2,fp,r2
 2009c90:	a586983a 	sll	r3,r20,r22
 2009c94:	8809883a 	mov	r4,r17
 2009c98:	a80b883a 	mov	r5,r21
 2009c9c:	1886b03a 	or	r3,r3,r2
 2009ca0:	d8c00115 	stw	r3,4(sp)
 2009ca4:	20011d40 	call	20011d4 <__udivsi3>
 2009ca8:	8809883a 	mov	r4,r17
 2009cac:	a80b883a 	mov	r5,r21
 2009cb0:	d8800415 	stw	r2,16(sp)
 2009cb4:	20011dc0 	call	20011dc <__umodsi3>
 2009cb8:	d9000117 	ldw	r4,4(sp)
 2009cbc:	d9400417 	ldw	r5,16(sp)
 2009cc0:	1004943a 	slli	r2,r2,16
 2009cc4:	85ffffcc 	andi	r23,r16,65535
 2009cc8:	2006d43a 	srli	r3,r4,16
 2009ccc:	b963383a 	mul	r17,r23,r5
 2009cd0:	10c4b03a 	or	r2,r2,r3
 2009cd4:	1440042e 	bgeu	r2,r17,2009ce8 <__udivdi3+0x4ac>
 2009cd8:	297fffc4 	addi	r5,r5,-1
 2009cdc:	1405883a 	add	r2,r2,r16
 2009ce0:	d9400415 	stw	r5,16(sp)
 2009ce4:	1400442e 	bgeu	r2,r16,2009df8 <__udivdi3+0x5bc>
 2009ce8:	1463c83a 	sub	r17,r2,r17
 2009cec:	8809883a 	mov	r4,r17
 2009cf0:	a80b883a 	mov	r5,r21
 2009cf4:	20011d40 	call	20011d4 <__udivsi3>
 2009cf8:	8809883a 	mov	r4,r17
 2009cfc:	a80b883a 	mov	r5,r21
 2009d00:	1029883a 	mov	r20,r2
 2009d04:	20011dc0 	call	20011dc <__umodsi3>
 2009d08:	d9400117 	ldw	r5,4(sp)
 2009d0c:	1004943a 	slli	r2,r2,16
 2009d10:	bd09383a 	mul	r4,r23,r20
 2009d14:	28ffffcc 	andi	r3,r5,65535
 2009d18:	10c6b03a 	or	r3,r2,r3
 2009d1c:	1900062e 	bgeu	r3,r4,2009d38 <__udivdi3+0x4fc>
 2009d20:	1c07883a 	add	r3,r3,r16
 2009d24:	a53fffc4 	addi	r20,r20,-1
 2009d28:	1c000336 	bltu	r3,r16,2009d38 <__udivdi3+0x4fc>
 2009d2c:	1900022e 	bgeu	r3,r4,2009d38 <__udivdi3+0x4fc>
 2009d30:	a53fffc4 	addi	r20,r20,-1
 2009d34:	1c07883a 	add	r3,r3,r16
 2009d38:	d9400417 	ldw	r5,16(sp)
 2009d3c:	e5b8983a 	sll	fp,fp,r22
 2009d40:	1923c83a 	sub	r17,r3,r4
 2009d44:	2804943a 	slli	r2,r5,16
 2009d48:	a0a8b03a 	or	r20,r20,r2
 2009d4c:	dd000315 	stw	r20,12(sp)
 2009d50:	003ee106 	br	20098d8 <__udivdi3+0x9c>
 2009d54:	2004943a 	slli	r2,r4,16
 2009d58:	e5c8983a 	sll	r4,fp,r23
 2009d5c:	48ffffcc 	andi	r3,r9,65535
 2009d60:	10c5883a 	add	r2,r2,r3
 2009d64:	20bfc22e 	bgeu	r4,r2,2009c70 <__udivdi3+0x434>
 2009d68:	40bfffc4 	addi	r2,r8,-1
 2009d6c:	0009883a 	mov	r4,zero
 2009d70:	003f1306 	br	20099c0 <__udivdi3+0x184>
 2009d74:	01400204 	movi	r5,8
 2009d78:	2805883a 	mov	r2,r5
 2009d7c:	003f0306 	br	200998c <__udivdi3+0x150>
 2009d80:	01400604 	movi	r5,24
 2009d84:	2805883a 	mov	r2,r5
 2009d88:	003f0006 	br	200998c <__udivdi3+0x150>
 2009d8c:	01400204 	movi	r5,8
 2009d90:	2805883a 	mov	r2,r5
 2009d94:	003ec206 	br	20098a0 <__udivdi3+0x64>
 2009d98:	01400604 	movi	r5,24
 2009d9c:	2805883a 	mov	r2,r5
 2009da0:	003ebf06 	br	20098a0 <__udivdi3+0x64>
 2009da4:	01400204 	movi	r5,8
 2009da8:	2805883a 	mov	r2,r5
 2009dac:	003f1706 	br	2009a0c <__udivdi3+0x1d0>
 2009db0:	01400604 	movi	r5,24
 2009db4:	2805883a 	mov	r2,r5
 2009db8:	003f1406 	br	2009a0c <__udivdi3+0x1d0>
 2009dbc:	89ff962e 	bgeu	r17,r7,2009c18 <__udivdi3+0x3dc>
 2009dc0:	8d63883a 	add	r17,r17,r21
 2009dc4:	843fffc4 	addi	r16,r16,-1
 2009dc8:	003f9306 	br	2009c18 <__udivdi3+0x3dc>
 2009dcc:	147f802e 	bgeu	r2,r17,2009bd0 <__udivdi3+0x394>
 2009dd0:	a53fffc4 	addi	r20,r20,-1
 2009dd4:	1545883a 	add	r2,r2,r21
 2009dd8:	003f7d06 	br	2009bd0 <__udivdi3+0x394>
 2009ddc:	a53fffc4 	addi	r20,r20,-1
 2009de0:	003ede06 	br	200995c <__udivdi3+0x120>
 2009de4:	b5bfffc4 	addi	r22,r22,-1
 2009de8:	1405883a 	add	r2,r2,r16
 2009dec:	003f2806 	br	2009a90 <__udivdi3+0x254>
 2009df0:	a53fffc4 	addi	r20,r20,-1
 2009df4:	003f3706 	br	2009ad4 <__udivdi3+0x298>
 2009df8:	147fbb2e 	bgeu	r2,r17,2009ce8 <__udivdi3+0x4ac>
 2009dfc:	297fffc4 	addi	r5,r5,-1
 2009e00:	1405883a 	add	r2,r2,r16
 2009e04:	d9400415 	stw	r5,16(sp)
 2009e08:	003fb706 	br	2009ce8 <__udivdi3+0x4ac>
 2009e0c:	b5bfffc4 	addi	r22,r22,-1
 2009e10:	1405883a 	add	r2,r2,r16
 2009e14:	003ec006 	br	2009918 <__udivdi3+0xdc>

02009e18 <__umoddi3>:
 2009e18:	defff104 	addi	sp,sp,-60
 2009e1c:	dd800b15 	stw	r22,44(sp)
 2009e20:	dd000915 	stw	r20,36(sp)
 2009e24:	dc000515 	stw	r16,20(sp)
 2009e28:	dfc00e15 	stw	ra,56(sp)
 2009e2c:	df000d15 	stw	fp,52(sp)
 2009e30:	ddc00c15 	stw	r23,48(sp)
 2009e34:	dd400a15 	stw	r21,40(sp)
 2009e38:	dcc00815 	stw	r19,32(sp)
 2009e3c:	dc800715 	stw	r18,28(sp)
 2009e40:	dc400615 	stw	r17,24(sp)
 2009e44:	3021883a 	mov	r16,r6
 2009e48:	202d883a 	mov	r22,r4
 2009e4c:	2829883a 	mov	r20,r5
 2009e50:	38002b1e 	bne	r7,zero,2009f00 <__umoddi3+0xe8>
 2009e54:	29805036 	bltu	r5,r6,2009f98 <__umoddi3+0x180>
 2009e58:	30008a26 	beq	r6,zero,200a084 <__umoddi3+0x26c>
 2009e5c:	00bfffd4 	movui	r2,65535
 2009e60:	14008236 	bltu	r2,r16,200a06c <__umoddi3+0x254>
 2009e64:	00803fc4 	movi	r2,255
 2009e68:	14013636 	bltu	r2,r16,200a344 <__umoddi3+0x52c>
 2009e6c:	000b883a 	mov	r5,zero
 2009e70:	0005883a 	mov	r2,zero
 2009e74:	8084d83a 	srl	r2,r16,r2
 2009e78:	01008074 	movhi	r4,513
 2009e7c:	213cc904 	addi	r4,r4,-3292
 2009e80:	01800804 	movi	r6,32
 2009e84:	1105883a 	add	r2,r2,r4
 2009e88:	10c00003 	ldbu	r3,0(r2)
 2009e8c:	28c7883a 	add	r3,r5,r3
 2009e90:	30efc83a 	sub	r23,r6,r3
 2009e94:	b800941e 	bne	r23,zero,200a0e8 <__umoddi3+0x2d0>
 2009e98:	802ad43a 	srli	r21,r16,16
 2009e9c:	a423c83a 	sub	r17,r20,r16
 2009ea0:	0039883a 	mov	fp,zero
 2009ea4:	853fffcc 	andi	r20,r16,65535
 2009ea8:	8809883a 	mov	r4,r17
 2009eac:	a80b883a 	mov	r5,r21
 2009eb0:	20011d40 	call	20011d4 <__udivsi3>
 2009eb4:	8809883a 	mov	r4,r17
 2009eb8:	a80b883a 	mov	r5,r21
 2009ebc:	a0a3383a 	mul	r17,r20,r2
 2009ec0:	20011dc0 	call	20011dc <__umodsi3>
 2009ec4:	1004943a 	slli	r2,r2,16
 2009ec8:	b006d43a 	srli	r3,r22,16
 2009ecc:	10c4b03a 	or	r2,r2,r3
 2009ed0:	1440032e 	bgeu	r2,r17,2009ee0 <__umoddi3+0xc8>
 2009ed4:	1405883a 	add	r2,r2,r16
 2009ed8:	14000136 	bltu	r2,r16,2009ee0 <__umoddi3+0xc8>
 2009edc:	14413536 	bltu	r2,r17,200a3b4 <__umoddi3+0x59c>
 2009ee0:	1463c83a 	sub	r17,r2,r17
 2009ee4:	8809883a 	mov	r4,r17
 2009ee8:	a80b883a 	mov	r5,r21
 2009eec:	20011d40 	call	20011d4 <__udivsi3>
 2009ef0:	8809883a 	mov	r4,r17
 2009ef4:	a0a3383a 	mul	r17,r20,r2
 2009ef8:	a80b883a 	mov	r5,r21
 2009efc:	00004d06 	br	200a034 <__umoddi3+0x21c>
 2009f00:	380d883a 	mov	r6,r7
 2009f04:	29c0102e 	bgeu	r5,r7,2009f48 <__umoddi3+0x130>
 2009f08:	2011883a 	mov	r8,r4
 2009f0c:	2813883a 	mov	r9,r5
 2009f10:	4005883a 	mov	r2,r8
 2009f14:	4807883a 	mov	r3,r9
 2009f18:	dfc00e17 	ldw	ra,56(sp)
 2009f1c:	df000d17 	ldw	fp,52(sp)
 2009f20:	ddc00c17 	ldw	r23,48(sp)
 2009f24:	dd800b17 	ldw	r22,44(sp)
 2009f28:	dd400a17 	ldw	r21,40(sp)
 2009f2c:	dd000917 	ldw	r20,36(sp)
 2009f30:	dcc00817 	ldw	r19,32(sp)
 2009f34:	dc800717 	ldw	r18,28(sp)
 2009f38:	dc400617 	ldw	r17,24(sp)
 2009f3c:	dc000517 	ldw	r16,20(sp)
 2009f40:	dec00f04 	addi	sp,sp,60
 2009f44:	f800283a 	ret
 2009f48:	00bfffd4 	movui	r2,65535
 2009f4c:	11c05a36 	bltu	r2,r7,200a0b8 <__umoddi3+0x2a0>
 2009f50:	00803fc4 	movi	r2,255
 2009f54:	11c0fe36 	bltu	r2,r7,200a350 <__umoddi3+0x538>
 2009f58:	000b883a 	mov	r5,zero
 2009f5c:	0005883a 	mov	r2,zero
 2009f60:	3084d83a 	srl	r2,r6,r2
 2009f64:	01008074 	movhi	r4,513
 2009f68:	213cc904 	addi	r4,r4,-3292
 2009f6c:	01c00804 	movi	r7,32
 2009f70:	1105883a 	add	r2,r2,r4
 2009f74:	10c00003 	ldbu	r3,0(r2)
 2009f78:	28c7883a 	add	r3,r5,r3
 2009f7c:	38ebc83a 	sub	r21,r7,r3
 2009f80:	a800851e 	bne	r21,zero,200a198 <__umoddi3+0x380>
 2009f84:	35005236 	bltu	r6,r20,200a0d0 <__umoddi3+0x2b8>
 2009f88:	b400512e 	bgeu	r22,r16,200a0d0 <__umoddi3+0x2b8>
 2009f8c:	b011883a 	mov	r8,r22
 2009f90:	a013883a 	mov	r9,r20
 2009f94:	003fde06 	br	2009f10 <__umoddi3+0xf8>
 2009f98:	00bfffd4 	movui	r2,65535
 2009f9c:	11804036 	bltu	r2,r6,200a0a0 <__umoddi3+0x288>
 2009fa0:	00803fc4 	movi	r2,255
 2009fa4:	1180ed36 	bltu	r2,r6,200a35c <__umoddi3+0x544>
 2009fa8:	000b883a 	mov	r5,zero
 2009fac:	0005883a 	mov	r2,zero
 2009fb0:	8084d83a 	srl	r2,r16,r2
 2009fb4:	01008074 	movhi	r4,513
 2009fb8:	213cc904 	addi	r4,r4,-3292
 2009fbc:	01800804 	movi	r6,32
 2009fc0:	1105883a 	add	r2,r2,r4
 2009fc4:	10c00003 	ldbu	r3,0(r2)
 2009fc8:	28c7883a 	add	r3,r5,r3
 2009fcc:	30c7c83a 	sub	r3,r6,r3
 2009fd0:	1800bf1e 	bne	r3,zero,200a2d0 <__umoddi3+0x4b8>
 2009fd4:	0039883a 	mov	fp,zero
 2009fd8:	802ad43a 	srli	r21,r16,16
 2009fdc:	a009883a 	mov	r4,r20
 2009fe0:	85ffffcc 	andi	r23,r16,65535
 2009fe4:	a80b883a 	mov	r5,r21
 2009fe8:	20011d40 	call	20011d4 <__udivsi3>
 2009fec:	a009883a 	mov	r4,r20
 2009ff0:	a80b883a 	mov	r5,r21
 2009ff4:	b8a3383a 	mul	r17,r23,r2
 2009ff8:	20011dc0 	call	20011dc <__umodsi3>
 2009ffc:	1004943a 	slli	r2,r2,16
 200a000:	b006d43a 	srli	r3,r22,16
 200a004:	10c4b03a 	or	r2,r2,r3
 200a008:	1440032e 	bgeu	r2,r17,200a018 <__umoddi3+0x200>
 200a00c:	1405883a 	add	r2,r2,r16
 200a010:	14000136 	bltu	r2,r16,200a018 <__umoddi3+0x200>
 200a014:	1440e536 	bltu	r2,r17,200a3ac <__umoddi3+0x594>
 200a018:	1463c83a 	sub	r17,r2,r17
 200a01c:	8809883a 	mov	r4,r17
 200a020:	a80b883a 	mov	r5,r21
 200a024:	20011d40 	call	20011d4 <__udivsi3>
 200a028:	8809883a 	mov	r4,r17
 200a02c:	b8a3383a 	mul	r17,r23,r2
 200a030:	a80b883a 	mov	r5,r21
 200a034:	20011dc0 	call	20011dc <__umodsi3>
 200a038:	1004943a 	slli	r2,r2,16
 200a03c:	b0ffffcc 	andi	r3,r22,65535
 200a040:	10c4b03a 	or	r2,r2,r3
 200a044:	1440042e 	bgeu	r2,r17,200a058 <__umoddi3+0x240>
 200a048:	1405883a 	add	r2,r2,r16
 200a04c:	14000236 	bltu	r2,r16,200a058 <__umoddi3+0x240>
 200a050:	1440012e 	bgeu	r2,r17,200a058 <__umoddi3+0x240>
 200a054:	1405883a 	add	r2,r2,r16
 200a058:	1445c83a 	sub	r2,r2,r17
 200a05c:	1724d83a 	srl	r18,r2,fp
 200a060:	0013883a 	mov	r9,zero
 200a064:	9011883a 	mov	r8,r18
 200a068:	003fa906 	br	2009f10 <__umoddi3+0xf8>
 200a06c:	00804034 	movhi	r2,256
 200a070:	10bfffc4 	addi	r2,r2,-1
 200a074:	1400b036 	bltu	r2,r16,200a338 <__umoddi3+0x520>
 200a078:	01400404 	movi	r5,16
 200a07c:	2805883a 	mov	r2,r5
 200a080:	003f7c06 	br	2009e74 <__umoddi3+0x5c>
 200a084:	01000044 	movi	r4,1
 200a088:	000b883a 	mov	r5,zero
 200a08c:	20011d40 	call	20011d4 <__udivsi3>
 200a090:	1021883a 	mov	r16,r2
 200a094:	00bfffd4 	movui	r2,65535
 200a098:	143ff436 	bltu	r2,r16,200a06c <__umoddi3+0x254>
 200a09c:	003f7106 	br	2009e64 <__umoddi3+0x4c>
 200a0a0:	00804034 	movhi	r2,256
 200a0a4:	10bfffc4 	addi	r2,r2,-1
 200a0a8:	1180af36 	bltu	r2,r6,200a368 <__umoddi3+0x550>
 200a0ac:	01400404 	movi	r5,16
 200a0b0:	2805883a 	mov	r2,r5
 200a0b4:	003fbe06 	br	2009fb0 <__umoddi3+0x198>
 200a0b8:	00804034 	movhi	r2,256
 200a0bc:	10bfffc4 	addi	r2,r2,-1
 200a0c0:	11c0ac36 	bltu	r2,r7,200a374 <__umoddi3+0x55c>
 200a0c4:	01400404 	movi	r5,16
 200a0c8:	2805883a 	mov	r2,r5
 200a0cc:	003fa406 	br	2009f60 <__umoddi3+0x148>
 200a0d0:	b409c83a 	sub	r4,r22,r16
 200a0d4:	b105803a 	cmpltu	r2,r22,r4
 200a0d8:	a187c83a 	sub	r3,r20,r6
 200a0dc:	18a9c83a 	sub	r20,r3,r2
 200a0e0:	202d883a 	mov	r22,r4
 200a0e4:	003fa906 	br	2009f8c <__umoddi3+0x174>
 200a0e8:	85e0983a 	sll	r16,r16,r23
 200a0ec:	35c5c83a 	sub	r2,r6,r23
 200a0f0:	a0a2d83a 	srl	r17,r20,r2
 200a0f4:	802ad43a 	srli	r21,r16,16
 200a0f8:	b084d83a 	srl	r2,r22,r2
 200a0fc:	a5c6983a 	sll	r3,r20,r23
 200a100:	8809883a 	mov	r4,r17
 200a104:	a80b883a 	mov	r5,r21
 200a108:	1886b03a 	or	r3,r3,r2
 200a10c:	d8c00115 	stw	r3,4(sp)
 200a110:	853fffcc 	andi	r20,r16,65535
 200a114:	20011d40 	call	20011d4 <__udivsi3>
 200a118:	8809883a 	mov	r4,r17
 200a11c:	a80b883a 	mov	r5,r21
 200a120:	a0a3383a 	mul	r17,r20,r2
 200a124:	20011dc0 	call	20011dc <__umodsi3>
 200a128:	d9000117 	ldw	r4,4(sp)
 200a12c:	1004943a 	slli	r2,r2,16
 200a130:	b839883a 	mov	fp,r23
 200a134:	2006d43a 	srli	r3,r4,16
 200a138:	10c4b03a 	or	r2,r2,r3
 200a13c:	1440022e 	bgeu	r2,r17,200a148 <__umoddi3+0x330>
 200a140:	1405883a 	add	r2,r2,r16
 200a144:	1400962e 	bgeu	r2,r16,200a3a0 <__umoddi3+0x588>
 200a148:	1463c83a 	sub	r17,r2,r17
 200a14c:	8809883a 	mov	r4,r17
 200a150:	a80b883a 	mov	r5,r21
 200a154:	20011d40 	call	20011d4 <__udivsi3>
 200a158:	8809883a 	mov	r4,r17
 200a15c:	a80b883a 	mov	r5,r21
 200a160:	a0a3383a 	mul	r17,r20,r2
 200a164:	20011dc0 	call	20011dc <__umodsi3>
 200a168:	d9400117 	ldw	r5,4(sp)
 200a16c:	1004943a 	slli	r2,r2,16
 200a170:	28ffffcc 	andi	r3,r5,65535
 200a174:	10c4b03a 	or	r2,r2,r3
 200a178:	1440042e 	bgeu	r2,r17,200a18c <__umoddi3+0x374>
 200a17c:	1405883a 	add	r2,r2,r16
 200a180:	14000236 	bltu	r2,r16,200a18c <__umoddi3+0x374>
 200a184:	1440012e 	bgeu	r2,r17,200a18c <__umoddi3+0x374>
 200a188:	1405883a 	add	r2,r2,r16
 200a18c:	b5ec983a 	sll	r22,r22,r23
 200a190:	1463c83a 	sub	r17,r2,r17
 200a194:	003f4406 	br	2009ea8 <__umoddi3+0x90>
 200a198:	3d4fc83a 	sub	r7,r7,r21
 200a19c:	3546983a 	sll	r3,r6,r21
 200a1a0:	81c4d83a 	srl	r2,r16,r7
 200a1a4:	a1e2d83a 	srl	r17,r20,r7
 200a1a8:	a54c983a 	sll	r6,r20,r21
 200a1ac:	18aeb03a 	or	r23,r3,r2
 200a1b0:	b828d43a 	srli	r20,r23,16
 200a1b4:	b1c4d83a 	srl	r2,r22,r7
 200a1b8:	8809883a 	mov	r4,r17
 200a1bc:	a00b883a 	mov	r5,r20
 200a1c0:	308cb03a 	or	r6,r6,r2
 200a1c4:	d9c00315 	stw	r7,12(sp)
 200a1c8:	d9800215 	stw	r6,8(sp)
 200a1cc:	20011d40 	call	20011d4 <__udivsi3>
 200a1d0:	8809883a 	mov	r4,r17
 200a1d4:	a00b883a 	mov	r5,r20
 200a1d8:	1039883a 	mov	fp,r2
 200a1dc:	20011dc0 	call	20011dc <__umodsi3>
 200a1e0:	b8ffffcc 	andi	r3,r23,65535
 200a1e4:	d8c00415 	stw	r3,16(sp)
 200a1e8:	d9000217 	ldw	r4,8(sp)
 200a1ec:	d9400417 	ldw	r5,16(sp)
 200a1f0:	1004943a 	slli	r2,r2,16
 200a1f4:	2006d43a 	srli	r3,r4,16
 200a1f8:	8560983a 	sll	r16,r16,r21
 200a1fc:	2f23383a 	mul	r17,r5,fp
 200a200:	10c4b03a 	or	r2,r2,r3
 200a204:	dc000015 	stw	r16,0(sp)
 200a208:	b56c983a 	sll	r22,r22,r21
 200a20c:	1440032e 	bgeu	r2,r17,200a21c <__umoddi3+0x404>
 200a210:	15c5883a 	add	r2,r2,r23
 200a214:	e73fffc4 	addi	fp,fp,-1
 200a218:	15c05d2e 	bgeu	r2,r23,200a390 <__umoddi3+0x578>
 200a21c:	1463c83a 	sub	r17,r2,r17
 200a220:	8809883a 	mov	r4,r17
 200a224:	a00b883a 	mov	r5,r20
 200a228:	20011d40 	call	20011d4 <__udivsi3>
 200a22c:	8809883a 	mov	r4,r17
 200a230:	a00b883a 	mov	r5,r20
 200a234:	1021883a 	mov	r16,r2
 200a238:	20011dc0 	call	20011dc <__umodsi3>
 200a23c:	d8c00417 	ldw	r3,16(sp)
 200a240:	d9000217 	ldw	r4,8(sp)
 200a244:	1004943a 	slli	r2,r2,16
 200a248:	1c23383a 	mul	r17,r3,r16
 200a24c:	20ffffcc 	andi	r3,r4,65535
 200a250:	10ceb03a 	or	r7,r2,r3
 200a254:	3c40032e 	bgeu	r7,r17,200a264 <__umoddi3+0x44c>
 200a258:	3dcf883a 	add	r7,r7,r23
 200a25c:	843fffc4 	addi	r16,r16,-1
 200a260:	3dc0472e 	bgeu	r7,r23,200a380 <__umoddi3+0x568>
 200a264:	e004943a 	slli	r2,fp,16
 200a268:	d9400017 	ldw	r5,0(sp)
 200a26c:	3c4fc83a 	sub	r7,r7,r17
 200a270:	8084b03a 	or	r2,r16,r2
 200a274:	28ffffcc 	andi	r3,r5,65535
 200a278:	280cd43a 	srli	r6,r5,16
 200a27c:	100ad43a 	srli	r5,r2,16
 200a280:	10bfffcc 	andi	r2,r2,65535
 200a284:	10d1383a 	mul	r8,r2,r3
 200a288:	28c7383a 	mul	r3,r5,r3
 200a28c:	1185383a 	mul	r2,r2,r6
 200a290:	4008d43a 	srli	r4,r8,16
 200a294:	298b383a 	mul	r5,r5,r6
 200a298:	10c5883a 	add	r2,r2,r3
 200a29c:	2089883a 	add	r4,r4,r2
 200a2a0:	20c0022e 	bgeu	r4,r3,200a2ac <__umoddi3+0x494>
 200a2a4:	00800074 	movhi	r2,1
 200a2a8:	288b883a 	add	r5,r5,r2
 200a2ac:	2004d43a 	srli	r2,r4,16
 200a2b0:	2008943a 	slli	r4,r4,16
 200a2b4:	40ffffcc 	andi	r3,r8,65535
 200a2b8:	288b883a 	add	r5,r5,r2
 200a2bc:	20c9883a 	add	r4,r4,r3
 200a2c0:	39400b36 	bltu	r7,r5,200a2f0 <__umoddi3+0x4d8>
 200a2c4:	39403d26 	beq	r7,r5,200a3bc <__umoddi3+0x5a4>
 200a2c8:	394bc83a 	sub	r5,r7,r5
 200a2cc:	00000f06 	br	200a30c <__umoddi3+0x4f4>
 200a2d0:	30c5c83a 	sub	r2,r6,r3
 200a2d4:	1839883a 	mov	fp,r3
 200a2d8:	b084d83a 	srl	r2,r22,r2
 200a2dc:	a0c6983a 	sll	r3,r20,r3
 200a2e0:	8720983a 	sll	r16,r16,fp
 200a2e4:	b72c983a 	sll	r22,r22,fp
 200a2e8:	18a8b03a 	or	r20,r3,r2
 200a2ec:	003f3a06 	br	2009fd8 <__umoddi3+0x1c0>
 200a2f0:	d8c00017 	ldw	r3,0(sp)
 200a2f4:	20c5c83a 	sub	r2,r4,r3
 200a2f8:	2089803a 	cmpltu	r4,r4,r2
 200a2fc:	2dc7c83a 	sub	r3,r5,r23
 200a300:	1907c83a 	sub	r3,r3,r4
 200a304:	38cbc83a 	sub	r5,r7,r3
 200a308:	1009883a 	mov	r4,r2
 200a30c:	b105c83a 	sub	r2,r22,r4
 200a310:	b087803a 	cmpltu	r3,r22,r2
 200a314:	28c7c83a 	sub	r3,r5,r3
 200a318:	d9400317 	ldw	r5,12(sp)
 200a31c:	1544d83a 	srl	r2,r2,r21
 200a320:	1948983a 	sll	r4,r3,r5
 200a324:	1d46d83a 	srl	r3,r3,r21
 200a328:	20a4b03a 	or	r18,r4,r2
 200a32c:	9011883a 	mov	r8,r18
 200a330:	1813883a 	mov	r9,r3
 200a334:	003ef606 	br	2009f10 <__umoddi3+0xf8>
 200a338:	01400604 	movi	r5,24
 200a33c:	2805883a 	mov	r2,r5
 200a340:	003ecc06 	br	2009e74 <__umoddi3+0x5c>
 200a344:	01400204 	movi	r5,8
 200a348:	2805883a 	mov	r2,r5
 200a34c:	003ec906 	br	2009e74 <__umoddi3+0x5c>
 200a350:	01400204 	movi	r5,8
 200a354:	2805883a 	mov	r2,r5
 200a358:	003f0106 	br	2009f60 <__umoddi3+0x148>
 200a35c:	01400204 	movi	r5,8
 200a360:	2805883a 	mov	r2,r5
 200a364:	003f1206 	br	2009fb0 <__umoddi3+0x198>
 200a368:	01400604 	movi	r5,24
 200a36c:	2805883a 	mov	r2,r5
 200a370:	003f0f06 	br	2009fb0 <__umoddi3+0x198>
 200a374:	01400604 	movi	r5,24
 200a378:	2805883a 	mov	r2,r5
 200a37c:	003ef806 	br	2009f60 <__umoddi3+0x148>
 200a380:	3c7fb82e 	bgeu	r7,r17,200a264 <__umoddi3+0x44c>
 200a384:	843fffc4 	addi	r16,r16,-1
 200a388:	3dcf883a 	add	r7,r7,r23
 200a38c:	003fb506 	br	200a264 <__umoddi3+0x44c>
 200a390:	147fa22e 	bgeu	r2,r17,200a21c <__umoddi3+0x404>
 200a394:	e73fffc4 	addi	fp,fp,-1
 200a398:	15c5883a 	add	r2,r2,r23
 200a39c:	003f9f06 	br	200a21c <__umoddi3+0x404>
 200a3a0:	147f692e 	bgeu	r2,r17,200a148 <__umoddi3+0x330>
 200a3a4:	1405883a 	add	r2,r2,r16
 200a3a8:	003f6706 	br	200a148 <__umoddi3+0x330>
 200a3ac:	1405883a 	add	r2,r2,r16
 200a3b0:	003f1906 	br	200a018 <__umoddi3+0x200>
 200a3b4:	1405883a 	add	r2,r2,r16
 200a3b8:	003ec906 	br	2009ee0 <__umoddi3+0xc8>
 200a3bc:	b13fcc36 	bltu	r22,r4,200a2f0 <__umoddi3+0x4d8>
 200a3c0:	000b883a 	mov	r5,zero
 200a3c4:	003fd106 	br	200a30c <__umoddi3+0x4f4>

0200a3c8 <_fpadd_parts>:
 200a3c8:	defff804 	addi	sp,sp,-32
 200a3cc:	dcc00315 	stw	r19,12(sp)
 200a3d0:	2027883a 	mov	r19,r4
 200a3d4:	21000017 	ldw	r4,0(r4)
 200a3d8:	00c00044 	movi	r3,1
 200a3dc:	dd400515 	stw	r21,20(sp)
 200a3e0:	dd000415 	stw	r20,16(sp)
 200a3e4:	ddc00715 	stw	r23,28(sp)
 200a3e8:	dd800615 	stw	r22,24(sp)
 200a3ec:	dc800215 	stw	r18,8(sp)
 200a3f0:	dc400115 	stw	r17,4(sp)
 200a3f4:	dc000015 	stw	r16,0(sp)
 200a3f8:	282b883a 	mov	r21,r5
 200a3fc:	3029883a 	mov	r20,r6
 200a400:	1900632e 	bgeu	r3,r4,200a590 <_fpadd_parts+0x1c8>
 200a404:	28800017 	ldw	r2,0(r5)
 200a408:	1880812e 	bgeu	r3,r2,200a610 <_fpadd_parts+0x248>
 200a40c:	00c00104 	movi	r3,4
 200a410:	20c0dc26 	beq	r4,r3,200a784 <_fpadd_parts+0x3bc>
 200a414:	10c07e26 	beq	r2,r3,200a610 <_fpadd_parts+0x248>
 200a418:	00c00084 	movi	r3,2
 200a41c:	10c06726 	beq	r2,r3,200a5bc <_fpadd_parts+0x1f4>
 200a420:	20c07b26 	beq	r4,r3,200a610 <_fpadd_parts+0x248>
 200a424:	9dc00217 	ldw	r23,8(r19)
 200a428:	28c00217 	ldw	r3,8(r5)
 200a42c:	9c400317 	ldw	r17,12(r19)
 200a430:	2bc00317 	ldw	r15,12(r5)
 200a434:	b8cdc83a 	sub	r6,r23,r3
 200a438:	9c800417 	ldw	r18,16(r19)
 200a43c:	2c000417 	ldw	r16,16(r5)
 200a440:	3009883a 	mov	r4,r6
 200a444:	30009716 	blt	r6,zero,200a6a4 <_fpadd_parts+0x2dc>
 200a448:	00800fc4 	movi	r2,63
 200a44c:	11806b16 	blt	r2,r6,200a5fc <_fpadd_parts+0x234>
 200a450:	0100a40e 	bge	zero,r4,200a6e4 <_fpadd_parts+0x31c>
 200a454:	35bff804 	addi	r22,r6,-32
 200a458:	b000bc16 	blt	r22,zero,200a74c <_fpadd_parts+0x384>
 200a45c:	8596d83a 	srl	r11,r16,r22
 200a460:	0019883a 	mov	r12,zero
 200a464:	0013883a 	mov	r9,zero
 200a468:	01000044 	movi	r4,1
 200a46c:	0015883a 	mov	r10,zero
 200a470:	b000be16 	blt	r22,zero,200a76c <_fpadd_parts+0x3a4>
 200a474:	2590983a 	sll	r8,r4,r22
 200a478:	000f883a 	mov	r7,zero
 200a47c:	00bfffc4 	movi	r2,-1
 200a480:	3889883a 	add	r4,r7,r2
 200a484:	408b883a 	add	r5,r8,r2
 200a488:	21cd803a 	cmpltu	r6,r4,r7
 200a48c:	314b883a 	add	r5,r6,r5
 200a490:	7904703a 	and	r2,r15,r4
 200a494:	8146703a 	and	r3,r16,r5
 200a498:	10c4b03a 	or	r2,r2,r3
 200a49c:	10000226 	beq	r2,zero,200a4a8 <_fpadd_parts+0xe0>
 200a4a0:	02400044 	movi	r9,1
 200a4a4:	0015883a 	mov	r10,zero
 200a4a8:	5a5eb03a 	or	r15,r11,r9
 200a4ac:	62a0b03a 	or	r16,r12,r10
 200a4b0:	99400117 	ldw	r5,4(r19)
 200a4b4:	a8800117 	ldw	r2,4(r21)
 200a4b8:	28806e26 	beq	r5,r2,200a674 <_fpadd_parts+0x2ac>
 200a4bc:	28006626 	beq	r5,zero,200a658 <_fpadd_parts+0x290>
 200a4c0:	7c45c83a 	sub	r2,r15,r17
 200a4c4:	7889803a 	cmpltu	r4,r15,r2
 200a4c8:	8487c83a 	sub	r3,r16,r18
 200a4cc:	1909c83a 	sub	r4,r3,r4
 200a4d0:	100d883a 	mov	r6,r2
 200a4d4:	200f883a 	mov	r7,r4
 200a4d8:	38007716 	blt	r7,zero,200a6b8 <_fpadd_parts+0x2f0>
 200a4dc:	a5c00215 	stw	r23,8(r20)
 200a4e0:	a1c00415 	stw	r7,16(r20)
 200a4e4:	a0000115 	stw	zero,4(r20)
 200a4e8:	a1800315 	stw	r6,12(r20)
 200a4ec:	a2000317 	ldw	r8,12(r20)
 200a4f0:	a2400417 	ldw	r9,16(r20)
 200a4f4:	00bfffc4 	movi	r2,-1
 200a4f8:	408b883a 	add	r5,r8,r2
 200a4fc:	2a09803a 	cmpltu	r4,r5,r8
 200a500:	488d883a 	add	r6,r9,r2
 200a504:	01c40034 	movhi	r7,4096
 200a508:	39ffffc4 	addi	r7,r7,-1
 200a50c:	218d883a 	add	r6,r4,r6
 200a510:	39801736 	bltu	r7,r6,200a570 <_fpadd_parts+0x1a8>
 200a514:	31c06526 	beq	r6,r7,200a6ac <_fpadd_parts+0x2e4>
 200a518:	a3000217 	ldw	r12,8(r20)
 200a51c:	4209883a 	add	r4,r8,r8
 200a520:	00bfffc4 	movi	r2,-1
 200a524:	220f803a 	cmpltu	r7,r4,r8
 200a528:	4a4b883a 	add	r5,r9,r9
 200a52c:	394f883a 	add	r7,r7,r5
 200a530:	2095883a 	add	r10,r4,r2
 200a534:	3897883a 	add	r11,r7,r2
 200a538:	510d803a 	cmpltu	r6,r10,r4
 200a53c:	6099883a 	add	r12,r12,r2
 200a540:	32d7883a 	add	r11,r6,r11
 200a544:	00840034 	movhi	r2,4096
 200a548:	10bfffc4 	addi	r2,r2,-1
 200a54c:	2011883a 	mov	r8,r4
 200a550:	3813883a 	mov	r9,r7
 200a554:	a1000315 	stw	r4,12(r20)
 200a558:	a1c00415 	stw	r7,16(r20)
 200a55c:	a3000215 	stw	r12,8(r20)
 200a560:	12c00336 	bltu	r2,r11,200a570 <_fpadd_parts+0x1a8>
 200a564:	58bfed1e 	bne	r11,r2,200a51c <_fpadd_parts+0x154>
 200a568:	00bfff84 	movi	r2,-2
 200a56c:	12bfeb2e 	bgeu	r2,r10,200a51c <_fpadd_parts+0x154>
 200a570:	a2800417 	ldw	r10,16(r20)
 200a574:	008000c4 	movi	r2,3
 200a578:	00c80034 	movhi	r3,8192
 200a57c:	18ffffc4 	addi	r3,r3,-1
 200a580:	a2400317 	ldw	r9,12(r20)
 200a584:	a0800015 	stw	r2,0(r20)
 200a588:	1a802336 	bltu	r3,r10,200a618 <_fpadd_parts+0x250>
 200a58c:	a027883a 	mov	r19,r20
 200a590:	9805883a 	mov	r2,r19
 200a594:	ddc00717 	ldw	r23,28(sp)
 200a598:	dd800617 	ldw	r22,24(sp)
 200a59c:	dd400517 	ldw	r21,20(sp)
 200a5a0:	dd000417 	ldw	r20,16(sp)
 200a5a4:	dcc00317 	ldw	r19,12(sp)
 200a5a8:	dc800217 	ldw	r18,8(sp)
 200a5ac:	dc400117 	ldw	r17,4(sp)
 200a5b0:	dc000017 	ldw	r16,0(sp)
 200a5b4:	dec00804 	addi	sp,sp,32
 200a5b8:	f800283a 	ret
 200a5bc:	20fff41e 	bne	r4,r3,200a590 <_fpadd_parts+0x1c8>
 200a5c0:	31000015 	stw	r4,0(r6)
 200a5c4:	98800117 	ldw	r2,4(r19)
 200a5c8:	30800115 	stw	r2,4(r6)
 200a5cc:	98c00217 	ldw	r3,8(r19)
 200a5d0:	30c00215 	stw	r3,8(r6)
 200a5d4:	98800317 	ldw	r2,12(r19)
 200a5d8:	30800315 	stw	r2,12(r6)
 200a5dc:	98c00417 	ldw	r3,16(r19)
 200a5e0:	30c00415 	stw	r3,16(r6)
 200a5e4:	98800117 	ldw	r2,4(r19)
 200a5e8:	28c00117 	ldw	r3,4(r5)
 200a5ec:	3027883a 	mov	r19,r6
 200a5f0:	10c4703a 	and	r2,r2,r3
 200a5f4:	30800115 	stw	r2,4(r6)
 200a5f8:	003fe506 	br	200a590 <_fpadd_parts+0x1c8>
 200a5fc:	1dc02616 	blt	r3,r23,200a698 <_fpadd_parts+0x2d0>
 200a600:	0023883a 	mov	r17,zero
 200a604:	182f883a 	mov	r23,r3
 200a608:	0025883a 	mov	r18,zero
 200a60c:	003fa806 	br	200a4b0 <_fpadd_parts+0xe8>
 200a610:	a827883a 	mov	r19,r21
 200a614:	003fde06 	br	200a590 <_fpadd_parts+0x1c8>
 200a618:	01800044 	movi	r6,1
 200a61c:	500497fa 	slli	r2,r10,31
 200a620:	4808d07a 	srli	r4,r9,1
 200a624:	518ad83a 	srl	r5,r10,r6
 200a628:	a2000217 	ldw	r8,8(r20)
 200a62c:	1108b03a 	or	r4,r2,r4
 200a630:	0007883a 	mov	r3,zero
 200a634:	4984703a 	and	r2,r9,r6
 200a638:	208cb03a 	or	r6,r4,r2
 200a63c:	28ceb03a 	or	r7,r5,r3
 200a640:	42000044 	addi	r8,r8,1
 200a644:	a027883a 	mov	r19,r20
 200a648:	a1c00415 	stw	r7,16(r20)
 200a64c:	a2000215 	stw	r8,8(r20)
 200a650:	a1800315 	stw	r6,12(r20)
 200a654:	003fce06 	br	200a590 <_fpadd_parts+0x1c8>
 200a658:	8bc5c83a 	sub	r2,r17,r15
 200a65c:	8889803a 	cmpltu	r4,r17,r2
 200a660:	9407c83a 	sub	r3,r18,r16
 200a664:	1909c83a 	sub	r4,r3,r4
 200a668:	100d883a 	mov	r6,r2
 200a66c:	200f883a 	mov	r7,r4
 200a670:	003f9906 	br	200a4d8 <_fpadd_parts+0x110>
 200a674:	7c45883a 	add	r2,r15,r17
 200a678:	13c9803a 	cmpltu	r4,r2,r15
 200a67c:	8487883a 	add	r3,r16,r18
 200a680:	20c9883a 	add	r4,r4,r3
 200a684:	a1400115 	stw	r5,4(r20)
 200a688:	a5c00215 	stw	r23,8(r20)
 200a68c:	a0800315 	stw	r2,12(r20)
 200a690:	a1000415 	stw	r4,16(r20)
 200a694:	003fb606 	br	200a570 <_fpadd_parts+0x1a8>
 200a698:	001f883a 	mov	r15,zero
 200a69c:	0021883a 	mov	r16,zero
 200a6a0:	003f8306 	br	200a4b0 <_fpadd_parts+0xe8>
 200a6a4:	018dc83a 	sub	r6,zero,r6
 200a6a8:	003f6706 	br	200a448 <_fpadd_parts+0x80>
 200a6ac:	00bfff84 	movi	r2,-2
 200a6b0:	117faf36 	bltu	r2,r5,200a570 <_fpadd_parts+0x1a8>
 200a6b4:	003f9806 	br	200a518 <_fpadd_parts+0x150>
 200a6b8:	0005883a 	mov	r2,zero
 200a6bc:	1189c83a 	sub	r4,r2,r6
 200a6c0:	1105803a 	cmpltu	r2,r2,r4
 200a6c4:	01cbc83a 	sub	r5,zero,r7
 200a6c8:	2885c83a 	sub	r2,r5,r2
 200a6cc:	01800044 	movi	r6,1
 200a6d0:	a1800115 	stw	r6,4(r20)
 200a6d4:	a5c00215 	stw	r23,8(r20)
 200a6d8:	a1000315 	stw	r4,12(r20)
 200a6dc:	a0800415 	stw	r2,16(r20)
 200a6e0:	003f8206 	br	200a4ec <_fpadd_parts+0x124>
 200a6e4:	203f7226 	beq	r4,zero,200a4b0 <_fpadd_parts+0xe8>
 200a6e8:	35bff804 	addi	r22,r6,-32
 200a6ec:	b9af883a 	add	r23,r23,r6
 200a6f0:	b0003116 	blt	r22,zero,200a7b8 <_fpadd_parts+0x3f0>
 200a6f4:	959ad83a 	srl	r13,r18,r22
 200a6f8:	001d883a 	mov	r14,zero
 200a6fc:	000f883a 	mov	r7,zero
 200a700:	01000044 	movi	r4,1
 200a704:	0011883a 	mov	r8,zero
 200a708:	b0002516 	blt	r22,zero,200a7a0 <_fpadd_parts+0x3d8>
 200a70c:	2594983a 	sll	r10,r4,r22
 200a710:	0013883a 	mov	r9,zero
 200a714:	00bfffc4 	movi	r2,-1
 200a718:	4889883a 	add	r4,r9,r2
 200a71c:	508b883a 	add	r5,r10,r2
 200a720:	224d803a 	cmpltu	r6,r4,r9
 200a724:	314b883a 	add	r5,r6,r5
 200a728:	8904703a 	and	r2,r17,r4
 200a72c:	9146703a 	and	r3,r18,r5
 200a730:	10c4b03a 	or	r2,r2,r3
 200a734:	10000226 	beq	r2,zero,200a740 <_fpadd_parts+0x378>
 200a738:	01c00044 	movi	r7,1
 200a73c:	0011883a 	mov	r8,zero
 200a740:	69e2b03a 	or	r17,r13,r7
 200a744:	7224b03a 	or	r18,r14,r8
 200a748:	003f5906 	br	200a4b0 <_fpadd_parts+0xe8>
 200a74c:	8407883a 	add	r3,r16,r16
 200a750:	008007c4 	movi	r2,31
 200a754:	1185c83a 	sub	r2,r2,r6
 200a758:	1886983a 	sll	r3,r3,r2
 200a75c:	7996d83a 	srl	r11,r15,r6
 200a760:	8198d83a 	srl	r12,r16,r6
 200a764:	1ad6b03a 	or	r11,r3,r11
 200a768:	003f3e06 	br	200a464 <_fpadd_parts+0x9c>
 200a76c:	2006d07a 	srli	r3,r4,1
 200a770:	008007c4 	movi	r2,31
 200a774:	1185c83a 	sub	r2,r2,r6
 200a778:	1890d83a 	srl	r8,r3,r2
 200a77c:	218e983a 	sll	r7,r4,r6
 200a780:	003f3e06 	br	200a47c <_fpadd_parts+0xb4>
 200a784:	113f821e 	bne	r2,r4,200a590 <_fpadd_parts+0x1c8>
 200a788:	28c00117 	ldw	r3,4(r5)
 200a78c:	98800117 	ldw	r2,4(r19)
 200a790:	10ff7f26 	beq	r2,r3,200a590 <_fpadd_parts+0x1c8>
 200a794:	04c08074 	movhi	r19,513
 200a798:	9cfd8804 	addi	r19,r19,-2528
 200a79c:	003f7c06 	br	200a590 <_fpadd_parts+0x1c8>
 200a7a0:	2006d07a 	srli	r3,r4,1
 200a7a4:	008007c4 	movi	r2,31
 200a7a8:	1185c83a 	sub	r2,r2,r6
 200a7ac:	1894d83a 	srl	r10,r3,r2
 200a7b0:	2192983a 	sll	r9,r4,r6
 200a7b4:	003fd706 	br	200a714 <_fpadd_parts+0x34c>
 200a7b8:	9487883a 	add	r3,r18,r18
 200a7bc:	008007c4 	movi	r2,31
 200a7c0:	1185c83a 	sub	r2,r2,r6
 200a7c4:	1886983a 	sll	r3,r3,r2
 200a7c8:	899ad83a 	srl	r13,r17,r6
 200a7cc:	919cd83a 	srl	r14,r18,r6
 200a7d0:	1b5ab03a 	or	r13,r3,r13
 200a7d4:	003fc906 	br	200a6fc <_fpadd_parts+0x334>

0200a7d8 <__subdf3>:
 200a7d8:	deffea04 	addi	sp,sp,-88
 200a7dc:	dcc01415 	stw	r19,80(sp)
 200a7e0:	dcc00404 	addi	r19,sp,16
 200a7e4:	2011883a 	mov	r8,r4
 200a7e8:	2813883a 	mov	r9,r5
 200a7ec:	dc401315 	stw	r17,76(sp)
 200a7f0:	d809883a 	mov	r4,sp
 200a7f4:	980b883a 	mov	r5,r19
 200a7f8:	dc400904 	addi	r17,sp,36
 200a7fc:	dfc01515 	stw	ra,84(sp)
 200a800:	da400115 	stw	r9,4(sp)
 200a804:	d9c00315 	stw	r7,12(sp)
 200a808:	da000015 	stw	r8,0(sp)
 200a80c:	d9800215 	stw	r6,8(sp)
 200a810:	20018e00 	call	20018e0 <__unpack_d>
 200a814:	d9000204 	addi	r4,sp,8
 200a818:	880b883a 	mov	r5,r17
 200a81c:	20018e00 	call	20018e0 <__unpack_d>
 200a820:	d8800a17 	ldw	r2,40(sp)
 200a824:	880b883a 	mov	r5,r17
 200a828:	9809883a 	mov	r4,r19
 200a82c:	d9800e04 	addi	r6,sp,56
 200a830:	1080005c 	xori	r2,r2,1
 200a834:	d8800a15 	stw	r2,40(sp)
 200a838:	200a3c80 	call	200a3c8 <_fpadd_parts>
 200a83c:	1009883a 	mov	r4,r2
 200a840:	20015cc0 	call	20015cc <__pack_d>
 200a844:	dfc01517 	ldw	ra,84(sp)
 200a848:	dcc01417 	ldw	r19,80(sp)
 200a84c:	dc401317 	ldw	r17,76(sp)
 200a850:	dec01604 	addi	sp,sp,88
 200a854:	f800283a 	ret

0200a858 <__adddf3>:
 200a858:	deffea04 	addi	sp,sp,-88
 200a85c:	dcc01415 	stw	r19,80(sp)
 200a860:	dcc00404 	addi	r19,sp,16
 200a864:	2011883a 	mov	r8,r4
 200a868:	2813883a 	mov	r9,r5
 200a86c:	dc401315 	stw	r17,76(sp)
 200a870:	d809883a 	mov	r4,sp
 200a874:	980b883a 	mov	r5,r19
 200a878:	dc400904 	addi	r17,sp,36
 200a87c:	dfc01515 	stw	ra,84(sp)
 200a880:	da400115 	stw	r9,4(sp)
 200a884:	d9c00315 	stw	r7,12(sp)
 200a888:	da000015 	stw	r8,0(sp)
 200a88c:	d9800215 	stw	r6,8(sp)
 200a890:	20018e00 	call	20018e0 <__unpack_d>
 200a894:	d9000204 	addi	r4,sp,8
 200a898:	880b883a 	mov	r5,r17
 200a89c:	20018e00 	call	20018e0 <__unpack_d>
 200a8a0:	d9800e04 	addi	r6,sp,56
 200a8a4:	9809883a 	mov	r4,r19
 200a8a8:	880b883a 	mov	r5,r17
 200a8ac:	200a3c80 	call	200a3c8 <_fpadd_parts>
 200a8b0:	1009883a 	mov	r4,r2
 200a8b4:	20015cc0 	call	20015cc <__pack_d>
 200a8b8:	dfc01517 	ldw	ra,84(sp)
 200a8bc:	dcc01417 	ldw	r19,80(sp)
 200a8c0:	dc401317 	ldw	r17,76(sp)
 200a8c4:	dec01604 	addi	sp,sp,88
 200a8c8:	f800283a 	ret

0200a8cc <__muldf3>:
 200a8cc:	deffe004 	addi	sp,sp,-128
 200a8d0:	dc401815 	stw	r17,96(sp)
 200a8d4:	dc400404 	addi	r17,sp,16
 200a8d8:	2011883a 	mov	r8,r4
 200a8dc:	2813883a 	mov	r9,r5
 200a8e0:	dc001715 	stw	r16,92(sp)
 200a8e4:	d809883a 	mov	r4,sp
 200a8e8:	880b883a 	mov	r5,r17
 200a8ec:	dc000904 	addi	r16,sp,36
 200a8f0:	dfc01f15 	stw	ra,124(sp)
 200a8f4:	da400115 	stw	r9,4(sp)
 200a8f8:	d9c00315 	stw	r7,12(sp)
 200a8fc:	da000015 	stw	r8,0(sp)
 200a900:	d9800215 	stw	r6,8(sp)
 200a904:	ddc01e15 	stw	r23,120(sp)
 200a908:	dd801d15 	stw	r22,116(sp)
 200a90c:	dd401c15 	stw	r21,112(sp)
 200a910:	dd001b15 	stw	r20,108(sp)
 200a914:	dcc01a15 	stw	r19,104(sp)
 200a918:	dc801915 	stw	r18,100(sp)
 200a91c:	20018e00 	call	20018e0 <__unpack_d>
 200a920:	d9000204 	addi	r4,sp,8
 200a924:	800b883a 	mov	r5,r16
 200a928:	20018e00 	call	20018e0 <__unpack_d>
 200a92c:	d9000417 	ldw	r4,16(sp)
 200a930:	00800044 	movi	r2,1
 200a934:	1100102e 	bgeu	r2,r4,200a978 <__muldf3+0xac>
 200a938:	d8c00917 	ldw	r3,36(sp)
 200a93c:	10c0062e 	bgeu	r2,r3,200a958 <__muldf3+0x8c>
 200a940:	00800104 	movi	r2,4
 200a944:	20800a26 	beq	r4,r2,200a970 <__muldf3+0xa4>
 200a948:	1880cc26 	beq	r3,r2,200ac7c <__muldf3+0x3b0>
 200a94c:	00800084 	movi	r2,2
 200a950:	20800926 	beq	r4,r2,200a978 <__muldf3+0xac>
 200a954:	1880191e 	bne	r3,r2,200a9bc <__muldf3+0xf0>
 200a958:	d8c00a17 	ldw	r3,40(sp)
 200a95c:	d8800517 	ldw	r2,20(sp)
 200a960:	8009883a 	mov	r4,r16
 200a964:	10c4c03a 	cmpne	r2,r2,r3
 200a968:	d8800a15 	stw	r2,40(sp)
 200a96c:	00000706 	br	200a98c <__muldf3+0xc0>
 200a970:	00800084 	movi	r2,2
 200a974:	1880c326 	beq	r3,r2,200ac84 <__muldf3+0x3b8>
 200a978:	d8800517 	ldw	r2,20(sp)
 200a97c:	d8c00a17 	ldw	r3,40(sp)
 200a980:	8809883a 	mov	r4,r17
 200a984:	10c4c03a 	cmpne	r2,r2,r3
 200a988:	d8800515 	stw	r2,20(sp)
 200a98c:	20015cc0 	call	20015cc <__pack_d>
 200a990:	dfc01f17 	ldw	ra,124(sp)
 200a994:	ddc01e17 	ldw	r23,120(sp)
 200a998:	dd801d17 	ldw	r22,116(sp)
 200a99c:	dd401c17 	ldw	r21,112(sp)
 200a9a0:	dd001b17 	ldw	r20,108(sp)
 200a9a4:	dcc01a17 	ldw	r19,104(sp)
 200a9a8:	dc801917 	ldw	r18,100(sp)
 200a9ac:	dc401817 	ldw	r17,96(sp)
 200a9b0:	dc001717 	ldw	r16,92(sp)
 200a9b4:	dec02004 	addi	sp,sp,128
 200a9b8:	f800283a 	ret
 200a9bc:	dd800717 	ldw	r22,28(sp)
 200a9c0:	dc800c17 	ldw	r18,48(sp)
 200a9c4:	002b883a 	mov	r21,zero
 200a9c8:	0023883a 	mov	r17,zero
 200a9cc:	a80b883a 	mov	r5,r21
 200a9d0:	b00d883a 	mov	r6,r22
 200a9d4:	880f883a 	mov	r7,r17
 200a9d8:	ddc00817 	ldw	r23,32(sp)
 200a9dc:	dcc00d17 	ldw	r19,52(sp)
 200a9e0:	9009883a 	mov	r4,r18
 200a9e4:	20011e40 	call	20011e4 <__muldi3>
 200a9e8:	001b883a 	mov	r13,zero
 200a9ec:	680f883a 	mov	r7,r13
 200a9f0:	b009883a 	mov	r4,r22
 200a9f4:	000b883a 	mov	r5,zero
 200a9f8:	980d883a 	mov	r6,r19
 200a9fc:	b82d883a 	mov	r22,r23
 200aa00:	002f883a 	mov	r23,zero
 200aa04:	db401615 	stw	r13,88(sp)
 200aa08:	d8801315 	stw	r2,76(sp)
 200aa0c:	d8c01415 	stw	r3,80(sp)
 200aa10:	dcc01515 	stw	r19,84(sp)
 200aa14:	20011e40 	call	20011e4 <__muldi3>
 200aa18:	b00d883a 	mov	r6,r22
 200aa1c:	000b883a 	mov	r5,zero
 200aa20:	9009883a 	mov	r4,r18
 200aa24:	b80f883a 	mov	r7,r23
 200aa28:	1021883a 	mov	r16,r2
 200aa2c:	1823883a 	mov	r17,r3
 200aa30:	20011e40 	call	20011e4 <__muldi3>
 200aa34:	8085883a 	add	r2,r16,r2
 200aa38:	140d803a 	cmpltu	r6,r2,r16
 200aa3c:	88c7883a 	add	r3,r17,r3
 200aa40:	30cd883a 	add	r6,r6,r3
 200aa44:	1029883a 	mov	r20,r2
 200aa48:	302b883a 	mov	r21,r6
 200aa4c:	da801317 	ldw	r10,76(sp)
 200aa50:	dac01417 	ldw	r11,80(sp)
 200aa54:	db001517 	ldw	r12,84(sp)
 200aa58:	db401617 	ldw	r13,88(sp)
 200aa5c:	3440612e 	bgeu	r6,r17,200abe4 <__muldf3+0x318>
 200aa60:	0009883a 	mov	r4,zero
 200aa64:	5105883a 	add	r2,r10,r4
 200aa68:	128d803a 	cmpltu	r6,r2,r10
 200aa6c:	5d07883a 	add	r3,r11,r20
 200aa70:	30cd883a 	add	r6,r6,r3
 200aa74:	0021883a 	mov	r16,zero
 200aa78:	04400044 	movi	r17,1
 200aa7c:	1025883a 	mov	r18,r2
 200aa80:	3027883a 	mov	r19,r6
 200aa84:	32c06236 	bltu	r6,r11,200ac10 <__muldf3+0x344>
 200aa88:	59807a26 	beq	r11,r6,200ac74 <__muldf3+0x3a8>
 200aa8c:	680b883a 	mov	r5,r13
 200aa90:	b80f883a 	mov	r7,r23
 200aa94:	6009883a 	mov	r4,r12
 200aa98:	b00d883a 	mov	r6,r22
 200aa9c:	20011e40 	call	20011e4 <__muldi3>
 200aaa0:	1009883a 	mov	r4,r2
 200aaa4:	000f883a 	mov	r7,zero
 200aaa8:	1545883a 	add	r2,r2,r21
 200aaac:	1111803a 	cmpltu	r8,r2,r4
 200aab0:	19c7883a 	add	r3,r3,r7
 200aab4:	40c7883a 	add	r3,r8,r3
 200aab8:	88cb883a 	add	r5,r17,r3
 200aabc:	d8c00617 	ldw	r3,24(sp)
 200aac0:	8089883a 	add	r4,r16,r2
 200aac4:	d8800b17 	ldw	r2,44(sp)
 200aac8:	18c00104 	addi	r3,r3,4
 200aacc:	240d803a 	cmpltu	r6,r4,r16
 200aad0:	10c7883a 	add	r3,r2,r3
 200aad4:	2013883a 	mov	r9,r4
 200aad8:	d8800a17 	ldw	r2,40(sp)
 200aadc:	d9000517 	ldw	r4,20(sp)
 200aae0:	314d883a 	add	r6,r6,r5
 200aae4:	3015883a 	mov	r10,r6
 200aae8:	2088c03a 	cmpne	r4,r4,r2
 200aaec:	00880034 	movhi	r2,8192
 200aaf0:	10bfffc4 	addi	r2,r2,-1
 200aaf4:	d9000f15 	stw	r4,60(sp)
 200aaf8:	d8c01015 	stw	r3,64(sp)
 200aafc:	1180162e 	bgeu	r2,r6,200ab58 <__muldf3+0x28c>
 200ab00:	1811883a 	mov	r8,r3
 200ab04:	101f883a 	mov	r15,r2
 200ab08:	980497fa 	slli	r2,r19,31
 200ab0c:	9016d07a 	srli	r11,r18,1
 200ab10:	500697fa 	slli	r3,r10,31
 200ab14:	480cd07a 	srli	r6,r9,1
 200ab18:	500ed07a 	srli	r7,r10,1
 200ab1c:	12d6b03a 	or	r11,r2,r11
 200ab20:	00800044 	movi	r2,1
 200ab24:	198cb03a 	or	r6,r3,r6
 200ab28:	4888703a 	and	r4,r9,r2
 200ab2c:	9818d07a 	srli	r12,r19,1
 200ab30:	001b883a 	mov	r13,zero
 200ab34:	03a00034 	movhi	r14,32768
 200ab38:	3013883a 	mov	r9,r6
 200ab3c:	3815883a 	mov	r10,r7
 200ab40:	4091883a 	add	r8,r8,r2
 200ab44:	20000226 	beq	r4,zero,200ab50 <__muldf3+0x284>
 200ab48:	5b64b03a 	or	r18,r11,r13
 200ab4c:	63a6b03a 	or	r19,r12,r14
 200ab50:	7abfed36 	bltu	r15,r10,200ab08 <__muldf3+0x23c>
 200ab54:	da001015 	stw	r8,64(sp)
 200ab58:	00840034 	movhi	r2,4096
 200ab5c:	10bfffc4 	addi	r2,r2,-1
 200ab60:	12801436 	bltu	r2,r10,200abb4 <__muldf3+0x2e8>
 200ab64:	da001017 	ldw	r8,64(sp)
 200ab68:	101f883a 	mov	r15,r2
 200ab6c:	4a45883a 	add	r2,r9,r9
 200ab70:	124d803a 	cmpltu	r6,r2,r9
 200ab74:	5287883a 	add	r3,r10,r10
 200ab78:	9497883a 	add	r11,r18,r18
 200ab7c:	5c8f803a 	cmpltu	r7,r11,r18
 200ab80:	9cd9883a 	add	r12,r19,r19
 200ab84:	01000044 	movi	r4,1
 200ab88:	30cd883a 	add	r6,r6,r3
 200ab8c:	3b0f883a 	add	r7,r7,r12
 200ab90:	423fffc4 	addi	r8,r8,-1
 200ab94:	1013883a 	mov	r9,r2
 200ab98:	3015883a 	mov	r10,r6
 200ab9c:	111ab03a 	or	r13,r2,r4
 200aba0:	98003016 	blt	r19,zero,200ac64 <__muldf3+0x398>
 200aba4:	5825883a 	mov	r18,r11
 200aba8:	3827883a 	mov	r19,r7
 200abac:	7abfef2e 	bgeu	r15,r10,200ab6c <__muldf3+0x2a0>
 200abb0:	da001015 	stw	r8,64(sp)
 200abb4:	00803fc4 	movi	r2,255
 200abb8:	488e703a 	and	r7,r9,r2
 200abbc:	00802004 	movi	r2,128
 200abc0:	0007883a 	mov	r3,zero
 200abc4:	0011883a 	mov	r8,zero
 200abc8:	38801826 	beq	r7,r2,200ac2c <__muldf3+0x360>
 200abcc:	008000c4 	movi	r2,3
 200abd0:	d9000e04 	addi	r4,sp,56
 200abd4:	da801215 	stw	r10,72(sp)
 200abd8:	d8800e15 	stw	r2,56(sp)
 200abdc:	da401115 	stw	r9,68(sp)
 200abe0:	003f6a06 	br	200a98c <__muldf3+0xc0>
 200abe4:	89802126 	beq	r17,r6,200ac6c <__muldf3+0x3a0>
 200abe8:	0009883a 	mov	r4,zero
 200abec:	5105883a 	add	r2,r10,r4
 200abf0:	128d803a 	cmpltu	r6,r2,r10
 200abf4:	5d07883a 	add	r3,r11,r20
 200abf8:	30cd883a 	add	r6,r6,r3
 200abfc:	0021883a 	mov	r16,zero
 200ac00:	0023883a 	mov	r17,zero
 200ac04:	1025883a 	mov	r18,r2
 200ac08:	3027883a 	mov	r19,r6
 200ac0c:	32ff9e2e 	bgeu	r6,r11,200aa88 <__muldf3+0x1bc>
 200ac10:	00800044 	movi	r2,1
 200ac14:	8089883a 	add	r4,r16,r2
 200ac18:	240d803a 	cmpltu	r6,r4,r16
 200ac1c:	344d883a 	add	r6,r6,r17
 200ac20:	2021883a 	mov	r16,r4
 200ac24:	3023883a 	mov	r17,r6
 200ac28:	003f9806 	br	200aa8c <__muldf3+0x1c0>
 200ac2c:	403fe71e 	bne	r8,zero,200abcc <__muldf3+0x300>
 200ac30:	01004004 	movi	r4,256
 200ac34:	4904703a 	and	r2,r9,r4
 200ac38:	10c4b03a 	or	r2,r2,r3
 200ac3c:	103fe31e 	bne	r2,zero,200abcc <__muldf3+0x300>
 200ac40:	94c4b03a 	or	r2,r18,r19
 200ac44:	103fe126 	beq	r2,zero,200abcc <__muldf3+0x300>
 200ac48:	49c5883a 	add	r2,r9,r7
 200ac4c:	1251803a 	cmpltu	r8,r2,r9
 200ac50:	4291883a 	add	r8,r8,r10
 200ac54:	013fc004 	movi	r4,-256
 200ac58:	1112703a 	and	r9,r2,r4
 200ac5c:	4015883a 	mov	r10,r8
 200ac60:	003fda06 	br	200abcc <__muldf3+0x300>
 200ac64:	6813883a 	mov	r9,r13
 200ac68:	003fce06 	br	200aba4 <__muldf3+0x2d8>
 200ac6c:	143f7c36 	bltu	r2,r16,200aa60 <__muldf3+0x194>
 200ac70:	003fdd06 	br	200abe8 <__muldf3+0x31c>
 200ac74:	12bf852e 	bgeu	r2,r10,200aa8c <__muldf3+0x1c0>
 200ac78:	003fe506 	br	200ac10 <__muldf3+0x344>
 200ac7c:	00800084 	movi	r2,2
 200ac80:	20bf351e 	bne	r4,r2,200a958 <__muldf3+0x8c>
 200ac84:	01008074 	movhi	r4,513
 200ac88:	213d8804 	addi	r4,r4,-2528
 200ac8c:	003f3f06 	br	200a98c <__muldf3+0xc0>

0200ac90 <__divdf3>:
 200ac90:	deffed04 	addi	sp,sp,-76
 200ac94:	dcc01115 	stw	r19,68(sp)
 200ac98:	dcc00404 	addi	r19,sp,16
 200ac9c:	2011883a 	mov	r8,r4
 200aca0:	2813883a 	mov	r9,r5
 200aca4:	dc000e15 	stw	r16,56(sp)
 200aca8:	d809883a 	mov	r4,sp
 200acac:	980b883a 	mov	r5,r19
 200acb0:	dc000904 	addi	r16,sp,36
 200acb4:	dfc01215 	stw	ra,72(sp)
 200acb8:	da400115 	stw	r9,4(sp)
 200acbc:	d9c00315 	stw	r7,12(sp)
 200acc0:	da000015 	stw	r8,0(sp)
 200acc4:	d9800215 	stw	r6,8(sp)
 200acc8:	dc801015 	stw	r18,64(sp)
 200accc:	dc400f15 	stw	r17,60(sp)
 200acd0:	20018e00 	call	20018e0 <__unpack_d>
 200acd4:	d9000204 	addi	r4,sp,8
 200acd8:	800b883a 	mov	r5,r16
 200acdc:	20018e00 	call	20018e0 <__unpack_d>
 200ace0:	d9000417 	ldw	r4,16(sp)
 200ace4:	00800044 	movi	r2,1
 200ace8:	11000b2e 	bgeu	r2,r4,200ad18 <__divdf3+0x88>
 200acec:	d9400917 	ldw	r5,36(sp)
 200acf0:	1140762e 	bgeu	r2,r5,200aecc <__divdf3+0x23c>
 200acf4:	d8800517 	ldw	r2,20(sp)
 200acf8:	d8c00a17 	ldw	r3,40(sp)
 200acfc:	01800104 	movi	r6,4
 200ad00:	10c4f03a 	xor	r2,r2,r3
 200ad04:	d8800515 	stw	r2,20(sp)
 200ad08:	21800226 	beq	r4,r6,200ad14 <__divdf3+0x84>
 200ad0c:	00800084 	movi	r2,2
 200ad10:	2080141e 	bne	r4,r2,200ad64 <__divdf3+0xd4>
 200ad14:	29000926 	beq	r5,r4,200ad3c <__divdf3+0xac>
 200ad18:	9809883a 	mov	r4,r19
 200ad1c:	20015cc0 	call	20015cc <__pack_d>
 200ad20:	dfc01217 	ldw	ra,72(sp)
 200ad24:	dcc01117 	ldw	r19,68(sp)
 200ad28:	dc801017 	ldw	r18,64(sp)
 200ad2c:	dc400f17 	ldw	r17,60(sp)
 200ad30:	dc000e17 	ldw	r16,56(sp)
 200ad34:	dec01304 	addi	sp,sp,76
 200ad38:	f800283a 	ret
 200ad3c:	01008074 	movhi	r4,513
 200ad40:	213d8804 	addi	r4,r4,-2528
 200ad44:	20015cc0 	call	20015cc <__pack_d>
 200ad48:	dfc01217 	ldw	ra,72(sp)
 200ad4c:	dcc01117 	ldw	r19,68(sp)
 200ad50:	dc801017 	ldw	r18,64(sp)
 200ad54:	dc400f17 	ldw	r17,60(sp)
 200ad58:	dc000e17 	ldw	r16,56(sp)
 200ad5c:	dec01304 	addi	sp,sp,76
 200ad60:	f800283a 	ret
 200ad64:	29805b26 	beq	r5,r6,200aed4 <__divdf3+0x244>
 200ad68:	28802d26 	beq	r5,r2,200ae20 <__divdf3+0x190>
 200ad6c:	d8c00617 	ldw	r3,24(sp)
 200ad70:	d8800b17 	ldw	r2,44(sp)
 200ad74:	d9c00817 	ldw	r7,32(sp)
 200ad78:	dc400d17 	ldw	r17,52(sp)
 200ad7c:	188bc83a 	sub	r5,r3,r2
 200ad80:	d9800717 	ldw	r6,28(sp)
 200ad84:	dc000c17 	ldw	r16,48(sp)
 200ad88:	d9400615 	stw	r5,24(sp)
 200ad8c:	3c403836 	bltu	r7,r17,200ae70 <__divdf3+0x1e0>
 200ad90:	89c03626 	beq	r17,r7,200ae6c <__divdf3+0x1dc>
 200ad94:	0015883a 	mov	r10,zero
 200ad98:	001d883a 	mov	r14,zero
 200ad9c:	02c40034 	movhi	r11,4096
 200ada0:	001f883a 	mov	r15,zero
 200ada4:	003f883a 	mov	ra,zero
 200ada8:	04800f44 	movi	r18,61
 200adac:	00000f06 	br	200adec <__divdf3+0x15c>
 200adb0:	601d883a 	mov	r14,r12
 200adb4:	681f883a 	mov	r15,r13
 200adb8:	400d883a 	mov	r6,r8
 200adbc:	100f883a 	mov	r7,r2
 200adc0:	3191883a 	add	r8,r6,r6
 200adc4:	5808d07a 	srli	r4,r11,1
 200adc8:	4185803a 	cmpltu	r2,r8,r6
 200adcc:	39d3883a 	add	r9,r7,r7
 200add0:	28c6b03a 	or	r3,r5,r3
 200add4:	1245883a 	add	r2,r2,r9
 200add8:	1815883a 	mov	r10,r3
 200addc:	2017883a 	mov	r11,r4
 200ade0:	400d883a 	mov	r6,r8
 200ade4:	100f883a 	mov	r7,r2
 200ade8:	fc801726 	beq	ra,r18,200ae48 <__divdf3+0x1b8>
 200adec:	580a97fa 	slli	r5,r11,31
 200adf0:	5006d07a 	srli	r3,r10,1
 200adf4:	ffc00044 	addi	ra,ra,1
 200adf8:	3c7ff136 	bltu	r7,r17,200adc0 <__divdf3+0x130>
 200adfc:	3411c83a 	sub	r8,r6,r16
 200ae00:	3205803a 	cmpltu	r2,r6,r8
 200ae04:	3c53c83a 	sub	r9,r7,r17
 200ae08:	7298b03a 	or	r12,r14,r10
 200ae0c:	7adab03a 	or	r13,r15,r11
 200ae10:	4885c83a 	sub	r2,r9,r2
 200ae14:	89ffe61e 	bne	r17,r7,200adb0 <__divdf3+0x120>
 200ae18:	343fe936 	bltu	r6,r16,200adc0 <__divdf3+0x130>
 200ae1c:	003fe406 	br	200adb0 <__divdf3+0x120>
 200ae20:	9809883a 	mov	r4,r19
 200ae24:	d9800415 	stw	r6,16(sp)
 200ae28:	20015cc0 	call	20015cc <__pack_d>
 200ae2c:	dfc01217 	ldw	ra,72(sp)
 200ae30:	dcc01117 	ldw	r19,68(sp)
 200ae34:	dc801017 	ldw	r18,64(sp)
 200ae38:	dc400f17 	ldw	r17,60(sp)
 200ae3c:	dc000e17 	ldw	r16,56(sp)
 200ae40:	dec01304 	addi	sp,sp,76
 200ae44:	f800283a 	ret
 200ae48:	00803fc4 	movi	r2,255
 200ae4c:	7090703a 	and	r8,r14,r2
 200ae50:	00802004 	movi	r2,128
 200ae54:	0007883a 	mov	r3,zero
 200ae58:	0013883a 	mov	r9,zero
 200ae5c:	40800d26 	beq	r8,r2,200ae94 <__divdf3+0x204>
 200ae60:	dbc00815 	stw	r15,32(sp)
 200ae64:	db800715 	stw	r14,28(sp)
 200ae68:	003fab06 	br	200ad18 <__divdf3+0x88>
 200ae6c:	343fc92e 	bgeu	r6,r16,200ad94 <__divdf3+0x104>
 200ae70:	3185883a 	add	r2,r6,r6
 200ae74:	1189803a 	cmpltu	r4,r2,r6
 200ae78:	39c7883a 	add	r3,r7,r7
 200ae7c:	20c9883a 	add	r4,r4,r3
 200ae80:	297fffc4 	addi	r5,r5,-1
 200ae84:	100d883a 	mov	r6,r2
 200ae88:	200f883a 	mov	r7,r4
 200ae8c:	d9400615 	stw	r5,24(sp)
 200ae90:	003fc006 	br	200ad94 <__divdf3+0x104>
 200ae94:	483ff21e 	bne	r9,zero,200ae60 <__divdf3+0x1d0>
 200ae98:	01004004 	movi	r4,256
 200ae9c:	7104703a 	and	r2,r14,r4
 200aea0:	10c4b03a 	or	r2,r2,r3
 200aea4:	103fee1e 	bne	r2,zero,200ae60 <__divdf3+0x1d0>
 200aea8:	31c4b03a 	or	r2,r6,r7
 200aeac:	103fec26 	beq	r2,zero,200ae60 <__divdf3+0x1d0>
 200aeb0:	7205883a 	add	r2,r14,r8
 200aeb4:	1391803a 	cmpltu	r8,r2,r14
 200aeb8:	43d1883a 	add	r8,r8,r15
 200aebc:	013fc004 	movi	r4,-256
 200aec0:	111c703a 	and	r14,r2,r4
 200aec4:	401f883a 	mov	r15,r8
 200aec8:	003fe506 	br	200ae60 <__divdf3+0x1d0>
 200aecc:	8009883a 	mov	r4,r16
 200aed0:	003f9206 	br	200ad1c <__divdf3+0x8c>
 200aed4:	9809883a 	mov	r4,r19
 200aed8:	d8000715 	stw	zero,28(sp)
 200aedc:	d8000815 	stw	zero,32(sp)
 200aee0:	d8000615 	stw	zero,24(sp)
 200aee4:	003f8d06 	br	200ad1c <__divdf3+0x8c>

0200aee8 <__eqdf2>:
 200aee8:	deffef04 	addi	sp,sp,-68
 200aeec:	dc400f15 	stw	r17,60(sp)
 200aef0:	dc400404 	addi	r17,sp,16
 200aef4:	2005883a 	mov	r2,r4
 200aef8:	2807883a 	mov	r3,r5
 200aefc:	dc000e15 	stw	r16,56(sp)
 200af00:	d809883a 	mov	r4,sp
 200af04:	880b883a 	mov	r5,r17
 200af08:	dc000904 	addi	r16,sp,36
 200af0c:	d8c00115 	stw	r3,4(sp)
 200af10:	d8800015 	stw	r2,0(sp)
 200af14:	d9800215 	stw	r6,8(sp)
 200af18:	dfc01015 	stw	ra,64(sp)
 200af1c:	d9c00315 	stw	r7,12(sp)
 200af20:	20018e00 	call	20018e0 <__unpack_d>
 200af24:	d9000204 	addi	r4,sp,8
 200af28:	800b883a 	mov	r5,r16
 200af2c:	20018e00 	call	20018e0 <__unpack_d>
 200af30:	d8800417 	ldw	r2,16(sp)
 200af34:	00c00044 	movi	r3,1
 200af38:	180d883a 	mov	r6,r3
 200af3c:	1880062e 	bgeu	r3,r2,200af58 <__eqdf2+0x70>
 200af40:	d8800917 	ldw	r2,36(sp)
 200af44:	8809883a 	mov	r4,r17
 200af48:	800b883a 	mov	r5,r16
 200af4c:	1880022e 	bgeu	r3,r2,200af58 <__eqdf2+0x70>
 200af50:	2001a180 	call	2001a18 <__fpcmp_parts_d>
 200af54:	100d883a 	mov	r6,r2
 200af58:	3005883a 	mov	r2,r6
 200af5c:	dfc01017 	ldw	ra,64(sp)
 200af60:	dc400f17 	ldw	r17,60(sp)
 200af64:	dc000e17 	ldw	r16,56(sp)
 200af68:	dec01104 	addi	sp,sp,68
 200af6c:	f800283a 	ret

0200af70 <__nedf2>:
 200af70:	deffef04 	addi	sp,sp,-68
 200af74:	dc400f15 	stw	r17,60(sp)
 200af78:	dc400404 	addi	r17,sp,16
 200af7c:	2005883a 	mov	r2,r4
 200af80:	2807883a 	mov	r3,r5
 200af84:	dc000e15 	stw	r16,56(sp)
 200af88:	d809883a 	mov	r4,sp
 200af8c:	880b883a 	mov	r5,r17
 200af90:	dc000904 	addi	r16,sp,36
 200af94:	d8c00115 	stw	r3,4(sp)
 200af98:	d8800015 	stw	r2,0(sp)
 200af9c:	d9800215 	stw	r6,8(sp)
 200afa0:	dfc01015 	stw	ra,64(sp)
 200afa4:	d9c00315 	stw	r7,12(sp)
 200afa8:	20018e00 	call	20018e0 <__unpack_d>
 200afac:	d9000204 	addi	r4,sp,8
 200afb0:	800b883a 	mov	r5,r16
 200afb4:	20018e00 	call	20018e0 <__unpack_d>
 200afb8:	d8800417 	ldw	r2,16(sp)
 200afbc:	00c00044 	movi	r3,1
 200afc0:	180d883a 	mov	r6,r3
 200afc4:	1880062e 	bgeu	r3,r2,200afe0 <__nedf2+0x70>
 200afc8:	d8800917 	ldw	r2,36(sp)
 200afcc:	8809883a 	mov	r4,r17
 200afd0:	800b883a 	mov	r5,r16
 200afd4:	1880022e 	bgeu	r3,r2,200afe0 <__nedf2+0x70>
 200afd8:	2001a180 	call	2001a18 <__fpcmp_parts_d>
 200afdc:	100d883a 	mov	r6,r2
 200afe0:	3005883a 	mov	r2,r6
 200afe4:	dfc01017 	ldw	ra,64(sp)
 200afe8:	dc400f17 	ldw	r17,60(sp)
 200afec:	dc000e17 	ldw	r16,56(sp)
 200aff0:	dec01104 	addi	sp,sp,68
 200aff4:	f800283a 	ret

0200aff8 <__gtdf2>:
 200aff8:	deffef04 	addi	sp,sp,-68
 200affc:	dc400f15 	stw	r17,60(sp)
 200b000:	dc400404 	addi	r17,sp,16
 200b004:	2005883a 	mov	r2,r4
 200b008:	2807883a 	mov	r3,r5
 200b00c:	dc000e15 	stw	r16,56(sp)
 200b010:	d809883a 	mov	r4,sp
 200b014:	880b883a 	mov	r5,r17
 200b018:	dc000904 	addi	r16,sp,36
 200b01c:	d8c00115 	stw	r3,4(sp)
 200b020:	d8800015 	stw	r2,0(sp)
 200b024:	d9800215 	stw	r6,8(sp)
 200b028:	dfc01015 	stw	ra,64(sp)
 200b02c:	d9c00315 	stw	r7,12(sp)
 200b030:	20018e00 	call	20018e0 <__unpack_d>
 200b034:	d9000204 	addi	r4,sp,8
 200b038:	800b883a 	mov	r5,r16
 200b03c:	20018e00 	call	20018e0 <__unpack_d>
 200b040:	d8800417 	ldw	r2,16(sp)
 200b044:	00c00044 	movi	r3,1
 200b048:	01bfffc4 	movi	r6,-1
 200b04c:	1880062e 	bgeu	r3,r2,200b068 <__gtdf2+0x70>
 200b050:	d8800917 	ldw	r2,36(sp)
 200b054:	8809883a 	mov	r4,r17
 200b058:	800b883a 	mov	r5,r16
 200b05c:	1880022e 	bgeu	r3,r2,200b068 <__gtdf2+0x70>
 200b060:	2001a180 	call	2001a18 <__fpcmp_parts_d>
 200b064:	100d883a 	mov	r6,r2
 200b068:	3005883a 	mov	r2,r6
 200b06c:	dfc01017 	ldw	ra,64(sp)
 200b070:	dc400f17 	ldw	r17,60(sp)
 200b074:	dc000e17 	ldw	r16,56(sp)
 200b078:	dec01104 	addi	sp,sp,68
 200b07c:	f800283a 	ret

0200b080 <__gedf2>:
 200b080:	deffef04 	addi	sp,sp,-68
 200b084:	dc400f15 	stw	r17,60(sp)
 200b088:	dc400404 	addi	r17,sp,16
 200b08c:	2005883a 	mov	r2,r4
 200b090:	2807883a 	mov	r3,r5
 200b094:	dc000e15 	stw	r16,56(sp)
 200b098:	d809883a 	mov	r4,sp
 200b09c:	880b883a 	mov	r5,r17
 200b0a0:	dc000904 	addi	r16,sp,36
 200b0a4:	d8c00115 	stw	r3,4(sp)
 200b0a8:	d8800015 	stw	r2,0(sp)
 200b0ac:	d9800215 	stw	r6,8(sp)
 200b0b0:	dfc01015 	stw	ra,64(sp)
 200b0b4:	d9c00315 	stw	r7,12(sp)
 200b0b8:	20018e00 	call	20018e0 <__unpack_d>
 200b0bc:	d9000204 	addi	r4,sp,8
 200b0c0:	800b883a 	mov	r5,r16
 200b0c4:	20018e00 	call	20018e0 <__unpack_d>
 200b0c8:	d8800417 	ldw	r2,16(sp)
 200b0cc:	00c00044 	movi	r3,1
 200b0d0:	01bfffc4 	movi	r6,-1
 200b0d4:	1880062e 	bgeu	r3,r2,200b0f0 <__gedf2+0x70>
 200b0d8:	d8800917 	ldw	r2,36(sp)
 200b0dc:	8809883a 	mov	r4,r17
 200b0e0:	800b883a 	mov	r5,r16
 200b0e4:	1880022e 	bgeu	r3,r2,200b0f0 <__gedf2+0x70>
 200b0e8:	2001a180 	call	2001a18 <__fpcmp_parts_d>
 200b0ec:	100d883a 	mov	r6,r2
 200b0f0:	3005883a 	mov	r2,r6
 200b0f4:	dfc01017 	ldw	ra,64(sp)
 200b0f8:	dc400f17 	ldw	r17,60(sp)
 200b0fc:	dc000e17 	ldw	r16,56(sp)
 200b100:	dec01104 	addi	sp,sp,68
 200b104:	f800283a 	ret

0200b108 <__fixdfsi>:
 200b108:	defff804 	addi	sp,sp,-32
 200b10c:	2005883a 	mov	r2,r4
 200b110:	2807883a 	mov	r3,r5
 200b114:	d809883a 	mov	r4,sp
 200b118:	d9400204 	addi	r5,sp,8
 200b11c:	d8c00115 	stw	r3,4(sp)
 200b120:	d8800015 	stw	r2,0(sp)
 200b124:	dfc00715 	stw	ra,28(sp)
 200b128:	20018e00 	call	20018e0 <__unpack_d>
 200b12c:	d8c00217 	ldw	r3,8(sp)
 200b130:	00800084 	movi	r2,2
 200b134:	1880051e 	bne	r3,r2,200b14c <__fixdfsi+0x44>
 200b138:	0007883a 	mov	r3,zero
 200b13c:	1805883a 	mov	r2,r3
 200b140:	dfc00717 	ldw	ra,28(sp)
 200b144:	dec00804 	addi	sp,sp,32
 200b148:	f800283a 	ret
 200b14c:	00800044 	movi	r2,1
 200b150:	10fff92e 	bgeu	r2,r3,200b138 <__fixdfsi+0x30>
 200b154:	00800104 	movi	r2,4
 200b158:	18800426 	beq	r3,r2,200b16c <__fixdfsi+0x64>
 200b15c:	d8c00417 	ldw	r3,16(sp)
 200b160:	183ff516 	blt	r3,zero,200b138 <__fixdfsi+0x30>
 200b164:	00800784 	movi	r2,30
 200b168:	10c0080e 	bge	r2,r3,200b18c <__fixdfsi+0x84>
 200b16c:	d8800317 	ldw	r2,12(sp)
 200b170:	1000121e 	bne	r2,zero,200b1bc <__fixdfsi+0xb4>
 200b174:	00e00034 	movhi	r3,32768
 200b178:	18ffffc4 	addi	r3,r3,-1
 200b17c:	1805883a 	mov	r2,r3
 200b180:	dfc00717 	ldw	ra,28(sp)
 200b184:	dec00804 	addi	sp,sp,32
 200b188:	f800283a 	ret
 200b18c:	00800f04 	movi	r2,60
 200b190:	10d1c83a 	sub	r8,r2,r3
 200b194:	40bff804 	addi	r2,r8,-32
 200b198:	d9800517 	ldw	r6,20(sp)
 200b19c:	d9c00617 	ldw	r7,24(sp)
 200b1a0:	10000816 	blt	r2,zero,200b1c4 <__fixdfsi+0xbc>
 200b1a4:	3888d83a 	srl	r4,r7,r2
 200b1a8:	d8800317 	ldw	r2,12(sp)
 200b1ac:	2007883a 	mov	r3,r4
 200b1b0:	103fe226 	beq	r2,zero,200b13c <__fixdfsi+0x34>
 200b1b4:	0107c83a 	sub	r3,zero,r4
 200b1b8:	003fe006 	br	200b13c <__fixdfsi+0x34>
 200b1bc:	00e00034 	movhi	r3,32768
 200b1c0:	003fde06 	br	200b13c <__fixdfsi+0x34>
 200b1c4:	39c7883a 	add	r3,r7,r7
 200b1c8:	008007c4 	movi	r2,31
 200b1cc:	1205c83a 	sub	r2,r2,r8
 200b1d0:	1886983a 	sll	r3,r3,r2
 200b1d4:	3208d83a 	srl	r4,r6,r8
 200b1d8:	1908b03a 	or	r4,r3,r4
 200b1dc:	003ff206 	br	200b1a8 <__fixdfsi+0xa0>

0200b1e0 <__floatunsidf>:
 200b1e0:	defff204 	addi	sp,sp,-56
 200b1e4:	dfc00d15 	stw	ra,52(sp)
 200b1e8:	ddc00c15 	stw	r23,48(sp)
 200b1ec:	dd800b15 	stw	r22,44(sp)
 200b1f0:	dd400a15 	stw	r21,40(sp)
 200b1f4:	dd000915 	stw	r20,36(sp)
 200b1f8:	dcc00815 	stw	r19,32(sp)
 200b1fc:	dc800715 	stw	r18,28(sp)
 200b200:	dc400615 	stw	r17,24(sp)
 200b204:	dc000515 	stw	r16,20(sp)
 200b208:	d8000115 	stw	zero,4(sp)
 200b20c:	20000f1e 	bne	r4,zero,200b24c <__floatunsidf+0x6c>
 200b210:	00800084 	movi	r2,2
 200b214:	d8800015 	stw	r2,0(sp)
 200b218:	d809883a 	mov	r4,sp
 200b21c:	20015cc0 	call	20015cc <__pack_d>
 200b220:	dfc00d17 	ldw	ra,52(sp)
 200b224:	ddc00c17 	ldw	r23,48(sp)
 200b228:	dd800b17 	ldw	r22,44(sp)
 200b22c:	dd400a17 	ldw	r21,40(sp)
 200b230:	dd000917 	ldw	r20,36(sp)
 200b234:	dcc00817 	ldw	r19,32(sp)
 200b238:	dc800717 	ldw	r18,28(sp)
 200b23c:	dc400617 	ldw	r17,24(sp)
 200b240:	dc000517 	ldw	r16,20(sp)
 200b244:	dec00e04 	addi	sp,sp,56
 200b248:	f800283a 	ret
 200b24c:	008000c4 	movi	r2,3
 200b250:	00c00f04 	movi	r3,60
 200b254:	002f883a 	mov	r23,zero
 200b258:	202d883a 	mov	r22,r4
 200b25c:	d8800015 	stw	r2,0(sp)
 200b260:	d8c00215 	stw	r3,8(sp)
 200b264:	d9000315 	stw	r4,12(sp)
 200b268:	ddc00415 	stw	r23,16(sp)
 200b26c:	200127c0 	call	200127c <__clzsi2>
 200b270:	12400744 	addi	r9,r2,29
 200b274:	48000b16 	blt	r9,zero,200b2a4 <__floatunsidf+0xc4>
 200b278:	483fe726 	beq	r9,zero,200b218 <__floatunsidf+0x38>
 200b27c:	10bfff44 	addi	r2,r2,-3
 200b280:	10002e16 	blt	r2,zero,200b33c <__floatunsidf+0x15c>
 200b284:	b0a2983a 	sll	r17,r22,r2
 200b288:	0021883a 	mov	r16,zero
 200b28c:	d8800217 	ldw	r2,8(sp)
 200b290:	dc400415 	stw	r17,16(sp)
 200b294:	dc000315 	stw	r16,12(sp)
 200b298:	1245c83a 	sub	r2,r2,r9
 200b29c:	d8800215 	stw	r2,8(sp)
 200b2a0:	003fdd06 	br	200b218 <__floatunsidf+0x38>
 200b2a4:	0255c83a 	sub	r10,zero,r9
 200b2a8:	51bff804 	addi	r6,r10,-32
 200b2ac:	30001b16 	blt	r6,zero,200b31c <__floatunsidf+0x13c>
 200b2b0:	b9a8d83a 	srl	r20,r23,r6
 200b2b4:	002b883a 	mov	r21,zero
 200b2b8:	000f883a 	mov	r7,zero
 200b2bc:	01000044 	movi	r4,1
 200b2c0:	0011883a 	mov	r8,zero
 200b2c4:	30002516 	blt	r6,zero,200b35c <__floatunsidf+0x17c>
 200b2c8:	21a6983a 	sll	r19,r4,r6
 200b2cc:	0025883a 	mov	r18,zero
 200b2d0:	00bfffc4 	movi	r2,-1
 200b2d4:	9089883a 	add	r4,r18,r2
 200b2d8:	988b883a 	add	r5,r19,r2
 200b2dc:	248d803a 	cmpltu	r6,r4,r18
 200b2e0:	314b883a 	add	r5,r6,r5
 200b2e4:	b104703a 	and	r2,r22,r4
 200b2e8:	b946703a 	and	r3,r23,r5
 200b2ec:	10c4b03a 	or	r2,r2,r3
 200b2f0:	10000226 	beq	r2,zero,200b2fc <__floatunsidf+0x11c>
 200b2f4:	01c00044 	movi	r7,1
 200b2f8:	0011883a 	mov	r8,zero
 200b2fc:	d9000217 	ldw	r4,8(sp)
 200b300:	a1c4b03a 	or	r2,r20,r7
 200b304:	aa06b03a 	or	r3,r21,r8
 200b308:	2249c83a 	sub	r4,r4,r9
 200b30c:	d8c00415 	stw	r3,16(sp)
 200b310:	d9000215 	stw	r4,8(sp)
 200b314:	d8800315 	stw	r2,12(sp)
 200b318:	003fbf06 	br	200b218 <__floatunsidf+0x38>
 200b31c:	bdc7883a 	add	r3,r23,r23
 200b320:	008007c4 	movi	r2,31
 200b324:	1285c83a 	sub	r2,r2,r10
 200b328:	1886983a 	sll	r3,r3,r2
 200b32c:	b2a8d83a 	srl	r20,r22,r10
 200b330:	baaad83a 	srl	r21,r23,r10
 200b334:	1d28b03a 	or	r20,r3,r20
 200b338:	003fdf06 	br	200b2b8 <__floatunsidf+0xd8>
 200b33c:	b006d07a 	srli	r3,r22,1
 200b340:	008007c4 	movi	r2,31
 200b344:	1245c83a 	sub	r2,r2,r9
 200b348:	1886d83a 	srl	r3,r3,r2
 200b34c:	ba62983a 	sll	r17,r23,r9
 200b350:	b260983a 	sll	r16,r22,r9
 200b354:	1c62b03a 	or	r17,r3,r17
 200b358:	003fcc06 	br	200b28c <__floatunsidf+0xac>
 200b35c:	2006d07a 	srli	r3,r4,1
 200b360:	008007c4 	movi	r2,31
 200b364:	1285c83a 	sub	r2,r2,r10
 200b368:	18a6d83a 	srl	r19,r3,r2
 200b36c:	22a4983a 	sll	r18,r4,r10
 200b370:	003fd706 	br	200b2d0 <__floatunsidf+0xf0>

0200b374 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200b374:	defff804 	addi	sp,sp,-32
 200b378:	dfc00715 	stw	ra,28(sp)
 200b37c:	df000615 	stw	fp,24(sp)
 200b380:	df000604 	addi	fp,sp,24
 200b384:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200b388:	e0bffc17 	ldw	r2,-16(fp)
 200b38c:	1004803a 	cmplt	r2,r2,zero
 200b390:	1000081e 	bne	r2,zero,200b3b4 <close+0x40>
 200b394:	e0bffc17 	ldw	r2,-16(fp)
 200b398:	10800324 	muli	r2,r2,12
 200b39c:	1007883a 	mov	r3,r2
 200b3a0:	00808074 	movhi	r2,513
 200b3a4:	10804f04 	addi	r2,r2,316
 200b3a8:	1887883a 	add	r3,r3,r2
 200b3ac:	e0ffff15 	stw	r3,-4(fp)
 200b3b0:	00000106 	br	200b3b8 <close+0x44>
 200b3b4:	e03fff15 	stw	zero,-4(fp)
 200b3b8:	e0bfff17 	ldw	r2,-4(fp)
 200b3bc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 200b3c0:	e0bffb17 	ldw	r2,-20(fp)
 200b3c4:	1005003a 	cmpeq	r2,r2,zero
 200b3c8:	10001d1e 	bne	r2,zero,200b440 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200b3cc:	e0bffb17 	ldw	r2,-20(fp)
 200b3d0:	10800017 	ldw	r2,0(r2)
 200b3d4:	10800417 	ldw	r2,16(r2)
 200b3d8:	1005003a 	cmpeq	r2,r2,zero
 200b3dc:	1000071e 	bne	r2,zero,200b3fc <close+0x88>
 200b3e0:	e0bffb17 	ldw	r2,-20(fp)
 200b3e4:	10800017 	ldw	r2,0(r2)
 200b3e8:	10800417 	ldw	r2,16(r2)
 200b3ec:	e13ffb17 	ldw	r4,-20(fp)
 200b3f0:	103ee83a 	callr	r2
 200b3f4:	e0bffe15 	stw	r2,-8(fp)
 200b3f8:	00000106 	br	200b400 <close+0x8c>
 200b3fc:	e03ffe15 	stw	zero,-8(fp)
 200b400:	e0bffe17 	ldw	r2,-8(fp)
 200b404:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200b408:	e13ffc17 	ldw	r4,-16(fp)
 200b40c:	200c0980 	call	200c098 <alt_release_fd>
    if (rval < 0)
 200b410:	e0bffa17 	ldw	r2,-24(fp)
 200b414:	1004403a 	cmpge	r2,r2,zero
 200b418:	1000071e 	bne	r2,zero,200b438 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 200b41c:	200b4700 	call	200b470 <alt_get_errno>
 200b420:	e0fffa17 	ldw	r3,-24(fp)
 200b424:	00c7c83a 	sub	r3,zero,r3
 200b428:	10c00015 	stw	r3,0(r2)
      return -1;
 200b42c:	00bfffc4 	movi	r2,-1
 200b430:	e0bffd15 	stw	r2,-12(fp)
 200b434:	00000806 	br	200b458 <close+0xe4>
    }
    return 0;
 200b438:	e03ffd15 	stw	zero,-12(fp)
 200b43c:	00000606 	br	200b458 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200b440:	200b4700 	call	200b470 <alt_get_errno>
 200b444:	1007883a 	mov	r3,r2
 200b448:	00801444 	movi	r2,81
 200b44c:	18800015 	stw	r2,0(r3)
    return -1;
 200b450:	00bfffc4 	movi	r2,-1
 200b454:	e0bffd15 	stw	r2,-12(fp)
 200b458:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 200b45c:	e037883a 	mov	sp,fp
 200b460:	dfc00117 	ldw	ra,4(sp)
 200b464:	df000017 	ldw	fp,0(sp)
 200b468:	dec00204 	addi	sp,sp,8
 200b46c:	f800283a 	ret

0200b470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200b470:	defffd04 	addi	sp,sp,-12
 200b474:	dfc00215 	stw	ra,8(sp)
 200b478:	df000115 	stw	fp,4(sp)
 200b47c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200b480:	00808074 	movhi	r2,513
 200b484:	10851a04 	addi	r2,r2,5224
 200b488:	10800017 	ldw	r2,0(r2)
 200b48c:	1005003a 	cmpeq	r2,r2,zero
 200b490:	1000061e 	bne	r2,zero,200b4ac <alt_get_errno+0x3c>
 200b494:	00808074 	movhi	r2,513
 200b498:	10851a04 	addi	r2,r2,5224
 200b49c:	10800017 	ldw	r2,0(r2)
 200b4a0:	103ee83a 	callr	r2
 200b4a4:	e0bfff15 	stw	r2,-4(fp)
 200b4a8:	00000306 	br	200b4b8 <alt_get_errno+0x48>
 200b4ac:	00808074 	movhi	r2,513
 200b4b0:	108c0604 	addi	r2,r2,12312
 200b4b4:	e0bfff15 	stw	r2,-4(fp)
 200b4b8:	e0bfff17 	ldw	r2,-4(fp)
}
 200b4bc:	e037883a 	mov	sp,fp
 200b4c0:	dfc00117 	ldw	ra,4(sp)
 200b4c4:	df000017 	ldw	fp,0(sp)
 200b4c8:	dec00204 	addi	sp,sp,8
 200b4cc:	f800283a 	ret

0200b4d0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200b4d0:	defffc04 	addi	sp,sp,-16
 200b4d4:	df000315 	stw	fp,12(sp)
 200b4d8:	df000304 	addi	fp,sp,12
 200b4dc:	e13ffd15 	stw	r4,-12(fp)
 200b4e0:	e17ffe15 	stw	r5,-8(fp)
 200b4e4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200b4e8:	e0bfff17 	ldw	r2,-4(fp)
}
 200b4ec:	e037883a 	mov	sp,fp
 200b4f0:	df000017 	ldw	fp,0(sp)
 200b4f4:	dec00104 	addi	sp,sp,4
 200b4f8:	f800283a 	ret

0200b4fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 200b4fc:	defff904 	addi	sp,sp,-28
 200b500:	dfc00615 	stw	ra,24(sp)
 200b504:	df000515 	stw	fp,20(sp)
 200b508:	df000504 	addi	fp,sp,20
 200b50c:	e13ffc15 	stw	r4,-16(fp)
 200b510:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200b514:	e0bffc17 	ldw	r2,-16(fp)
 200b518:	1004803a 	cmplt	r2,r2,zero
 200b51c:	1000081e 	bne	r2,zero,200b540 <fstat+0x44>
 200b520:	e0bffc17 	ldw	r2,-16(fp)
 200b524:	10800324 	muli	r2,r2,12
 200b528:	1007883a 	mov	r3,r2
 200b52c:	00808074 	movhi	r2,513
 200b530:	10804f04 	addi	r2,r2,316
 200b534:	1887883a 	add	r3,r3,r2
 200b538:	e0ffff15 	stw	r3,-4(fp)
 200b53c:	00000106 	br	200b544 <fstat+0x48>
 200b540:	e03fff15 	stw	zero,-4(fp)
 200b544:	e0bfff17 	ldw	r2,-4(fp)
 200b548:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200b54c:	e0bffb17 	ldw	r2,-20(fp)
 200b550:	1005003a 	cmpeq	r2,r2,zero
 200b554:	1000121e 	bne	r2,zero,200b5a0 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200b558:	e0bffb17 	ldw	r2,-20(fp)
 200b55c:	10800017 	ldw	r2,0(r2)
 200b560:	10800817 	ldw	r2,32(r2)
 200b564:	1005003a 	cmpeq	r2,r2,zero
 200b568:	1000081e 	bne	r2,zero,200b58c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 200b56c:	e0bffb17 	ldw	r2,-20(fp)
 200b570:	10800017 	ldw	r2,0(r2)
 200b574:	10800817 	ldw	r2,32(r2)
 200b578:	e13ffb17 	ldw	r4,-20(fp)
 200b57c:	e17ffd17 	ldw	r5,-12(fp)
 200b580:	103ee83a 	callr	r2
 200b584:	e0bffe15 	stw	r2,-8(fp)
 200b588:	00000b06 	br	200b5b8 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 200b58c:	e0fffd17 	ldw	r3,-12(fp)
 200b590:	00880004 	movi	r2,8192
 200b594:	18800115 	stw	r2,4(r3)
      return 0;
 200b598:	e03ffe15 	stw	zero,-8(fp)
 200b59c:	00000606 	br	200b5b8 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200b5a0:	200b5d00 	call	200b5d0 <alt_get_errno>
 200b5a4:	1007883a 	mov	r3,r2
 200b5a8:	00801444 	movi	r2,81
 200b5ac:	18800015 	stw	r2,0(r3)
    return -1;
 200b5b0:	00bfffc4 	movi	r2,-1
 200b5b4:	e0bffe15 	stw	r2,-8(fp)
 200b5b8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 200b5bc:	e037883a 	mov	sp,fp
 200b5c0:	dfc00117 	ldw	ra,4(sp)
 200b5c4:	df000017 	ldw	fp,0(sp)
 200b5c8:	dec00204 	addi	sp,sp,8
 200b5cc:	f800283a 	ret

0200b5d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200b5d0:	defffd04 	addi	sp,sp,-12
 200b5d4:	dfc00215 	stw	ra,8(sp)
 200b5d8:	df000115 	stw	fp,4(sp)
 200b5dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200b5e0:	00808074 	movhi	r2,513
 200b5e4:	10851a04 	addi	r2,r2,5224
 200b5e8:	10800017 	ldw	r2,0(r2)
 200b5ec:	1005003a 	cmpeq	r2,r2,zero
 200b5f0:	1000061e 	bne	r2,zero,200b60c <alt_get_errno+0x3c>
 200b5f4:	00808074 	movhi	r2,513
 200b5f8:	10851a04 	addi	r2,r2,5224
 200b5fc:	10800017 	ldw	r2,0(r2)
 200b600:	103ee83a 	callr	r2
 200b604:	e0bfff15 	stw	r2,-4(fp)
 200b608:	00000306 	br	200b618 <alt_get_errno+0x48>
 200b60c:	00808074 	movhi	r2,513
 200b610:	108c0604 	addi	r2,r2,12312
 200b614:	e0bfff15 	stw	r2,-4(fp)
 200b618:	e0bfff17 	ldw	r2,-4(fp)
}
 200b61c:	e037883a 	mov	sp,fp
 200b620:	dfc00117 	ldw	ra,4(sp)
 200b624:	df000017 	ldw	fp,0(sp)
 200b628:	dec00204 	addi	sp,sp,8
 200b62c:	f800283a 	ret

0200b630 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 200b630:	defff504 	addi	sp,sp,-44
 200b634:	dfc00a15 	stw	ra,40(sp)
 200b638:	df000915 	stw	fp,36(sp)
 200b63c:	dc800815 	stw	r18,32(sp)
 200b640:	dc400715 	stw	r17,28(sp)
 200b644:	dc000615 	stw	r16,24(sp)
 200b648:	df000604 	addi	fp,sp,24
 200b64c:	e13ffd15 	stw	r4,-12(fp)
 200b650:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 200b654:	e0bffe17 	ldw	r2,-8(fp)
 200b658:	e0bffc15 	stw	r2,-16(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 200b65c:	00808074 	movhi	r2,513
 200b660:	108c1504 	addi	r2,r2,12372
 200b664:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 200b668:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200b66c:	00808074 	movhi	r2,513
 200b670:	108c1404 	addi	r2,r2,12368
 200b674:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
 200b678:	e0bffa15 	stw	r2,-24(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 200b67c:	e0bffa17 	ldw	r2,-24(fp)
 200b680:	1005003a 	cmpeq	r2,r2,zero
 200b684:	1000661e 	bne	r2,zero,200b820 <gettimeofday+0x1f0>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 200b688:	d0a70017 	ldw	r2,-25600(gp)
 200b68c:	1021883a 	mov	r16,r2
 200b690:	e13ffb17 	ldw	r4,-20(fp)
 200b694:	e17ffa17 	ldw	r5,-24(fp)
 200b698:	20011d40 	call	20011d4 <__udivsi3>
 200b69c:	8085883a 	add	r2,r16,r2
 200b6a0:	1007883a 	mov	r3,r2
 200b6a4:	e0bffd17 	ldw	r2,-12(fp)
 200b6a8:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 200b6ac:	00808074 	movhi	r2,513
 200b6b0:	108c1004 	addi	r2,r2,12352
 200b6b4:	10800017 	ldw	r2,0(r2)
 200b6b8:	1025883a 	mov	r18,r2
 200b6bc:	e43ffb17 	ldw	r16,-20(fp)
 200b6c0:	0023883a 	mov	r17,zero
 200b6c4:	010003f4 	movhi	r4,15
 200b6c8:	21109004 	addi	r4,r4,16960
 200b6cc:	e17ffa17 	ldw	r5,-24(fp)
 200b6d0:	20011d40 	call	20011d4 <__udivsi3>
 200b6d4:	1009883a 	mov	r4,r2
 200b6d8:	2005883a 	mov	r2,r4
 200b6dc:	0007883a 	mov	r3,zero
 200b6e0:	8009883a 	mov	r4,r16
 200b6e4:	880b883a 	mov	r5,r17
 200b6e8:	100d883a 	mov	r6,r2
 200b6ec:	180f883a 	mov	r7,r3
 200b6f0:	20011e40 	call	20011e4 <__muldi3>
 200b6f4:	1009883a 	mov	r4,r2
 200b6f8:	180b883a 	mov	r5,r3
 200b6fc:	2005883a 	mov	r2,r4
 200b700:	2807883a 	mov	r3,r5
 200b704:	1009883a 	mov	r4,r2
 200b708:	180b883a 	mov	r5,r3
 200b70c:	018003f4 	movhi	r6,15
 200b710:	31909004 	addi	r6,r6,16960
 200b714:	000f883a 	mov	r7,zero
 200b718:	2009e180 	call	2009e18 <__umoddi3>
 200b71c:	1009883a 	mov	r4,r2
 200b720:	180b883a 	mov	r5,r3
 200b724:	2005883a 	mov	r2,r4
 200b728:	2807883a 	mov	r3,r5
 200b72c:	9085883a 	add	r2,r18,r2
 200b730:	1007883a 	mov	r3,r2
 200b734:	e0bffd17 	ldw	r2,-12(fp)
 200b738:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 200b73c:	00001506 	br	200b794 <gettimeofday+0x164>
      if (ptimeval->tv_sec <= 0)
 200b740:	e0bffd17 	ldw	r2,-12(fp)
 200b744:	10800017 	ldw	r2,0(r2)
 200b748:	10800048 	cmpgei	r2,r2,1
 200b74c:	1000051e 	bne	r2,zero,200b764 <gettimeofday+0x134>
      {
          ptimeval->tv_sec = 0;
 200b750:	e0bffd17 	ldw	r2,-12(fp)
 200b754:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 200b758:	e0bffd17 	ldw	r2,-12(fp)
 200b75c:	10000115 	stw	zero,4(r2)
          break;
 200b760:	00001d06 	br	200b7d8 <gettimeofday+0x1a8>
      }
      else
      {
          ptimeval->tv_sec--;
 200b764:	e0bffd17 	ldw	r2,-12(fp)
 200b768:	10800017 	ldw	r2,0(r2)
 200b76c:	10ffffc4 	addi	r3,r2,-1
 200b770:	e0bffd17 	ldw	r2,-12(fp)
 200b774:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 200b778:	e0bffd17 	ldw	r2,-12(fp)
 200b77c:	10c00117 	ldw	r3,4(r2)
 200b780:	008003f4 	movhi	r2,15
 200b784:	10909004 	addi	r2,r2,16960
 200b788:	1887883a 	add	r3,r3,r2
 200b78c:	e0bffd17 	ldw	r2,-12(fp)
 200b790:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 200b794:	e0bffd17 	ldw	r2,-12(fp)
 200b798:	10800117 	ldw	r2,4(r2)
 200b79c:	1004803a 	cmplt	r2,r2,zero
 200b7a0:	103fe71e 	bne	r2,zero,200b740 <gettimeofday+0x110>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 200b7a4:	00000c06 	br	200b7d8 <gettimeofday+0x1a8>
      ptimeval->tv_sec++;
 200b7a8:	e0bffd17 	ldw	r2,-12(fp)
 200b7ac:	10800017 	ldw	r2,0(r2)
 200b7b0:	10c00044 	addi	r3,r2,1
 200b7b4:	e0bffd17 	ldw	r2,-12(fp)
 200b7b8:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 200b7bc:	e0bffd17 	ldw	r2,-12(fp)
 200b7c0:	10c00117 	ldw	r3,4(r2)
 200b7c4:	00bffc74 	movhi	r2,65521
 200b7c8:	10af7004 	addi	r2,r2,-16960
 200b7cc:	1887883a 	add	r3,r3,r2
 200b7d0:	e0bffd17 	ldw	r2,-12(fp)
 200b7d4:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 200b7d8:	e0bffd17 	ldw	r2,-12(fp)
 200b7dc:	10c00117 	ldw	r3,4(r2)
 200b7e0:	008003f4 	movhi	r2,15
 200b7e4:	10908fc4 	addi	r2,r2,16959
 200b7e8:	10ffef16 	blt	r2,r3,200b7a8 <gettimeofday+0x178>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 200b7ec:	e0bffc17 	ldw	r2,-16(fp)
 200b7f0:	1005003a 	cmpeq	r2,r2,zero
 200b7f4:	1000081e 	bne	r2,zero,200b818 <gettimeofday+0x1e8>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 200b7f8:	d0e6fe17 	ldw	r3,-25608(gp)
 200b7fc:	e0bffc17 	ldw	r2,-16(fp)
 200b800:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 200b804:	00808074 	movhi	r2,513
 200b808:	108c0e04 	addi	r2,r2,12344
 200b80c:	10c00017 	ldw	r3,0(r2)
 200b810:	e0bffc17 	ldw	r2,-16(fp)
 200b814:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 200b818:	e03fff15 	stw	zero,-4(fp)
 200b81c:	00000206 	br	200b828 <gettimeofday+0x1f8>
  }

  return -ENOTSUP;
 200b820:	00bfde84 	movi	r2,-134
 200b824:	e0bfff15 	stw	r2,-4(fp)
 200b828:	e0bfff17 	ldw	r2,-4(fp)
}
 200b82c:	e037883a 	mov	sp,fp
 200b830:	dfc00417 	ldw	ra,16(sp)
 200b834:	df000317 	ldw	fp,12(sp)
 200b838:	dc800217 	ldw	r18,8(sp)
 200b83c:	dc400117 	ldw	r17,4(sp)
 200b840:	dc000017 	ldw	r16,0(sp)
 200b844:	dec00504 	addi	sp,sp,20
 200b848:	f800283a 	ret

0200b84c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 200b84c:	deffeb04 	addi	sp,sp,-84
 200b850:	dfc01415 	stw	ra,80(sp)
 200b854:	df001315 	stw	fp,76(sp)
 200b858:	df001304 	addi	fp,sp,76
 200b85c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200b860:	e0bffd17 	ldw	r2,-12(fp)
 200b864:	1004803a 	cmplt	r2,r2,zero
 200b868:	1000081e 	bne	r2,zero,200b88c <isatty+0x40>
 200b86c:	e0bffd17 	ldw	r2,-12(fp)
 200b870:	10800324 	muli	r2,r2,12
 200b874:	1007883a 	mov	r3,r2
 200b878:	00808074 	movhi	r2,513
 200b87c:	10804f04 	addi	r2,r2,316
 200b880:	1887883a 	add	r3,r3,r2
 200b884:	e0ffff15 	stw	r3,-4(fp)
 200b888:	00000106 	br	200b890 <isatty+0x44>
 200b88c:	e03fff15 	stw	zero,-4(fp)
 200b890:	e0bfff17 	ldw	r2,-4(fp)
 200b894:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 200b898:	e0bfed17 	ldw	r2,-76(fp)
 200b89c:	1005003a 	cmpeq	r2,r2,zero
 200b8a0:	10000f1e 	bne	r2,zero,200b8e0 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 200b8a4:	e0bfed17 	ldw	r2,-76(fp)
 200b8a8:	10800017 	ldw	r2,0(r2)
 200b8ac:	10800817 	ldw	r2,32(r2)
 200b8b0:	1004c03a 	cmpne	r2,r2,zero
 200b8b4:	1000031e 	bne	r2,zero,200b8c4 <isatty+0x78>
    {
      return 1;
 200b8b8:	00800044 	movi	r2,1
 200b8bc:	e0bffe15 	stw	r2,-8(fp)
 200b8c0:	00000c06 	br	200b8f4 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200b8c4:	e17fee04 	addi	r5,fp,-72
 200b8c8:	e13ffd17 	ldw	r4,-12(fp)
 200b8cc:	200b4fc0 	call	200b4fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200b8d0:	e0bfef17 	ldw	r2,-68(fp)
 200b8d4:	10880020 	cmpeqi	r2,r2,8192
 200b8d8:	e0bffe15 	stw	r2,-8(fp)
 200b8dc:	00000506 	br	200b8f4 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200b8e0:	200b90c0 	call	200b90c <alt_get_errno>
 200b8e4:	1007883a 	mov	r3,r2
 200b8e8:	00801444 	movi	r2,81
 200b8ec:	18800015 	stw	r2,0(r3)
    return 0;
 200b8f0:	e03ffe15 	stw	zero,-8(fp)
 200b8f4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 200b8f8:	e037883a 	mov	sp,fp
 200b8fc:	dfc00117 	ldw	ra,4(sp)
 200b900:	df000017 	ldw	fp,0(sp)
 200b904:	dec00204 	addi	sp,sp,8
 200b908:	f800283a 	ret

0200b90c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200b90c:	defffd04 	addi	sp,sp,-12
 200b910:	dfc00215 	stw	ra,8(sp)
 200b914:	df000115 	stw	fp,4(sp)
 200b918:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200b91c:	00808074 	movhi	r2,513
 200b920:	10851a04 	addi	r2,r2,5224
 200b924:	10800017 	ldw	r2,0(r2)
 200b928:	1005003a 	cmpeq	r2,r2,zero
 200b92c:	1000061e 	bne	r2,zero,200b948 <alt_get_errno+0x3c>
 200b930:	00808074 	movhi	r2,513
 200b934:	10851a04 	addi	r2,r2,5224
 200b938:	10800017 	ldw	r2,0(r2)
 200b93c:	103ee83a 	callr	r2
 200b940:	e0bfff15 	stw	r2,-4(fp)
 200b944:	00000306 	br	200b954 <alt_get_errno+0x48>
 200b948:	00808074 	movhi	r2,513
 200b94c:	108c0604 	addi	r2,r2,12312
 200b950:	e0bfff15 	stw	r2,-4(fp)
 200b954:	e0bfff17 	ldw	r2,-4(fp)
}
 200b958:	e037883a 	mov	sp,fp
 200b95c:	dfc00117 	ldw	ra,4(sp)
 200b960:	df000017 	ldw	fp,0(sp)
 200b964:	dec00204 	addi	sp,sp,8
 200b968:	f800283a 	ret

0200b96c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 200b96c:	defffe04 	addi	sp,sp,-8
 200b970:	dfc00115 	stw	ra,4(sp)
 200b974:	df000015 	stw	fp,0(sp)
 200b978:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 200b97c:	01008074 	movhi	r4,513
 200b980:	21052104 	addi	r4,r4,5252
 200b984:	01408074 	movhi	r5,513
 200b988:	297e4004 	addi	r5,r5,-1792
 200b98c:	01808074 	movhi	r6,513
 200b990:	31852104 	addi	r6,r6,5252
 200b994:	200b9ec0 	call	200b9ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 200b998:	01008034 	movhi	r4,512
 200b99c:	21000804 	addi	r4,r4,32
 200b9a0:	01408034 	movhi	r5,512
 200b9a4:	29400804 	addi	r5,r5,32
 200b9a8:	01808034 	movhi	r6,512
 200b9ac:	31806d04 	addi	r6,r6,436
 200b9b0:	200b9ec0 	call	200b9ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 200b9b4:	01008074 	movhi	r4,513
 200b9b8:	213c3c04 	addi	r4,r4,-3856
 200b9bc:	01408074 	movhi	r5,513
 200b9c0:	297c3c04 	addi	r5,r5,-3856
 200b9c4:	01808074 	movhi	r6,513
 200b9c8:	31be4004 	addi	r6,r6,-1792
 200b9cc:	200b9ec0 	call	200b9ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 200b9d0:	200e3700 	call	200e370 <alt_dcache_flush_all>
  alt_icache_flush_all();
 200b9d4:	200e7fc0 	call	200e7fc <alt_icache_flush_all>
}
 200b9d8:	e037883a 	mov	sp,fp
 200b9dc:	dfc00117 	ldw	ra,4(sp)
 200b9e0:	df000017 	ldw	fp,0(sp)
 200b9e4:	dec00204 	addi	sp,sp,8
 200b9e8:	f800283a 	ret

0200b9ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 200b9ec:	defffc04 	addi	sp,sp,-16
 200b9f0:	df000315 	stw	fp,12(sp)
 200b9f4:	df000304 	addi	fp,sp,12
 200b9f8:	e13ffd15 	stw	r4,-12(fp)
 200b9fc:	e17ffe15 	stw	r5,-8(fp)
 200ba00:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 200ba04:	e0fffe17 	ldw	r3,-8(fp)
 200ba08:	e0bffd17 	ldw	r2,-12(fp)
 200ba0c:	18800e26 	beq	r3,r2,200ba48 <alt_load_section+0x5c>
  {
    while( to != end )
 200ba10:	00000a06 	br	200ba3c <alt_load_section+0x50>
    {
      *to++ = *from++;
 200ba14:	e0bffd17 	ldw	r2,-12(fp)
 200ba18:	10c00017 	ldw	r3,0(r2)
 200ba1c:	e0bffe17 	ldw	r2,-8(fp)
 200ba20:	10c00015 	stw	r3,0(r2)
 200ba24:	e0bffe17 	ldw	r2,-8(fp)
 200ba28:	10800104 	addi	r2,r2,4
 200ba2c:	e0bffe15 	stw	r2,-8(fp)
 200ba30:	e0bffd17 	ldw	r2,-12(fp)
 200ba34:	10800104 	addi	r2,r2,4
 200ba38:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 200ba3c:	e0fffe17 	ldw	r3,-8(fp)
 200ba40:	e0bfff17 	ldw	r2,-4(fp)
 200ba44:	18bff31e 	bne	r3,r2,200ba14 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 200ba48:	e037883a 	mov	sp,fp
 200ba4c:	df000017 	ldw	fp,0(sp)
 200ba50:	dec00104 	addi	sp,sp,4
 200ba54:	f800283a 	ret

0200ba58 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 200ba58:	defff804 	addi	sp,sp,-32
 200ba5c:	dfc00715 	stw	ra,28(sp)
 200ba60:	df000615 	stw	fp,24(sp)
 200ba64:	df000604 	addi	fp,sp,24
 200ba68:	e13ffc15 	stw	r4,-16(fp)
 200ba6c:	e17ffd15 	stw	r5,-12(fp)
 200ba70:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200ba74:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200ba78:	e0bffc17 	ldw	r2,-16(fp)
 200ba7c:	1004803a 	cmplt	r2,r2,zero
 200ba80:	1000081e 	bne	r2,zero,200baa4 <lseek+0x4c>
 200ba84:	e0bffc17 	ldw	r2,-16(fp)
 200ba88:	10800324 	muli	r2,r2,12
 200ba8c:	1007883a 	mov	r3,r2
 200ba90:	00808074 	movhi	r2,513
 200ba94:	10804f04 	addi	r2,r2,316
 200ba98:	1887883a 	add	r3,r3,r2
 200ba9c:	e0ffff15 	stw	r3,-4(fp)
 200baa0:	00000106 	br	200baa8 <lseek+0x50>
 200baa4:	e03fff15 	stw	zero,-4(fp)
 200baa8:	e0bfff17 	ldw	r2,-4(fp)
 200baac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 200bab0:	e0bffb17 	ldw	r2,-20(fp)
 200bab4:	1005003a 	cmpeq	r2,r2,zero
 200bab8:	1000111e 	bne	r2,zero,200bb00 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 200babc:	e0bffb17 	ldw	r2,-20(fp)
 200bac0:	10800017 	ldw	r2,0(r2)
 200bac4:	10800717 	ldw	r2,28(r2)
 200bac8:	1005003a 	cmpeq	r2,r2,zero
 200bacc:	1000091e 	bne	r2,zero,200baf4 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200bad0:	e0bffb17 	ldw	r2,-20(fp)
 200bad4:	10800017 	ldw	r2,0(r2)
 200bad8:	10800717 	ldw	r2,28(r2)
 200badc:	e13ffb17 	ldw	r4,-20(fp)
 200bae0:	e17ffd17 	ldw	r5,-12(fp)
 200bae4:	e1bffe17 	ldw	r6,-8(fp)
 200bae8:	103ee83a 	callr	r2
 200baec:	e0bffa15 	stw	r2,-24(fp)
 200baf0:	00000506 	br	200bb08 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 200baf4:	00bfde84 	movi	r2,-134
 200baf8:	e0bffa15 	stw	r2,-24(fp)
 200bafc:	00000206 	br	200bb08 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 200bb00:	00bfebc4 	movi	r2,-81
 200bb04:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 200bb08:	e0bffa17 	ldw	r2,-24(fp)
 200bb0c:	1004403a 	cmpge	r2,r2,zero
 200bb10:	1000071e 	bne	r2,zero,200bb30 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 200bb14:	200bb480 	call	200bb48 <alt_get_errno>
 200bb18:	1007883a 	mov	r3,r2
 200bb1c:	e0bffa17 	ldw	r2,-24(fp)
 200bb20:	0085c83a 	sub	r2,zero,r2
 200bb24:	18800015 	stw	r2,0(r3)
    rc = -1;
 200bb28:	00bfffc4 	movi	r2,-1
 200bb2c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 200bb30:	e0bffa17 	ldw	r2,-24(fp)
}
 200bb34:	e037883a 	mov	sp,fp
 200bb38:	dfc00117 	ldw	ra,4(sp)
 200bb3c:	df000017 	ldw	fp,0(sp)
 200bb40:	dec00204 	addi	sp,sp,8
 200bb44:	f800283a 	ret

0200bb48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200bb48:	defffd04 	addi	sp,sp,-12
 200bb4c:	dfc00215 	stw	ra,8(sp)
 200bb50:	df000115 	stw	fp,4(sp)
 200bb54:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200bb58:	00808074 	movhi	r2,513
 200bb5c:	10851a04 	addi	r2,r2,5224
 200bb60:	10800017 	ldw	r2,0(r2)
 200bb64:	1005003a 	cmpeq	r2,r2,zero
 200bb68:	1000061e 	bne	r2,zero,200bb84 <alt_get_errno+0x3c>
 200bb6c:	00808074 	movhi	r2,513
 200bb70:	10851a04 	addi	r2,r2,5224
 200bb74:	10800017 	ldw	r2,0(r2)
 200bb78:	103ee83a 	callr	r2
 200bb7c:	e0bfff15 	stw	r2,-4(fp)
 200bb80:	00000306 	br	200bb90 <alt_get_errno+0x48>
 200bb84:	00808074 	movhi	r2,513
 200bb88:	108c0604 	addi	r2,r2,12312
 200bb8c:	e0bfff15 	stw	r2,-4(fp)
 200bb90:	e0bfff17 	ldw	r2,-4(fp)
}
 200bb94:	e037883a 	mov	sp,fp
 200bb98:	dfc00117 	ldw	ra,4(sp)
 200bb9c:	df000017 	ldw	fp,0(sp)
 200bba0:	dec00204 	addi	sp,sp,8
 200bba4:	f800283a 	ret

0200bba8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200bba8:	defffd04 	addi	sp,sp,-12
 200bbac:	dfc00215 	stw	ra,8(sp)
 200bbb0:	df000115 	stw	fp,4(sp)
 200bbb4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200bbb8:	0009883a 	mov	r4,zero
 200bbbc:	200c5080 	call	200c508 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200bbc0:	200c53c0 	call	200c53c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200bbc4:	01008074 	movhi	r4,513
 200bbc8:	213d9004 	addi	r4,r4,-2496
 200bbcc:	01408074 	movhi	r5,513
 200bbd0:	297d9004 	addi	r5,r5,-2496
 200bbd4:	01808074 	movhi	r6,513
 200bbd8:	31bd9004 	addi	r6,r6,-2496
 200bbdc:	200ebbc0 	call	200ebbc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200bbe0:	200e4c80 	call	200e4c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200bbe4:	01008074 	movhi	r4,513
 200bbe8:	21394b04 	addi	r4,r4,-6868
 200bbec:	200ece40 	call	200ece4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200bbf0:	d1270217 	ldw	r4,-25592(gp)
 200bbf4:	d1670317 	ldw	r5,-25588(gp)
 200bbf8:	d1a70417 	ldw	r6,-25584(gp)
 200bbfc:	20002000 	call	2000200 <main>
 200bc00:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 200bc04:	01000044 	movi	r4,1
 200bc08:	200b3740 	call	200b374 <close>
  exit (result);
 200bc0c:	e13fff17 	ldw	r4,-4(fp)
 200bc10:	200ecf80 	call	200ecf8 <exit>

0200bc14 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 200bc14:	defffe04 	addi	sp,sp,-8
 200bc18:	df000115 	stw	fp,4(sp)
 200bc1c:	df000104 	addi	fp,sp,4
 200bc20:	e13fff15 	stw	r4,-4(fp)
}
 200bc24:	e037883a 	mov	sp,fp
 200bc28:	df000017 	ldw	fp,0(sp)
 200bc2c:	dec00104 	addi	sp,sp,4
 200bc30:	f800283a 	ret

0200bc34 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 200bc34:	defffe04 	addi	sp,sp,-8
 200bc38:	df000115 	stw	fp,4(sp)
 200bc3c:	df000104 	addi	fp,sp,4
 200bc40:	e13fff15 	stw	r4,-4(fp)
}
 200bc44:	e037883a 	mov	sp,fp
 200bc48:	df000017 	ldw	fp,0(sp)
 200bc4c:	dec00104 	addi	sp,sp,4
 200bc50:	f800283a 	ret

0200bc54 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 200bc54:	defffc04 	addi	sp,sp,-16
 200bc58:	df000315 	stw	fp,12(sp)
 200bc5c:	df000304 	addi	fp,sp,12
 200bc60:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 200bc64:	e0bffe17 	ldw	r2,-8(fp)
 200bc68:	10800217 	ldw	r2,8(r2)
 200bc6c:	10d00034 	orhi	r3,r2,16384
 200bc70:	e0bffe17 	ldw	r2,-8(fp)
 200bc74:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200bc78:	e03ffd15 	stw	zero,-12(fp)
 200bc7c:	00002006 	br	200bd00 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200bc80:	e0bffd17 	ldw	r2,-12(fp)
 200bc84:	00c08074 	movhi	r3,513
 200bc88:	18c04f04 	addi	r3,r3,316
 200bc8c:	10800324 	muli	r2,r2,12
 200bc90:	10c5883a 	add	r2,r2,r3
 200bc94:	10c00017 	ldw	r3,0(r2)
 200bc98:	e0bffe17 	ldw	r2,-8(fp)
 200bc9c:	10800017 	ldw	r2,0(r2)
 200bca0:	1880141e 	bne	r3,r2,200bcf4 <alt_file_locked+0xa0>
 200bca4:	e0bffd17 	ldw	r2,-12(fp)
 200bca8:	00c08074 	movhi	r3,513
 200bcac:	18c04f04 	addi	r3,r3,316
 200bcb0:	10800324 	muli	r2,r2,12
 200bcb4:	10c5883a 	add	r2,r2,r3
 200bcb8:	10800204 	addi	r2,r2,8
 200bcbc:	10800017 	ldw	r2,0(r2)
 200bcc0:	1004403a 	cmpge	r2,r2,zero
 200bcc4:	10000b1e 	bne	r2,zero,200bcf4 <alt_file_locked+0xa0>
 200bcc8:	e0bffd17 	ldw	r2,-12(fp)
 200bccc:	10800324 	muli	r2,r2,12
 200bcd0:	1007883a 	mov	r3,r2
 200bcd4:	00808074 	movhi	r2,513
 200bcd8:	10804f04 	addi	r2,r2,316
 200bcdc:	1887883a 	add	r3,r3,r2
 200bce0:	e0bffe17 	ldw	r2,-8(fp)
 200bce4:	18800326 	beq	r3,r2,200bcf4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 200bce8:	00bffcc4 	movi	r2,-13
 200bcec:	e0bfff15 	stw	r2,-4(fp)
 200bcf0:	00000a06 	br	200bd1c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200bcf4:	e0bffd17 	ldw	r2,-12(fp)
 200bcf8:	10800044 	addi	r2,r2,1
 200bcfc:	e0bffd15 	stw	r2,-12(fp)
 200bd00:	00808074 	movhi	r2,513
 200bd04:	10851904 	addi	r2,r2,5220
 200bd08:	10800017 	ldw	r2,0(r2)
 200bd0c:	1007883a 	mov	r3,r2
 200bd10:	e0bffd17 	ldw	r2,-12(fp)
 200bd14:	18bfda2e 	bgeu	r3,r2,200bc80 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 200bd18:	e03fff15 	stw	zero,-4(fp)
 200bd1c:	e0bfff17 	ldw	r2,-4(fp)
}
 200bd20:	e037883a 	mov	sp,fp
 200bd24:	df000017 	ldw	fp,0(sp)
 200bd28:	dec00104 	addi	sp,sp,4
 200bd2c:	f800283a 	ret

0200bd30 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 200bd30:	defff404 	addi	sp,sp,-48
 200bd34:	dfc00b15 	stw	ra,44(sp)
 200bd38:	df000a15 	stw	fp,40(sp)
 200bd3c:	df000a04 	addi	fp,sp,40
 200bd40:	e13ffb15 	stw	r4,-20(fp)
 200bd44:	e17ffc15 	stw	r5,-16(fp)
 200bd48:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 200bd4c:	00bfffc4 	movi	r2,-1
 200bd50:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 200bd54:	00bffb44 	movi	r2,-19
 200bd58:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 200bd5c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 200bd60:	e13ffb17 	ldw	r4,-20(fp)
 200bd64:	01408074 	movhi	r5,513
 200bd68:	29451704 	addi	r5,r5,5212
 200bd6c:	200e5900 	call	200e590 <alt_find_dev>
 200bd70:	e0bffa15 	stw	r2,-24(fp)
 200bd74:	e0bffa17 	ldw	r2,-24(fp)
 200bd78:	1004c03a 	cmpne	r2,r2,zero
 200bd7c:	1000051e 	bne	r2,zero,200bd94 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 200bd80:	e13ffb17 	ldw	r4,-20(fp)
 200bd84:	200e6240 	call	200e624 <alt_find_file>
 200bd88:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 200bd8c:	00800044 	movi	r2,1
 200bd90:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 200bd94:	e0bffa17 	ldw	r2,-24(fp)
 200bd98:	1005003a 	cmpeq	r2,r2,zero
 200bd9c:	1000301e 	bne	r2,zero,200be60 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 200bda0:	e13ffa17 	ldw	r4,-24(fp)
 200bda4:	200e7440 	call	200e744 <alt_get_fd>
 200bda8:	e0bff815 	stw	r2,-32(fp)
 200bdac:	e0bff817 	ldw	r2,-32(fp)
 200bdb0:	1004403a 	cmpge	r2,r2,zero
 200bdb4:	1000031e 	bne	r2,zero,200bdc4 <open+0x94>
    {
      status = index;
 200bdb8:	e0bff817 	ldw	r2,-32(fp)
 200bdbc:	e0bff715 	stw	r2,-36(fp)
 200bdc0:	00002906 	br	200be68 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 200bdc4:	e0bff817 	ldw	r2,-32(fp)
 200bdc8:	10800324 	muli	r2,r2,12
 200bdcc:	1007883a 	mov	r3,r2
 200bdd0:	00808074 	movhi	r2,513
 200bdd4:	10804f04 	addi	r2,r2,316
 200bdd8:	1885883a 	add	r2,r3,r2
 200bddc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 200bde0:	e0fffc17 	ldw	r3,-16(fp)
 200bde4:	00900034 	movhi	r2,16384
 200bde8:	10bfffc4 	addi	r2,r2,-1
 200bdec:	1886703a 	and	r3,r3,r2
 200bdf0:	e0bff917 	ldw	r2,-28(fp)
 200bdf4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 200bdf8:	e0bff617 	ldw	r2,-40(fp)
 200bdfc:	1004c03a 	cmpne	r2,r2,zero
 200be00:	1000061e 	bne	r2,zero,200be1c <open+0xec>
 200be04:	e13ff917 	ldw	r4,-28(fp)
 200be08:	200bc540 	call	200bc54 <alt_file_locked>
 200be0c:	e0bff715 	stw	r2,-36(fp)
 200be10:	e0bff717 	ldw	r2,-36(fp)
 200be14:	1004803a 	cmplt	r2,r2,zero
 200be18:	1000131e 	bne	r2,zero,200be68 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 200be1c:	e0bffa17 	ldw	r2,-24(fp)
 200be20:	10800317 	ldw	r2,12(r2)
 200be24:	1005003a 	cmpeq	r2,r2,zero
 200be28:	1000091e 	bne	r2,zero,200be50 <open+0x120>
 200be2c:	e0bffa17 	ldw	r2,-24(fp)
 200be30:	10800317 	ldw	r2,12(r2)
 200be34:	e13ff917 	ldw	r4,-28(fp)
 200be38:	e17ffb17 	ldw	r5,-20(fp)
 200be3c:	e1bffc17 	ldw	r6,-16(fp)
 200be40:	e1fffd17 	ldw	r7,-12(fp)
 200be44:	103ee83a 	callr	r2
 200be48:	e0bfff15 	stw	r2,-4(fp)
 200be4c:	00000106 	br	200be54 <open+0x124>
 200be50:	e03fff15 	stw	zero,-4(fp)
 200be54:	e0bfff17 	ldw	r2,-4(fp)
 200be58:	e0bff715 	stw	r2,-36(fp)
 200be5c:	00000206 	br	200be68 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 200be60:	00bffb44 	movi	r2,-19
 200be64:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 200be68:	e0bff717 	ldw	r2,-36(fp)
 200be6c:	1004403a 	cmpge	r2,r2,zero
 200be70:	1000091e 	bne	r2,zero,200be98 <open+0x168>
  {
    alt_release_fd (index);  
 200be74:	e13ff817 	ldw	r4,-32(fp)
 200be78:	200c0980 	call	200c098 <alt_release_fd>
    ALT_ERRNO = -status;
 200be7c:	200beb80 	call	200beb8 <alt_get_errno>
 200be80:	e0fff717 	ldw	r3,-36(fp)
 200be84:	00c7c83a 	sub	r3,zero,r3
 200be88:	10c00015 	stw	r3,0(r2)
    return -1;
 200be8c:	00bfffc4 	movi	r2,-1
 200be90:	e0bffe15 	stw	r2,-8(fp)
 200be94:	00000206 	br	200bea0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 200be98:	e0bff817 	ldw	r2,-32(fp)
 200be9c:	e0bffe15 	stw	r2,-8(fp)
 200bea0:	e0bffe17 	ldw	r2,-8(fp)
}
 200bea4:	e037883a 	mov	sp,fp
 200bea8:	dfc00117 	ldw	ra,4(sp)
 200beac:	df000017 	ldw	fp,0(sp)
 200beb0:	dec00204 	addi	sp,sp,8
 200beb4:	f800283a 	ret

0200beb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200beb8:	defffd04 	addi	sp,sp,-12
 200bebc:	dfc00215 	stw	ra,8(sp)
 200bec0:	df000115 	stw	fp,4(sp)
 200bec4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200bec8:	00808074 	movhi	r2,513
 200becc:	10851a04 	addi	r2,r2,5224
 200bed0:	10800017 	ldw	r2,0(r2)
 200bed4:	1005003a 	cmpeq	r2,r2,zero
 200bed8:	1000061e 	bne	r2,zero,200bef4 <alt_get_errno+0x3c>
 200bedc:	00808074 	movhi	r2,513
 200bee0:	10851a04 	addi	r2,r2,5224
 200bee4:	10800017 	ldw	r2,0(r2)
 200bee8:	103ee83a 	callr	r2
 200beec:	e0bfff15 	stw	r2,-4(fp)
 200bef0:	00000306 	br	200bf00 <alt_get_errno+0x48>
 200bef4:	00808074 	movhi	r2,513
 200bef8:	108c0604 	addi	r2,r2,12312
 200befc:	e0bfff15 	stw	r2,-4(fp)
 200bf00:	e0bfff17 	ldw	r2,-4(fp)
}
 200bf04:	e037883a 	mov	sp,fp
 200bf08:	dfc00117 	ldw	ra,4(sp)
 200bf0c:	df000017 	ldw	fp,0(sp)
 200bf10:	dec00204 	addi	sp,sp,8
 200bf14:	f800283a 	ret

0200bf18 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 200bf18:	defff704 	addi	sp,sp,-36
 200bf1c:	dfc00815 	stw	ra,32(sp)
 200bf20:	df000715 	stw	fp,28(sp)
 200bf24:	df000704 	addi	fp,sp,28
 200bf28:	e13ffb15 	stw	r4,-20(fp)
 200bf2c:	e17ffc15 	stw	r5,-16(fp)
 200bf30:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200bf34:	e0bffb17 	ldw	r2,-20(fp)
 200bf38:	1004803a 	cmplt	r2,r2,zero
 200bf3c:	1000081e 	bne	r2,zero,200bf60 <read+0x48>
 200bf40:	e0bffb17 	ldw	r2,-20(fp)
 200bf44:	10800324 	muli	r2,r2,12
 200bf48:	1007883a 	mov	r3,r2
 200bf4c:	00808074 	movhi	r2,513
 200bf50:	10804f04 	addi	r2,r2,316
 200bf54:	1887883a 	add	r3,r3,r2
 200bf58:	e0ffff15 	stw	r3,-4(fp)
 200bf5c:	00000106 	br	200bf64 <read+0x4c>
 200bf60:	e03fff15 	stw	zero,-4(fp)
 200bf64:	e0bfff17 	ldw	r2,-4(fp)
 200bf68:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 200bf6c:	e0bffa17 	ldw	r2,-24(fp)
 200bf70:	1005003a 	cmpeq	r2,r2,zero
 200bf74:	1000241e 	bne	r2,zero,200c008 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200bf78:	e0bffa17 	ldw	r2,-24(fp)
 200bf7c:	10800217 	ldw	r2,8(r2)
 200bf80:	108000cc 	andi	r2,r2,3
 200bf84:	10800060 	cmpeqi	r2,r2,1
 200bf88:	10001a1e 	bne	r2,zero,200bff4 <read+0xdc>
 200bf8c:	e0bffa17 	ldw	r2,-24(fp)
 200bf90:	10800017 	ldw	r2,0(r2)
 200bf94:	10800517 	ldw	r2,20(r2)
 200bf98:	1005003a 	cmpeq	r2,r2,zero
 200bf9c:	1000151e 	bne	r2,zero,200bff4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200bfa0:	e0bffa17 	ldw	r2,-24(fp)
 200bfa4:	10800017 	ldw	r2,0(r2)
 200bfa8:	10800517 	ldw	r2,20(r2)
 200bfac:	e17ffc17 	ldw	r5,-16(fp)
 200bfb0:	e1bffd17 	ldw	r6,-12(fp)
 200bfb4:	e13ffa17 	ldw	r4,-24(fp)
 200bfb8:	103ee83a 	callr	r2
 200bfbc:	e0bff915 	stw	r2,-28(fp)
 200bfc0:	e0bff917 	ldw	r2,-28(fp)
 200bfc4:	1004403a 	cmpge	r2,r2,zero
 200bfc8:	1000071e 	bne	r2,zero,200bfe8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 200bfcc:	200c0380 	call	200c038 <alt_get_errno>
 200bfd0:	e0fff917 	ldw	r3,-28(fp)
 200bfd4:	00c7c83a 	sub	r3,zero,r3
 200bfd8:	10c00015 	stw	r3,0(r2)
          return -1;
 200bfdc:	00bfffc4 	movi	r2,-1
 200bfe0:	e0bffe15 	stw	r2,-8(fp)
 200bfe4:	00000e06 	br	200c020 <read+0x108>
        }
        return rval;
 200bfe8:	e0bff917 	ldw	r2,-28(fp)
 200bfec:	e0bffe15 	stw	r2,-8(fp)
 200bff0:	00000b06 	br	200c020 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 200bff4:	200c0380 	call	200c038 <alt_get_errno>
 200bff8:	1007883a 	mov	r3,r2
 200bffc:	00800344 	movi	r2,13
 200c000:	18800015 	stw	r2,0(r3)
 200c004:	00000406 	br	200c018 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 200c008:	200c0380 	call	200c038 <alt_get_errno>
 200c00c:	1007883a 	mov	r3,r2
 200c010:	00801444 	movi	r2,81
 200c014:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200c018:	00bfffc4 	movi	r2,-1
 200c01c:	e0bffe15 	stw	r2,-8(fp)
 200c020:	e0bffe17 	ldw	r2,-8(fp)
}
 200c024:	e037883a 	mov	sp,fp
 200c028:	dfc00117 	ldw	ra,4(sp)
 200c02c:	df000017 	ldw	fp,0(sp)
 200c030:	dec00204 	addi	sp,sp,8
 200c034:	f800283a 	ret

0200c038 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200c038:	defffd04 	addi	sp,sp,-12
 200c03c:	dfc00215 	stw	ra,8(sp)
 200c040:	df000115 	stw	fp,4(sp)
 200c044:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200c048:	00808074 	movhi	r2,513
 200c04c:	10851a04 	addi	r2,r2,5224
 200c050:	10800017 	ldw	r2,0(r2)
 200c054:	1005003a 	cmpeq	r2,r2,zero
 200c058:	1000061e 	bne	r2,zero,200c074 <alt_get_errno+0x3c>
 200c05c:	00808074 	movhi	r2,513
 200c060:	10851a04 	addi	r2,r2,5224
 200c064:	10800017 	ldw	r2,0(r2)
 200c068:	103ee83a 	callr	r2
 200c06c:	e0bfff15 	stw	r2,-4(fp)
 200c070:	00000306 	br	200c080 <alt_get_errno+0x48>
 200c074:	00808074 	movhi	r2,513
 200c078:	108c0604 	addi	r2,r2,12312
 200c07c:	e0bfff15 	stw	r2,-4(fp)
 200c080:	e0bfff17 	ldw	r2,-4(fp)
}
 200c084:	e037883a 	mov	sp,fp
 200c088:	dfc00117 	ldw	ra,4(sp)
 200c08c:	df000017 	ldw	fp,0(sp)
 200c090:	dec00204 	addi	sp,sp,8
 200c094:	f800283a 	ret

0200c098 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200c098:	defffe04 	addi	sp,sp,-8
 200c09c:	df000115 	stw	fp,4(sp)
 200c0a0:	df000104 	addi	fp,sp,4
 200c0a4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 200c0a8:	e0bfff17 	ldw	r2,-4(fp)
 200c0ac:	108000d0 	cmplti	r2,r2,3
 200c0b0:	10000d1e 	bne	r2,zero,200c0e8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 200c0b4:	e0bfff17 	ldw	r2,-4(fp)
 200c0b8:	00c08074 	movhi	r3,513
 200c0bc:	18c04f04 	addi	r3,r3,316
 200c0c0:	10800324 	muli	r2,r2,12
 200c0c4:	10c5883a 	add	r2,r2,r3
 200c0c8:	10800204 	addi	r2,r2,8
 200c0cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200c0d0:	e0bfff17 	ldw	r2,-4(fp)
 200c0d4:	00c08074 	movhi	r3,513
 200c0d8:	18c04f04 	addi	r3,r3,316
 200c0dc:	10800324 	muli	r2,r2,12
 200c0e0:	10c5883a 	add	r2,r2,r3
 200c0e4:	10000015 	stw	zero,0(r2)
  }
}
 200c0e8:	e037883a 	mov	sp,fp
 200c0ec:	df000017 	ldw	fp,0(sp)
 200c0f0:	dec00104 	addi	sp,sp,4
 200c0f4:	f800283a 	ret

0200c0f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200c0f8:	defff804 	addi	sp,sp,-32
 200c0fc:	df000715 	stw	fp,28(sp)
 200c100:	df000704 	addi	fp,sp,28
 200c104:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200c108:	0005303a 	rdctl	r2,status
 200c10c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200c110:	e0fffb17 	ldw	r3,-20(fp)
 200c114:	00bfff84 	movi	r2,-2
 200c118:	1884703a 	and	r2,r3,r2
 200c11c:	1001703a 	wrctl	status,r2
  
  return context;
 200c120:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 200c124:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 200c128:	d0a00c17 	ldw	r2,-32720(gp)
 200c12c:	10c000c4 	addi	r3,r2,3
 200c130:	00bfff04 	movi	r2,-4
 200c134:	1884703a 	and	r2,r3,r2
 200c138:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200c13c:	d0e00c17 	ldw	r3,-32720(gp)
 200c140:	e0bffe17 	ldw	r2,-8(fp)
 200c144:	1887883a 	add	r3,r3,r2
 200c148:	0080a034 	movhi	r2,640
 200c14c:	10800004 	addi	r2,r2,0
 200c150:	10c0072e 	bgeu	r2,r3,200c170 <sbrk+0x78>
 200c154:	e0bffd17 	ldw	r2,-12(fp)
 200c158:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200c15c:	e0bffa17 	ldw	r2,-24(fp)
 200c160:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 200c164:	00bfffc4 	movi	r2,-1
 200c168:	e0bfff15 	stw	r2,-4(fp)
 200c16c:	00000c06 	br	200c1a0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 200c170:	d0a00c17 	ldw	r2,-32720(gp)
 200c174:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 200c178:	d0e00c17 	ldw	r3,-32720(gp)
 200c17c:	e0bffe17 	ldw	r2,-8(fp)
 200c180:	1885883a 	add	r2,r3,r2
 200c184:	d0a00c15 	stw	r2,-32720(gp)
 200c188:	e0bffd17 	ldw	r2,-12(fp)
 200c18c:	e0bff915 	stw	r2,-28(fp)
 200c190:	e0bff917 	ldw	r2,-28(fp)
 200c194:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200c198:	e0bffc17 	ldw	r2,-16(fp)
 200c19c:	e0bfff15 	stw	r2,-4(fp)
 200c1a0:	e0bfff17 	ldw	r2,-4(fp)
} 
 200c1a4:	e037883a 	mov	sp,fp
 200c1a8:	df000017 	ldw	fp,0(sp)
 200c1ac:	dec00104 	addi	sp,sp,4
 200c1b0:	f800283a 	ret

0200c1b4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 200c1b4:	defffa04 	addi	sp,sp,-24
 200c1b8:	df000515 	stw	fp,20(sp)
 200c1bc:	df000504 	addi	fp,sp,20
 200c1c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200c1c4:	0005303a 	rdctl	r2,status
 200c1c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200c1cc:	e0fffd17 	ldw	r3,-12(fp)
 200c1d0:	00bfff84 	movi	r2,-2
 200c1d4:	1884703a 	and	r2,r3,r2
 200c1d8:	1001703a 	wrctl	status,r2
  
  return context;
 200c1dc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 200c1e0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 200c1e4:	e0bfff17 	ldw	r2,-4(fp)
 200c1e8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 200c1ec:	e0bffc17 	ldw	r2,-16(fp)
 200c1f0:	10c00017 	ldw	r3,0(r2)
 200c1f4:	e0bffc17 	ldw	r2,-16(fp)
 200c1f8:	10800117 	ldw	r2,4(r2)
 200c1fc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 200c200:	e0bffc17 	ldw	r2,-16(fp)
 200c204:	10c00117 	ldw	r3,4(r2)
 200c208:	e0bffc17 	ldw	r2,-16(fp)
 200c20c:	10800017 	ldw	r2,0(r2)
 200c210:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 200c214:	e0fffc17 	ldw	r3,-16(fp)
 200c218:	e0bffc17 	ldw	r2,-16(fp)
 200c21c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 200c220:	e0fffc17 	ldw	r3,-16(fp)
 200c224:	e0bffc17 	ldw	r2,-16(fp)
 200c228:	18800015 	stw	r2,0(r3)
 200c22c:	e0bffe17 	ldw	r2,-8(fp)
 200c230:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200c234:	e0bffb17 	ldw	r2,-20(fp)
 200c238:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 200c23c:	e037883a 	mov	sp,fp
 200c240:	df000017 	ldw	fp,0(sp)
 200c244:	dec00104 	addi	sp,sp,4
 200c248:	f800283a 	ret

0200c24c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 200c24c:	defffb04 	addi	sp,sp,-20
 200c250:	dfc00415 	stw	ra,16(sp)
 200c254:	df000315 	stw	fp,12(sp)
 200c258:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 200c25c:	d0a00d17 	ldw	r2,-32716(gp)
 200c260:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 200c264:	d0a70617 	ldw	r2,-25576(gp)
 200c268:	10800044 	addi	r2,r2,1
 200c26c:	d0a70615 	stw	r2,-25576(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200c270:	00003106 	br	200c338 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 200c274:	e0bffe17 	ldw	r2,-8(fp)
 200c278:	10800017 	ldw	r2,0(r2)
 200c27c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 200c280:	e0bffe17 	ldw	r2,-8(fp)
 200c284:	10800403 	ldbu	r2,16(r2)
 200c288:	10803fcc 	andi	r2,r2,255
 200c28c:	1005003a 	cmpeq	r2,r2,zero
 200c290:	1000051e 	bne	r2,zero,200c2a8 <alt_tick+0x5c>
 200c294:	d0a70617 	ldw	r2,-25576(gp)
 200c298:	1004c03a 	cmpne	r2,r2,zero
 200c29c:	1000021e 	bne	r2,zero,200c2a8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 200c2a0:	e0bffe17 	ldw	r2,-8(fp)
 200c2a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 200c2a8:	e0bffe17 	ldw	r2,-8(fp)
 200c2ac:	10c00217 	ldw	r3,8(r2)
 200c2b0:	d0a70617 	ldw	r2,-25576(gp)
 200c2b4:	10c01e36 	bltu	r2,r3,200c330 <alt_tick+0xe4>
 200c2b8:	e0bffe17 	ldw	r2,-8(fp)
 200c2bc:	10800403 	ldbu	r2,16(r2)
 200c2c0:	10803fcc 	andi	r2,r2,255
 200c2c4:	1004c03a 	cmpne	r2,r2,zero
 200c2c8:	1000191e 	bne	r2,zero,200c330 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 200c2cc:	e0bffe17 	ldw	r2,-8(fp)
 200c2d0:	10c00317 	ldw	r3,12(r2)
 200c2d4:	e0bffe17 	ldw	r2,-8(fp)
 200c2d8:	11000517 	ldw	r4,20(r2)
 200c2dc:	183ee83a 	callr	r3
 200c2e0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 200c2e4:	e0bffd17 	ldw	r2,-12(fp)
 200c2e8:	1004c03a 	cmpne	r2,r2,zero
 200c2ec:	1000031e 	bne	r2,zero,200c2fc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 200c2f0:	e13ffe17 	ldw	r4,-8(fp)
 200c2f4:	200c1b40 	call	200c1b4 <alt_alarm_stop>
 200c2f8:	00000d06 	br	200c330 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 200c2fc:	e0bffe17 	ldw	r2,-8(fp)
 200c300:	10c00217 	ldw	r3,8(r2)
 200c304:	e0bffd17 	ldw	r2,-12(fp)
 200c308:	1887883a 	add	r3,r3,r2
 200c30c:	e0bffe17 	ldw	r2,-8(fp)
 200c310:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 200c314:	e0bffe17 	ldw	r2,-8(fp)
 200c318:	10c00217 	ldw	r3,8(r2)
 200c31c:	d0a70617 	ldw	r2,-25576(gp)
 200c320:	1880032e 	bgeu	r3,r2,200c330 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 200c324:	e0fffe17 	ldw	r3,-8(fp)
 200c328:	00800044 	movi	r2,1
 200c32c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 200c330:	e0bfff17 	ldw	r2,-4(fp)
 200c334:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200c338:	d0e00d04 	addi	r3,gp,-32716
 200c33c:	e0bffe17 	ldw	r2,-8(fp)
 200c340:	10ffcc1e 	bne	r2,r3,200c274 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 200c344:	e037883a 	mov	sp,fp
 200c348:	dfc00117 	ldw	ra,4(sp)
 200c34c:	df000017 	ldw	fp,0(sp)
 200c350:	dec00204 	addi	sp,sp,8
 200c354:	f800283a 	ret

0200c358 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 200c358:	defffd04 	addi	sp,sp,-12
 200c35c:	dfc00215 	stw	ra,8(sp)
 200c360:	df000115 	stw	fp,4(sp)
 200c364:	df000104 	addi	fp,sp,4
 200c368:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 200c36c:	e13fff17 	ldw	r4,-4(fp)
 200c370:	200e2240 	call	200e224 <alt_busy_sleep>
}
 200c374:	e037883a 	mov	sp,fp
 200c378:	dfc00117 	ldw	ra,4(sp)
 200c37c:	df000017 	ldw	fp,0(sp)
 200c380:	dec00204 	addi	sp,sp,8
 200c384:	f800283a 	ret

0200c388 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200c388:	defff704 	addi	sp,sp,-36
 200c38c:	dfc00815 	stw	ra,32(sp)
 200c390:	df000715 	stw	fp,28(sp)
 200c394:	df000704 	addi	fp,sp,28
 200c398:	e13ffb15 	stw	r4,-20(fp)
 200c39c:	e17ffc15 	stw	r5,-16(fp)
 200c3a0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200c3a4:	e0bffb17 	ldw	r2,-20(fp)
 200c3a8:	1004803a 	cmplt	r2,r2,zero
 200c3ac:	1000081e 	bne	r2,zero,200c3d0 <write+0x48>
 200c3b0:	e0bffb17 	ldw	r2,-20(fp)
 200c3b4:	10800324 	muli	r2,r2,12
 200c3b8:	1007883a 	mov	r3,r2
 200c3bc:	00808074 	movhi	r2,513
 200c3c0:	10804f04 	addi	r2,r2,316
 200c3c4:	1887883a 	add	r3,r3,r2
 200c3c8:	e0ffff15 	stw	r3,-4(fp)
 200c3cc:	00000106 	br	200c3d4 <write+0x4c>
 200c3d0:	e03fff15 	stw	zero,-4(fp)
 200c3d4:	e0bfff17 	ldw	r2,-4(fp)
 200c3d8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 200c3dc:	e0bffa17 	ldw	r2,-24(fp)
 200c3e0:	1005003a 	cmpeq	r2,r2,zero
 200c3e4:	1000241e 	bne	r2,zero,200c478 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 200c3e8:	e0bffa17 	ldw	r2,-24(fp)
 200c3ec:	10800217 	ldw	r2,8(r2)
 200c3f0:	108000cc 	andi	r2,r2,3
 200c3f4:	1005003a 	cmpeq	r2,r2,zero
 200c3f8:	10001a1e 	bne	r2,zero,200c464 <write+0xdc>
 200c3fc:	e0bffa17 	ldw	r2,-24(fp)
 200c400:	10800017 	ldw	r2,0(r2)
 200c404:	10800617 	ldw	r2,24(r2)
 200c408:	1005003a 	cmpeq	r2,r2,zero
 200c40c:	1000151e 	bne	r2,zero,200c464 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 200c410:	e0bffa17 	ldw	r2,-24(fp)
 200c414:	10800017 	ldw	r2,0(r2)
 200c418:	10800617 	ldw	r2,24(r2)
 200c41c:	e17ffc17 	ldw	r5,-16(fp)
 200c420:	e1bffd17 	ldw	r6,-12(fp)
 200c424:	e13ffa17 	ldw	r4,-24(fp)
 200c428:	103ee83a 	callr	r2
 200c42c:	e0bff915 	stw	r2,-28(fp)
 200c430:	e0bff917 	ldw	r2,-28(fp)
 200c434:	1004403a 	cmpge	r2,r2,zero
 200c438:	1000071e 	bne	r2,zero,200c458 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 200c43c:	200c4a80 	call	200c4a8 <alt_get_errno>
 200c440:	e0fff917 	ldw	r3,-28(fp)
 200c444:	00c7c83a 	sub	r3,zero,r3
 200c448:	10c00015 	stw	r3,0(r2)
        return -1;
 200c44c:	00bfffc4 	movi	r2,-1
 200c450:	e0bffe15 	stw	r2,-8(fp)
 200c454:	00000e06 	br	200c490 <write+0x108>
      }
      return rval;
 200c458:	e0bff917 	ldw	r2,-28(fp)
 200c45c:	e0bffe15 	stw	r2,-8(fp)
 200c460:	00000b06 	br	200c490 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200c464:	200c4a80 	call	200c4a8 <alt_get_errno>
 200c468:	1007883a 	mov	r3,r2
 200c46c:	00800344 	movi	r2,13
 200c470:	18800015 	stw	r2,0(r3)
 200c474:	00000406 	br	200c488 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 200c478:	200c4a80 	call	200c4a8 <alt_get_errno>
 200c47c:	1007883a 	mov	r3,r2
 200c480:	00801444 	movi	r2,81
 200c484:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200c488:	00bfffc4 	movi	r2,-1
 200c48c:	e0bffe15 	stw	r2,-8(fp)
 200c490:	e0bffe17 	ldw	r2,-8(fp)
}
 200c494:	e037883a 	mov	sp,fp
 200c498:	dfc00117 	ldw	ra,4(sp)
 200c49c:	df000017 	ldw	fp,0(sp)
 200c4a0:	dec00204 	addi	sp,sp,8
 200c4a4:	f800283a 	ret

0200c4a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200c4a8:	defffd04 	addi	sp,sp,-12
 200c4ac:	dfc00215 	stw	ra,8(sp)
 200c4b0:	df000115 	stw	fp,4(sp)
 200c4b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200c4b8:	00808074 	movhi	r2,513
 200c4bc:	10851a04 	addi	r2,r2,5224
 200c4c0:	10800017 	ldw	r2,0(r2)
 200c4c4:	1005003a 	cmpeq	r2,r2,zero
 200c4c8:	1000061e 	bne	r2,zero,200c4e4 <alt_get_errno+0x3c>
 200c4cc:	00808074 	movhi	r2,513
 200c4d0:	10851a04 	addi	r2,r2,5224
 200c4d4:	10800017 	ldw	r2,0(r2)
 200c4d8:	103ee83a 	callr	r2
 200c4dc:	e0bfff15 	stw	r2,-4(fp)
 200c4e0:	00000306 	br	200c4f0 <alt_get_errno+0x48>
 200c4e4:	00808074 	movhi	r2,513
 200c4e8:	108c0604 	addi	r2,r2,12312
 200c4ec:	e0bfff15 	stw	r2,-4(fp)
 200c4f0:	e0bfff17 	ldw	r2,-4(fp)
}
 200c4f4:	e037883a 	mov	sp,fp
 200c4f8:	dfc00117 	ldw	ra,4(sp)
 200c4fc:	df000017 	ldw	fp,0(sp)
 200c500:	dec00204 	addi	sp,sp,8
 200c504:	f800283a 	ret

0200c508 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200c508:	defffd04 	addi	sp,sp,-12
 200c50c:	dfc00215 	stw	ra,8(sp)
 200c510:	df000115 	stw	fp,4(sp)
 200c514:	df000104 	addi	fp,sp,4
 200c518:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
 200c51c:	200ec340 	call	200ec34 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 200c520:	00800044 	movi	r2,1
 200c524:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 200c528:	e037883a 	mov	sp,fp
 200c52c:	dfc00117 	ldw	ra,4(sp)
 200c530:	df000017 	ldw	fp,0(sp)
 200c534:	dec00204 	addi	sp,sp,8
 200c538:	f800283a 	ret

0200c53c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200c53c:	defffe04 	addi	sp,sp,-8
 200c540:	dfc00115 	stw	ra,4(sp)
 200c544:	df000015 	stw	fp,0(sp)
 200c548:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 200c54c:	01001004 	movi	r4,64
 200c550:	000b883a 	mov	r5,zero
 200c554:	000d883a 	mov	r6,zero
 200c558:	01c0fa04 	movi	r7,1000
 200c55c:	200e0400 	call	200e040 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 200c560:	01008074 	movhi	r4,513
 200c564:	2100b904 	addi	r4,r4,740
 200c568:	000b883a 	mov	r5,zero
 200c56c:	01800404 	movi	r6,16
 200c570:	200c72c0 	call	200c72c <altera_avalon_jtag_uart_init>
 200c574:	01008074 	movhi	r4,513
 200c578:	2100af04 	addi	r4,r4,700
 200c57c:	200c5ac0 	call	200c5ac <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
 200c580:	01008074 	movhi	r4,513
 200c584:	2104d104 	addi	r4,r4,4932
 200c588:	200de3c0 	call	200de3c <altera_avalon_lcd_16207_init>
 200c58c:	01008074 	movhi	r4,513
 200c590:	2104c704 	addi	r4,r4,4892
 200c594:	200c5ac0 	call	200c5ac <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
 200c598:	e037883a 	mov	sp,fp
 200c59c:	dfc00117 	ldw	ra,4(sp)
 200c5a0:	df000017 	ldw	fp,0(sp)
 200c5a4:	dec00204 	addi	sp,sp,8
 200c5a8:	f800283a 	ret

0200c5ac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200c5ac:	defffd04 	addi	sp,sp,-12
 200c5b0:	dfc00215 	stw	ra,8(sp)
 200c5b4:	df000115 	stw	fp,4(sp)
 200c5b8:	df000104 	addi	fp,sp,4
 200c5bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 200c5c0:	e13fff17 	ldw	r4,-4(fp)
 200c5c4:	01408074 	movhi	r5,513
 200c5c8:	29451704 	addi	r5,r5,5212
 200c5cc:	200e3b40 	call	200e3b4 <alt_dev_llist_insert>
}
 200c5d0:	e037883a 	mov	sp,fp
 200c5d4:	dfc00117 	ldw	ra,4(sp)
 200c5d8:	df000017 	ldw	fp,0(sp)
 200c5dc:	dec00204 	addi	sp,sp,8
 200c5e0:	f800283a 	ret

0200c5e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200c5e4:	defffa04 	addi	sp,sp,-24
 200c5e8:	dfc00515 	stw	ra,20(sp)
 200c5ec:	df000415 	stw	fp,16(sp)
 200c5f0:	df000404 	addi	fp,sp,16
 200c5f4:	e13ffd15 	stw	r4,-12(fp)
 200c5f8:	e17ffe15 	stw	r5,-8(fp)
 200c5fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200c600:	e0bffd17 	ldw	r2,-12(fp)
 200c604:	10800017 	ldw	r2,0(r2)
 200c608:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200c60c:	e0bffc17 	ldw	r2,-16(fp)
 200c610:	11000a04 	addi	r4,r2,40
 200c614:	e0bffd17 	ldw	r2,-12(fp)
 200c618:	11c00217 	ldw	r7,8(r2)
 200c61c:	e17ffe17 	ldw	r5,-8(fp)
 200c620:	e1bfff17 	ldw	r6,-4(fp)
 200c624:	200cc2c0 	call	200cc2c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 200c628:	e037883a 	mov	sp,fp
 200c62c:	dfc00117 	ldw	ra,4(sp)
 200c630:	df000017 	ldw	fp,0(sp)
 200c634:	dec00204 	addi	sp,sp,8
 200c638:	f800283a 	ret

0200c63c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200c63c:	defffa04 	addi	sp,sp,-24
 200c640:	dfc00515 	stw	ra,20(sp)
 200c644:	df000415 	stw	fp,16(sp)
 200c648:	df000404 	addi	fp,sp,16
 200c64c:	e13ffd15 	stw	r4,-12(fp)
 200c650:	e17ffe15 	stw	r5,-8(fp)
 200c654:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200c658:	e0bffd17 	ldw	r2,-12(fp)
 200c65c:	10800017 	ldw	r2,0(r2)
 200c660:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200c664:	e0bffc17 	ldw	r2,-16(fp)
 200c668:	11000a04 	addi	r4,r2,40
 200c66c:	e0bffd17 	ldw	r2,-12(fp)
 200c670:	11c00217 	ldw	r7,8(r2)
 200c674:	e17ffe17 	ldw	r5,-8(fp)
 200c678:	e1bfff17 	ldw	r6,-4(fp)
 200c67c:	200ce500 	call	200ce50 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 200c680:	e037883a 	mov	sp,fp
 200c684:	dfc00117 	ldw	ra,4(sp)
 200c688:	df000017 	ldw	fp,0(sp)
 200c68c:	dec00204 	addi	sp,sp,8
 200c690:	f800283a 	ret

0200c694 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 200c694:	defffc04 	addi	sp,sp,-16
 200c698:	dfc00315 	stw	ra,12(sp)
 200c69c:	df000215 	stw	fp,8(sp)
 200c6a0:	df000204 	addi	fp,sp,8
 200c6a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200c6a8:	e0bfff17 	ldw	r2,-4(fp)
 200c6ac:	10800017 	ldw	r2,0(r2)
 200c6b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 200c6b4:	e0bffe17 	ldw	r2,-8(fp)
 200c6b8:	11000a04 	addi	r4,r2,40
 200c6bc:	e0bfff17 	ldw	r2,-4(fp)
 200c6c0:	11400217 	ldw	r5,8(r2)
 200c6c4:	200cac40 	call	200cac4 <altera_avalon_jtag_uart_close>
}
 200c6c8:	e037883a 	mov	sp,fp
 200c6cc:	dfc00117 	ldw	ra,4(sp)
 200c6d0:	df000017 	ldw	fp,0(sp)
 200c6d4:	dec00204 	addi	sp,sp,8
 200c6d8:	f800283a 	ret

0200c6dc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 200c6dc:	defffa04 	addi	sp,sp,-24
 200c6e0:	dfc00515 	stw	ra,20(sp)
 200c6e4:	df000415 	stw	fp,16(sp)
 200c6e8:	df000404 	addi	fp,sp,16
 200c6ec:	e13ffd15 	stw	r4,-12(fp)
 200c6f0:	e17ffe15 	stw	r5,-8(fp)
 200c6f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 200c6f8:	e0bffd17 	ldw	r2,-12(fp)
 200c6fc:	10800017 	ldw	r2,0(r2)
 200c700:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 200c704:	e0bffc17 	ldw	r2,-16(fp)
 200c708:	11000a04 	addi	r4,r2,40
 200c70c:	e17ffe17 	ldw	r5,-8(fp)
 200c710:	e1bfff17 	ldw	r6,-4(fp)
 200c714:	200cb380 	call	200cb38 <altera_avalon_jtag_uart_ioctl>
}
 200c718:	e037883a 	mov	sp,fp
 200c71c:	dfc00117 	ldw	ra,4(sp)
 200c720:	df000017 	ldw	fp,0(sp)
 200c724:	dec00204 	addi	sp,sp,8
 200c728:	f800283a 	ret

0200c72c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 200c72c:	defffa04 	addi	sp,sp,-24
 200c730:	dfc00515 	stw	ra,20(sp)
 200c734:	df000415 	stw	fp,16(sp)
 200c738:	df000404 	addi	fp,sp,16
 200c73c:	e13ffd15 	stw	r4,-12(fp)
 200c740:	e17ffe15 	stw	r5,-8(fp)
 200c744:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200c748:	e0fffd17 	ldw	r3,-12(fp)
 200c74c:	00800044 	movi	r2,1
 200c750:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 200c754:	e0bffd17 	ldw	r2,-12(fp)
 200c758:	10800017 	ldw	r2,0(r2)
 200c75c:	11000104 	addi	r4,r2,4
 200c760:	e0bffd17 	ldw	r2,-12(fp)
 200c764:	10800817 	ldw	r2,32(r2)
 200c768:	1007883a 	mov	r3,r2
 200c76c:	2005883a 	mov	r2,r4
 200c770:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 200c774:	e13ffe17 	ldw	r4,-8(fp)
 200c778:	e17fff17 	ldw	r5,-4(fp)
 200c77c:	d8000015 	stw	zero,0(sp)
 200c780:	01808074 	movhi	r6,513
 200c784:	31b1fb04 	addi	r6,r6,-14356
 200c788:	e1fffd17 	ldw	r7,-12(fp)
 200c78c:	200e82c0 	call	200e82c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 200c790:	e0bffd17 	ldw	r2,-12(fp)
 200c794:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 200c798:	e0bffd17 	ldw	r2,-12(fp)
 200c79c:	11000204 	addi	r4,r2,8
 200c7a0:	00808074 	movhi	r2,513
 200c7a4:	108c1404 	addi	r2,r2,12368
 200c7a8:	10800017 	ldw	r2,0(r2)
 200c7ac:	100b883a 	mov	r5,r2
 200c7b0:	01808074 	movhi	r6,513
 200c7b4:	31b28504 	addi	r6,r6,-13804
 200c7b8:	e1fffd17 	ldw	r7,-12(fp)
 200c7bc:	200e0d00 	call	200e0d0 <alt_alarm_start>
 200c7c0:	1004403a 	cmpge	r2,r2,zero
 200c7c4:	1000041e 	bne	r2,zero,200c7d8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 200c7c8:	e0fffd17 	ldw	r3,-12(fp)
 200c7cc:	00a00034 	movhi	r2,32768
 200c7d0:	10bfffc4 	addi	r2,r2,-1
 200c7d4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 200c7d8:	e037883a 	mov	sp,fp
 200c7dc:	dfc00117 	ldw	ra,4(sp)
 200c7e0:	df000017 	ldw	fp,0(sp)
 200c7e4:	dec00204 	addi	sp,sp,8
 200c7e8:	f800283a 	ret

0200c7ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 200c7ec:	defff804 	addi	sp,sp,-32
 200c7f0:	df000715 	stw	fp,28(sp)
 200c7f4:	df000704 	addi	fp,sp,28
 200c7f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 200c7fc:	e0bfff17 	ldw	r2,-4(fp)
 200c800:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 200c804:	e0bffe17 	ldw	r2,-8(fp)
 200c808:	10800017 	ldw	r2,0(r2)
 200c80c:	e0bffd15 	stw	r2,-12(fp)
 200c810:	00000006 	br	200c814 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200c814:	e0bffd17 	ldw	r2,-12(fp)
 200c818:	10800104 	addi	r2,r2,4
 200c81c:	10800037 	ldwio	r2,0(r2)
 200c820:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 200c824:	e0bffc17 	ldw	r2,-16(fp)
 200c828:	1080c00c 	andi	r2,r2,768
 200c82c:	1005003a 	cmpeq	r2,r2,zero
 200c830:	1000741e 	bne	r2,zero,200ca04 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 200c834:	e0bffc17 	ldw	r2,-16(fp)
 200c838:	1080400c 	andi	r2,r2,256
 200c83c:	1005003a 	cmpeq	r2,r2,zero
 200c840:	1000351e 	bne	r2,zero,200c918 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 200c844:	00800074 	movhi	r2,1
 200c848:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200c84c:	e0bffe17 	ldw	r2,-8(fp)
 200c850:	10800a17 	ldw	r2,40(r2)
 200c854:	10800044 	addi	r2,r2,1
 200c858:	1081ffcc 	andi	r2,r2,2047
 200c85c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 200c860:	e0bffe17 	ldw	r2,-8(fp)
 200c864:	10c00b17 	ldw	r3,44(r2)
 200c868:	e0bffa17 	ldw	r2,-24(fp)
 200c86c:	18801626 	beq	r3,r2,200c8c8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200c870:	e0bffd17 	ldw	r2,-12(fp)
 200c874:	10800037 	ldwio	r2,0(r2)
 200c878:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 200c87c:	e0bffb17 	ldw	r2,-20(fp)
 200c880:	10a0000c 	andi	r2,r2,32768
 200c884:	1005003a 	cmpeq	r2,r2,zero
 200c888:	10000f1e 	bne	r2,zero,200c8c8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 200c88c:	e0bffe17 	ldw	r2,-8(fp)
 200c890:	10c00a17 	ldw	r3,40(r2)
 200c894:	e0bffb17 	ldw	r2,-20(fp)
 200c898:	1009883a 	mov	r4,r2
 200c89c:	e0bffe17 	ldw	r2,-8(fp)
 200c8a0:	1885883a 	add	r2,r3,r2
 200c8a4:	10800e04 	addi	r2,r2,56
 200c8a8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200c8ac:	e0bffe17 	ldw	r2,-8(fp)
 200c8b0:	10800a17 	ldw	r2,40(r2)
 200c8b4:	10800044 	addi	r2,r2,1
 200c8b8:	10c1ffcc 	andi	r3,r2,2047
 200c8bc:	e0bffe17 	ldw	r2,-8(fp)
 200c8c0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 200c8c4:	003fe106 	br	200c84c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 200c8c8:	e0bffb17 	ldw	r2,-20(fp)
 200c8cc:	10bfffec 	andhi	r2,r2,65535
 200c8d0:	1005003a 	cmpeq	r2,r2,zero
 200c8d4:	1000101e 	bne	r2,zero,200c918 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200c8d8:	e0bffe17 	ldw	r2,-8(fp)
 200c8dc:	10c00817 	ldw	r3,32(r2)
 200c8e0:	00bfff84 	movi	r2,-2
 200c8e4:	1886703a 	and	r3,r3,r2
 200c8e8:	e0bffe17 	ldw	r2,-8(fp)
 200c8ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 200c8f0:	e0bffd17 	ldw	r2,-12(fp)
 200c8f4:	11000104 	addi	r4,r2,4
 200c8f8:	e0bffe17 	ldw	r2,-8(fp)
 200c8fc:	10800817 	ldw	r2,32(r2)
 200c900:	1007883a 	mov	r3,r2
 200c904:	2005883a 	mov	r2,r4
 200c908:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200c90c:	e0bffd17 	ldw	r2,-12(fp)
 200c910:	10800104 	addi	r2,r2,4
 200c914:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 200c918:	e0bffc17 	ldw	r2,-16(fp)
 200c91c:	1080800c 	andi	r2,r2,512
 200c920:	1005003a 	cmpeq	r2,r2,zero
 200c924:	103fbb1e 	bne	r2,zero,200c814 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 200c928:	e0bffc17 	ldw	r2,-16(fp)
 200c92c:	10bfffec 	andhi	r2,r2,65535
 200c930:	1004d43a 	srli	r2,r2,16
 200c934:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 200c938:	00001506 	br	200c990 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 200c93c:	e13ffd17 	ldw	r4,-12(fp)
 200c940:	e0bffe17 	ldw	r2,-8(fp)
 200c944:	10c00d17 	ldw	r3,52(r2)
 200c948:	e0bffe17 	ldw	r2,-8(fp)
 200c94c:	1885883a 	add	r2,r3,r2
 200c950:	10820e04 	addi	r2,r2,2104
 200c954:	10800003 	ldbu	r2,0(r2)
 200c958:	10c03fcc 	andi	r3,r2,255
 200c95c:	18c0201c 	xori	r3,r3,128
 200c960:	18ffe004 	addi	r3,r3,-128
 200c964:	2005883a 	mov	r2,r4
 200c968:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200c96c:	e0bffe17 	ldw	r2,-8(fp)
 200c970:	10800d17 	ldw	r2,52(r2)
 200c974:	10800044 	addi	r2,r2,1
 200c978:	10c1ffcc 	andi	r3,r2,2047
 200c97c:	e0bffe17 	ldw	r2,-8(fp)
 200c980:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 200c984:	e0bff917 	ldw	r2,-28(fp)
 200c988:	10bfffc4 	addi	r2,r2,-1
 200c98c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 200c990:	e0bff917 	ldw	r2,-28(fp)
 200c994:	1005003a 	cmpeq	r2,r2,zero
 200c998:	1000051e 	bne	r2,zero,200c9b0 <altera_avalon_jtag_uart_irq+0x1c4>
 200c99c:	e0bffe17 	ldw	r2,-8(fp)
 200c9a0:	10c00d17 	ldw	r3,52(r2)
 200c9a4:	e0bffe17 	ldw	r2,-8(fp)
 200c9a8:	10800c17 	ldw	r2,48(r2)
 200c9ac:	18bfe31e 	bne	r3,r2,200c93c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 200c9b0:	e0bff917 	ldw	r2,-28(fp)
 200c9b4:	1005003a 	cmpeq	r2,r2,zero
 200c9b8:	103f961e 	bne	r2,zero,200c814 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200c9bc:	e0bffe17 	ldw	r2,-8(fp)
 200c9c0:	10c00817 	ldw	r3,32(r2)
 200c9c4:	00bfff44 	movi	r2,-3
 200c9c8:	1886703a 	and	r3,r3,r2
 200c9cc:	e0bffe17 	ldw	r2,-8(fp)
 200c9d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200c9d4:	e0bffe17 	ldw	r2,-8(fp)
 200c9d8:	10800017 	ldw	r2,0(r2)
 200c9dc:	11000104 	addi	r4,r2,4
 200c9e0:	e0bffe17 	ldw	r2,-8(fp)
 200c9e4:	10800817 	ldw	r2,32(r2)
 200c9e8:	1007883a 	mov	r3,r2
 200c9ec:	2005883a 	mov	r2,r4
 200c9f0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200c9f4:	e0bffd17 	ldw	r2,-12(fp)
 200c9f8:	10800104 	addi	r2,r2,4
 200c9fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 200ca00:	003f8406 	br	200c814 <altera_avalon_jtag_uart_irq+0x28>
}
 200ca04:	e037883a 	mov	sp,fp
 200ca08:	df000017 	ldw	fp,0(sp)
 200ca0c:	dec00104 	addi	sp,sp,4
 200ca10:	f800283a 	ret

0200ca14 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 200ca14:	defffc04 	addi	sp,sp,-16
 200ca18:	df000315 	stw	fp,12(sp)
 200ca1c:	df000304 	addi	fp,sp,12
 200ca20:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 200ca24:	e0bfff17 	ldw	r2,-4(fp)
 200ca28:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 200ca2c:	e0bffe17 	ldw	r2,-8(fp)
 200ca30:	10800017 	ldw	r2,0(r2)
 200ca34:	10800104 	addi	r2,r2,4
 200ca38:	10800037 	ldwio	r2,0(r2)
 200ca3c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 200ca40:	e0bffd17 	ldw	r2,-12(fp)
 200ca44:	1081000c 	andi	r2,r2,1024
 200ca48:	1005003a 	cmpeq	r2,r2,zero
 200ca4c:	10000c1e 	bne	r2,zero,200ca80 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 200ca50:	e0bffe17 	ldw	r2,-8(fp)
 200ca54:	10800017 	ldw	r2,0(r2)
 200ca58:	11000104 	addi	r4,r2,4
 200ca5c:	e0bffe17 	ldw	r2,-8(fp)
 200ca60:	10800817 	ldw	r2,32(r2)
 200ca64:	10810014 	ori	r2,r2,1024
 200ca68:	1007883a 	mov	r3,r2
 200ca6c:	2005883a 	mov	r2,r4
 200ca70:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 200ca74:	e0bffe17 	ldw	r2,-8(fp)
 200ca78:	10000915 	stw	zero,36(r2)
 200ca7c:	00000a06 	br	200caa8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 200ca80:	e0bffe17 	ldw	r2,-8(fp)
 200ca84:	10c00917 	ldw	r3,36(r2)
 200ca88:	00a00034 	movhi	r2,32768
 200ca8c:	10bfff04 	addi	r2,r2,-4
 200ca90:	10c00536 	bltu	r2,r3,200caa8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 200ca94:	e0bffe17 	ldw	r2,-8(fp)
 200ca98:	10800917 	ldw	r2,36(r2)
 200ca9c:	10c00044 	addi	r3,r2,1
 200caa0:	e0bffe17 	ldw	r2,-8(fp)
 200caa4:	10c00915 	stw	r3,36(r2)
 200caa8:	00808074 	movhi	r2,513
 200caac:	108c1404 	addi	r2,r2,12368
 200cab0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 200cab4:	e037883a 	mov	sp,fp
 200cab8:	df000017 	ldw	fp,0(sp)
 200cabc:	dec00104 	addi	sp,sp,4
 200cac0:	f800283a 	ret

0200cac4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 200cac4:	defffc04 	addi	sp,sp,-16
 200cac8:	df000315 	stw	fp,12(sp)
 200cacc:	df000304 	addi	fp,sp,12
 200cad0:	e13ffd15 	stw	r4,-12(fp)
 200cad4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200cad8:	00000706 	br	200caf8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 200cadc:	e0bffe17 	ldw	r2,-8(fp)
 200cae0:	1090000c 	andi	r2,r2,16384
 200cae4:	1005003a 	cmpeq	r2,r2,zero
 200cae8:	1000031e 	bne	r2,zero,200caf8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 200caec:	00bffd44 	movi	r2,-11
 200caf0:	e0bfff15 	stw	r2,-4(fp)
 200caf4:	00000b06 	br	200cb24 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200caf8:	e0bffd17 	ldw	r2,-12(fp)
 200cafc:	10c00d17 	ldw	r3,52(r2)
 200cb00:	e0bffd17 	ldw	r2,-12(fp)
 200cb04:	10800c17 	ldw	r2,48(r2)
 200cb08:	18800526 	beq	r3,r2,200cb20 <altera_avalon_jtag_uart_close+0x5c>
 200cb0c:	e0bffd17 	ldw	r2,-12(fp)
 200cb10:	10c00917 	ldw	r3,36(r2)
 200cb14:	e0bffd17 	ldw	r2,-12(fp)
 200cb18:	10800117 	ldw	r2,4(r2)
 200cb1c:	18bfef36 	bltu	r3,r2,200cadc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200cb20:	e03fff15 	stw	zero,-4(fp)
 200cb24:	e0bfff17 	ldw	r2,-4(fp)
}
 200cb28:	e037883a 	mov	sp,fp
 200cb2c:	df000017 	ldw	fp,0(sp)
 200cb30:	dec00104 	addi	sp,sp,4
 200cb34:	f800283a 	ret

0200cb38 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 200cb38:	defff804 	addi	sp,sp,-32
 200cb3c:	df000715 	stw	fp,28(sp)
 200cb40:	df000704 	addi	fp,sp,28
 200cb44:	e13ffb15 	stw	r4,-20(fp)
 200cb48:	e17ffc15 	stw	r5,-16(fp)
 200cb4c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 200cb50:	00bff9c4 	movi	r2,-25
 200cb54:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 200cb58:	e0bffc17 	ldw	r2,-16(fp)
 200cb5c:	e0bfff15 	stw	r2,-4(fp)
 200cb60:	e0ffff17 	ldw	r3,-4(fp)
 200cb64:	189a8060 	cmpeqi	r2,r3,27137
 200cb68:	1000041e 	bne	r2,zero,200cb7c <altera_avalon_jtag_uart_ioctl+0x44>
 200cb6c:	e0ffff17 	ldw	r3,-4(fp)
 200cb70:	189a80a0 	cmpeqi	r2,r3,27138
 200cb74:	10001b1e 	bne	r2,zero,200cbe4 <altera_avalon_jtag_uart_ioctl+0xac>
 200cb78:	00002706 	br	200cc18 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 200cb7c:	e0bffb17 	ldw	r2,-20(fp)
 200cb80:	10c00117 	ldw	r3,4(r2)
 200cb84:	00a00034 	movhi	r2,32768
 200cb88:	10bfffc4 	addi	r2,r2,-1
 200cb8c:	18802226 	beq	r3,r2,200cc18 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 200cb90:	e0bffd17 	ldw	r2,-12(fp)
 200cb94:	10800017 	ldw	r2,0(r2)
 200cb98:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 200cb9c:	e0bff917 	ldw	r2,-28(fp)
 200cba0:	10800090 	cmplti	r2,r2,2
 200cba4:	1000071e 	bne	r2,zero,200cbc4 <altera_avalon_jtag_uart_ioctl+0x8c>
 200cba8:	e0fff917 	ldw	r3,-28(fp)
 200cbac:	00a00034 	movhi	r2,32768
 200cbb0:	10bfffc4 	addi	r2,r2,-1
 200cbb4:	18800326 	beq	r3,r2,200cbc4 <altera_avalon_jtag_uart_ioctl+0x8c>
 200cbb8:	e0bff917 	ldw	r2,-28(fp)
 200cbbc:	e0bffe15 	stw	r2,-8(fp)
 200cbc0:	00000306 	br	200cbd0 <altera_avalon_jtag_uart_ioctl+0x98>
 200cbc4:	00e00034 	movhi	r3,32768
 200cbc8:	18ffff84 	addi	r3,r3,-2
 200cbcc:	e0fffe15 	stw	r3,-8(fp)
 200cbd0:	e0bffb17 	ldw	r2,-20(fp)
 200cbd4:	e0fffe17 	ldw	r3,-8(fp)
 200cbd8:	10c00115 	stw	r3,4(r2)
      rc = 0;
 200cbdc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 200cbe0:	00000d06 	br	200cc18 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 200cbe4:	e0bffb17 	ldw	r2,-20(fp)
 200cbe8:	10c00117 	ldw	r3,4(r2)
 200cbec:	00a00034 	movhi	r2,32768
 200cbf0:	10bfffc4 	addi	r2,r2,-1
 200cbf4:	18800826 	beq	r3,r2,200cc18 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 200cbf8:	e13ffd17 	ldw	r4,-12(fp)
 200cbfc:	e0bffb17 	ldw	r2,-20(fp)
 200cc00:	10c00917 	ldw	r3,36(r2)
 200cc04:	e0bffb17 	ldw	r2,-20(fp)
 200cc08:	10800117 	ldw	r2,4(r2)
 200cc0c:	1885803a 	cmpltu	r2,r3,r2
 200cc10:	20800015 	stw	r2,0(r4)
      rc = 0;
 200cc14:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 200cc18:	e0bffa17 	ldw	r2,-24(fp)
}
 200cc1c:	e037883a 	mov	sp,fp
 200cc20:	df000017 	ldw	fp,0(sp)
 200cc24:	dec00104 	addi	sp,sp,4
 200cc28:	f800283a 	ret

0200cc2c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 200cc2c:	defff204 	addi	sp,sp,-56
 200cc30:	dfc00d15 	stw	ra,52(sp)
 200cc34:	df000c15 	stw	fp,48(sp)
 200cc38:	df000c04 	addi	fp,sp,48
 200cc3c:	e13ffb15 	stw	r4,-20(fp)
 200cc40:	e17ffc15 	stw	r5,-16(fp)
 200cc44:	e1bffd15 	stw	r6,-12(fp)
 200cc48:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 200cc4c:	e0bffc17 	ldw	r2,-16(fp)
 200cc50:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200cc54:	00004806 	br	200cd78 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 200cc58:	e0bffb17 	ldw	r2,-20(fp)
 200cc5c:	10800a17 	ldw	r2,40(r2)
 200cc60:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 200cc64:	e0bffb17 	ldw	r2,-20(fp)
 200cc68:	10800b17 	ldw	r2,44(r2)
 200cc6c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 200cc70:	e0fff717 	ldw	r3,-36(fp)
 200cc74:	e0bff617 	ldw	r2,-40(fp)
 200cc78:	18800536 	bltu	r3,r2,200cc90 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 200cc7c:	e0bff717 	ldw	r2,-36(fp)
 200cc80:	e0fff617 	ldw	r3,-40(fp)
 200cc84:	10c5c83a 	sub	r2,r2,r3
 200cc88:	e0bff815 	stw	r2,-32(fp)
 200cc8c:	00000406 	br	200cca0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 200cc90:	00820004 	movi	r2,2048
 200cc94:	e0fff617 	ldw	r3,-40(fp)
 200cc98:	10c5c83a 	sub	r2,r2,r3
 200cc9c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 200cca0:	e0bff817 	ldw	r2,-32(fp)
 200cca4:	1005003a 	cmpeq	r2,r2,zero
 200cca8:	10001f1e 	bne	r2,zero,200cd28 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 200ccac:	e0fffd17 	ldw	r3,-12(fp)
 200ccb0:	e0bff817 	ldw	r2,-32(fp)
 200ccb4:	1880022e 	bgeu	r3,r2,200ccc0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 200ccb8:	e0bffd17 	ldw	r2,-12(fp)
 200ccbc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 200ccc0:	e0bffb17 	ldw	r2,-20(fp)
 200ccc4:	10c00e04 	addi	r3,r2,56
 200ccc8:	e0bff617 	ldw	r2,-40(fp)
 200cccc:	1887883a 	add	r3,r3,r2
 200ccd0:	e0bffa17 	ldw	r2,-24(fp)
 200ccd4:	1009883a 	mov	r4,r2
 200ccd8:	180b883a 	mov	r5,r3
 200ccdc:	e1bff817 	ldw	r6,-32(fp)
 200cce0:	2007cc00 	call	2007cc0 <memcpy>
      ptr   += n;
 200cce4:	e0fff817 	ldw	r3,-32(fp)
 200cce8:	e0bffa17 	ldw	r2,-24(fp)
 200ccec:	10c5883a 	add	r2,r2,r3
 200ccf0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 200ccf4:	e0fffd17 	ldw	r3,-12(fp)
 200ccf8:	e0bff817 	ldw	r2,-32(fp)
 200ccfc:	1885c83a 	sub	r2,r3,r2
 200cd00:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200cd04:	e0fff617 	ldw	r3,-40(fp)
 200cd08:	e0bff817 	ldw	r2,-32(fp)
 200cd0c:	1885883a 	add	r2,r3,r2
 200cd10:	10c1ffcc 	andi	r3,r2,2047
 200cd14:	e0bffb17 	ldw	r2,-20(fp)
 200cd18:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 200cd1c:	e0bffd17 	ldw	r2,-12(fp)
 200cd20:	10800048 	cmpgei	r2,r2,1
 200cd24:	103fcc1e 	bne	r2,zero,200cc58 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 200cd28:	e0fffa17 	ldw	r3,-24(fp)
 200cd2c:	e0bffc17 	ldw	r2,-16(fp)
 200cd30:	1880141e 	bne	r3,r2,200cd84 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 200cd34:	e0bffe17 	ldw	r2,-8(fp)
 200cd38:	1090000c 	andi	r2,r2,16384
 200cd3c:	1004c03a 	cmpne	r2,r2,zero
 200cd40:	1000101e 	bne	r2,zero,200cd84 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 200cd44:	e0bffb17 	ldw	r2,-20(fp)
 200cd48:	10c00a17 	ldw	r3,40(r2)
 200cd4c:	e0bff717 	ldw	r2,-36(fp)
 200cd50:	1880051e 	bne	r3,r2,200cd68 <altera_avalon_jtag_uart_read+0x13c>
 200cd54:	e0bffb17 	ldw	r2,-20(fp)
 200cd58:	10c00917 	ldw	r3,36(r2)
 200cd5c:	e0bffb17 	ldw	r2,-20(fp)
 200cd60:	10800117 	ldw	r2,4(r2)
 200cd64:	18bff736 	bltu	r3,r2,200cd44 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 200cd68:	e0bffb17 	ldw	r2,-20(fp)
 200cd6c:	10c00a17 	ldw	r3,40(r2)
 200cd70:	e0bff717 	ldw	r2,-36(fp)
 200cd74:	18800326 	beq	r3,r2,200cd84 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200cd78:	e0bffd17 	ldw	r2,-12(fp)
 200cd7c:	10800048 	cmpgei	r2,r2,1
 200cd80:	103fb51e 	bne	r2,zero,200cc58 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 200cd84:	e0fffa17 	ldw	r3,-24(fp)
 200cd88:	e0bffc17 	ldw	r2,-16(fp)
 200cd8c:	18801926 	beq	r3,r2,200cdf4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200cd90:	0005303a 	rdctl	r2,status
 200cd94:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200cd98:	e0fff517 	ldw	r3,-44(fp)
 200cd9c:	00bfff84 	movi	r2,-2
 200cda0:	1884703a 	and	r2,r3,r2
 200cda4:	1001703a 	wrctl	status,r2
  
  return context;
 200cda8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 200cdac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200cdb0:	e0bffb17 	ldw	r2,-20(fp)
 200cdb4:	10800817 	ldw	r2,32(r2)
 200cdb8:	10c00054 	ori	r3,r2,1
 200cdbc:	e0bffb17 	ldw	r2,-20(fp)
 200cdc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200cdc4:	e0bffb17 	ldw	r2,-20(fp)
 200cdc8:	10800017 	ldw	r2,0(r2)
 200cdcc:	11000104 	addi	r4,r2,4
 200cdd0:	e0bffb17 	ldw	r2,-20(fp)
 200cdd4:	10800817 	ldw	r2,32(r2)
 200cdd8:	1007883a 	mov	r3,r2
 200cddc:	2005883a 	mov	r2,r4
 200cde0:	10c00035 	stwio	r3,0(r2)
 200cde4:	e0bff917 	ldw	r2,-28(fp)
 200cde8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200cdec:	e0bff417 	ldw	r2,-48(fp)
 200cdf0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 200cdf4:	e0fffa17 	ldw	r3,-24(fp)
 200cdf8:	e0bffc17 	ldw	r2,-16(fp)
 200cdfc:	18800526 	beq	r3,r2,200ce14 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 200ce00:	e0fffa17 	ldw	r3,-24(fp)
 200ce04:	e0bffc17 	ldw	r2,-16(fp)
 200ce08:	1887c83a 	sub	r3,r3,r2
 200ce0c:	e0ffff15 	stw	r3,-4(fp)
 200ce10:	00000906 	br	200ce38 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 200ce14:	e0bffe17 	ldw	r2,-8(fp)
 200ce18:	1090000c 	andi	r2,r2,16384
 200ce1c:	1005003a 	cmpeq	r2,r2,zero
 200ce20:	1000031e 	bne	r2,zero,200ce30 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 200ce24:	00bffd44 	movi	r2,-11
 200ce28:	e0bfff15 	stw	r2,-4(fp)
 200ce2c:	00000206 	br	200ce38 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 200ce30:	00bffec4 	movi	r2,-5
 200ce34:	e0bfff15 	stw	r2,-4(fp)
 200ce38:	e0bfff17 	ldw	r2,-4(fp)
}
 200ce3c:	e037883a 	mov	sp,fp
 200ce40:	dfc00117 	ldw	ra,4(sp)
 200ce44:	df000017 	ldw	fp,0(sp)
 200ce48:	dec00204 	addi	sp,sp,8
 200ce4c:	f800283a 	ret

0200ce50 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 200ce50:	defff204 	addi	sp,sp,-56
 200ce54:	dfc00d15 	stw	ra,52(sp)
 200ce58:	df000c15 	stw	fp,48(sp)
 200ce5c:	df000c04 	addi	fp,sp,48
 200ce60:	e13ffb15 	stw	r4,-20(fp)
 200ce64:	e17ffc15 	stw	r5,-16(fp)
 200ce68:	e1bffd15 	stw	r6,-12(fp)
 200ce6c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 200ce70:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 200ce74:	e0bffc17 	ldw	r2,-16(fp)
 200ce78:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200ce7c:	00003a06 	br	200cf68 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 200ce80:	e0bffb17 	ldw	r2,-20(fp)
 200ce84:	10800c17 	ldw	r2,48(r2)
 200ce88:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 200ce8c:	e0bffb17 	ldw	r2,-20(fp)
 200ce90:	10800d17 	ldw	r2,52(r2)
 200ce94:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 200ce98:	e0fffa17 	ldw	r3,-24(fp)
 200ce9c:	e0bff917 	ldw	r2,-28(fp)
 200cea0:	1880062e 	bgeu	r3,r2,200cebc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 200cea4:	e0fff917 	ldw	r3,-28(fp)
 200cea8:	e0bffa17 	ldw	r2,-24(fp)
 200ceac:	1885c83a 	sub	r2,r3,r2
 200ceb0:	10bfffc4 	addi	r2,r2,-1
 200ceb4:	e0bff815 	stw	r2,-32(fp)
 200ceb8:	00000c06 	br	200ceec <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 200cebc:	e0bff917 	ldw	r2,-28(fp)
 200cec0:	1005003a 	cmpeq	r2,r2,zero
 200cec4:	1000051e 	bne	r2,zero,200cedc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 200cec8:	00820004 	movi	r2,2048
 200cecc:	e0fffa17 	ldw	r3,-24(fp)
 200ced0:	10c5c83a 	sub	r2,r2,r3
 200ced4:	e0bff815 	stw	r2,-32(fp)
 200ced8:	00000406 	br	200ceec <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 200cedc:	0081ffc4 	movi	r2,2047
 200cee0:	e0fffa17 	ldw	r3,-24(fp)
 200cee4:	10c5c83a 	sub	r2,r2,r3
 200cee8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 200ceec:	e0bff817 	ldw	r2,-32(fp)
 200cef0:	1005003a 	cmpeq	r2,r2,zero
 200cef4:	10001f1e 	bne	r2,zero,200cf74 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 200cef8:	e0fffd17 	ldw	r3,-12(fp)
 200cefc:	e0bff817 	ldw	r2,-32(fp)
 200cf00:	1880022e 	bgeu	r3,r2,200cf0c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 200cf04:	e0bffd17 	ldw	r2,-12(fp)
 200cf08:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 200cf0c:	e0bffb17 	ldw	r2,-20(fp)
 200cf10:	10c20e04 	addi	r3,r2,2104
 200cf14:	e0bffa17 	ldw	r2,-24(fp)
 200cf18:	1885883a 	add	r2,r3,r2
 200cf1c:	e0fffc17 	ldw	r3,-16(fp)
 200cf20:	1009883a 	mov	r4,r2
 200cf24:	180b883a 	mov	r5,r3
 200cf28:	e1bff817 	ldw	r6,-32(fp)
 200cf2c:	2007cc00 	call	2007cc0 <memcpy>
      ptr   += n;
 200cf30:	e0fff817 	ldw	r3,-32(fp)
 200cf34:	e0bffc17 	ldw	r2,-16(fp)
 200cf38:	10c5883a 	add	r2,r2,r3
 200cf3c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 200cf40:	e0fffd17 	ldw	r3,-12(fp)
 200cf44:	e0bff817 	ldw	r2,-32(fp)
 200cf48:	1885c83a 	sub	r2,r3,r2
 200cf4c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200cf50:	e0fffa17 	ldw	r3,-24(fp)
 200cf54:	e0bff817 	ldw	r2,-32(fp)
 200cf58:	1885883a 	add	r2,r3,r2
 200cf5c:	10c1ffcc 	andi	r3,r2,2047
 200cf60:	e0bffb17 	ldw	r2,-20(fp)
 200cf64:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200cf68:	e0bffd17 	ldw	r2,-12(fp)
 200cf6c:	10800048 	cmpgei	r2,r2,1
 200cf70:	103fc31e 	bne	r2,zero,200ce80 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200cf74:	0005303a 	rdctl	r2,status
 200cf78:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200cf7c:	e0fff517 	ldw	r3,-44(fp)
 200cf80:	00bfff84 	movi	r2,-2
 200cf84:	1884703a 	and	r2,r3,r2
 200cf88:	1001703a 	wrctl	status,r2
  
  return context;
 200cf8c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 200cf90:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200cf94:	e0bffb17 	ldw	r2,-20(fp)
 200cf98:	10800817 	ldw	r2,32(r2)
 200cf9c:	10c00094 	ori	r3,r2,2
 200cfa0:	e0bffb17 	ldw	r2,-20(fp)
 200cfa4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200cfa8:	e0bffb17 	ldw	r2,-20(fp)
 200cfac:	10800017 	ldw	r2,0(r2)
 200cfb0:	11000104 	addi	r4,r2,4
 200cfb4:	e0bffb17 	ldw	r2,-20(fp)
 200cfb8:	10800817 	ldw	r2,32(r2)
 200cfbc:	1007883a 	mov	r3,r2
 200cfc0:	2005883a 	mov	r2,r4
 200cfc4:	10c00035 	stwio	r3,0(r2)
 200cfc8:	e0bff717 	ldw	r2,-36(fp)
 200cfcc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200cfd0:	e0bff417 	ldw	r2,-48(fp)
 200cfd4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 200cfd8:	e0bffd17 	ldw	r2,-12(fp)
 200cfdc:	10800050 	cmplti	r2,r2,1
 200cfe0:	1000111e 	bne	r2,zero,200d028 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 200cfe4:	e0bffe17 	ldw	r2,-8(fp)
 200cfe8:	1090000c 	andi	r2,r2,16384
 200cfec:	1004c03a 	cmpne	r2,r2,zero
 200cff0:	1000101e 	bne	r2,zero,200d034 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 200cff4:	e0bffb17 	ldw	r2,-20(fp)
 200cff8:	10c00d17 	ldw	r3,52(r2)
 200cffc:	e0bff917 	ldw	r2,-28(fp)
 200d000:	1880051e 	bne	r3,r2,200d018 <altera_avalon_jtag_uart_write+0x1c8>
 200d004:	e0bffb17 	ldw	r2,-20(fp)
 200d008:	10c00917 	ldw	r3,36(r2)
 200d00c:	e0bffb17 	ldw	r2,-20(fp)
 200d010:	10800117 	ldw	r2,4(r2)
 200d014:	18bff736 	bltu	r3,r2,200cff4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 200d018:	e0bffb17 	ldw	r2,-20(fp)
 200d01c:	10c00d17 	ldw	r3,52(r2)
 200d020:	e0bff917 	ldw	r2,-28(fp)
 200d024:	18800326 	beq	r3,r2,200d034 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 200d028:	e0bffd17 	ldw	r2,-12(fp)
 200d02c:	10800048 	cmpgei	r2,r2,1
 200d030:	103fcd1e 	bne	r2,zero,200cf68 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 200d034:	e0fffc17 	ldw	r3,-16(fp)
 200d038:	e0bff617 	ldw	r2,-40(fp)
 200d03c:	18800526 	beq	r3,r2,200d054 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 200d040:	e0fffc17 	ldw	r3,-16(fp)
 200d044:	e0bff617 	ldw	r2,-40(fp)
 200d048:	1887c83a 	sub	r3,r3,r2
 200d04c:	e0ffff15 	stw	r3,-4(fp)
 200d050:	00000906 	br	200d078 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 200d054:	e0bffe17 	ldw	r2,-8(fp)
 200d058:	1090000c 	andi	r2,r2,16384
 200d05c:	1005003a 	cmpeq	r2,r2,zero
 200d060:	1000031e 	bne	r2,zero,200d070 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 200d064:	00bffd44 	movi	r2,-11
 200d068:	e0bfff15 	stw	r2,-4(fp)
 200d06c:	00000206 	br	200d078 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 200d070:	00bffec4 	movi	r2,-5
 200d074:	e0bfff15 	stw	r2,-4(fp)
 200d078:	e0bfff17 	ldw	r2,-4(fp)
}
 200d07c:	e037883a 	mov	sp,fp
 200d080:	dfc00117 	ldw	ra,4(sp)
 200d084:	df000017 	ldw	fp,0(sp)
 200d088:	dec00204 	addi	sp,sp,8
 200d08c:	f800283a 	ret

0200d090 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
 200d090:	defffa04 	addi	sp,sp,-24
 200d094:	dfc00515 	stw	ra,20(sp)
 200d098:	df000415 	stw	fp,16(sp)
 200d09c:	df000404 	addi	fp,sp,16
 200d0a0:	e13ffe15 	stw	r4,-8(fp)
 200d0a4:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
 200d0a8:	e0bffe17 	ldw	r2,-8(fp)
 200d0ac:	10800017 	ldw	r2,0(r2)
 200d0b0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 200d0b4:	008003f4 	movhi	r2,15
 200d0b8:	10909004 	addi	r2,r2,16960
 200d0bc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 200d0c0:	e0bffe17 	ldw	r2,-8(fp)
 200d0c4:	10800803 	ldbu	r2,32(r2)
 200d0c8:	10803fcc 	andi	r2,r2,255
 200d0cc:	1080201c 	xori	r2,r2,128
 200d0d0:	10bfe004 	addi	r2,r2,-128
 200d0d4:	1004c03a 	cmpne	r2,r2,zero
 200d0d8:	1000161e 	bne	r2,zero,200d134 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 200d0dc:	00000a06 	br	200d108 <lcd_write_command+0x78>
    if (--i == 0)
 200d0e0:	e0bffc17 	ldw	r2,-16(fp)
 200d0e4:	10bfffc4 	addi	r2,r2,-1
 200d0e8:	e0bffc15 	stw	r2,-16(fp)
 200d0ec:	e0bffc17 	ldw	r2,-16(fp)
 200d0f0:	1004c03a 	cmpne	r2,r2,zero
 200d0f4:	1000041e 	bne	r2,zero,200d108 <lcd_write_command+0x78>
    {
      sp->broken = 1;
 200d0f8:	e0fffe17 	ldw	r3,-8(fp)
 200d0fc:	00800044 	movi	r2,1
 200d100:	18800805 	stb	r2,32(r3)
      return;
 200d104:	00000b06 	br	200d134 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 200d108:	e0bffd17 	ldw	r2,-12(fp)
 200d10c:	10800104 	addi	r2,r2,4
 200d110:	10800037 	ldwio	r2,0(r2)
 200d114:	1080200c 	andi	r2,r2,128
 200d118:	1004c03a 	cmpne	r2,r2,zero
 200d11c:	103ff01e 	bne	r2,zero,200d0e0 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 200d120:	01001904 	movi	r4,100
 200d124:	200c3580 	call	200c358 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
 200d128:	e0bffd17 	ldw	r2,-12(fp)
 200d12c:	e0ffff03 	ldbu	r3,-4(fp)
 200d130:	10c00035 	stwio	r3,0(r2)
}
 200d134:	e037883a 	mov	sp,fp
 200d138:	dfc00117 	ldw	ra,4(sp)
 200d13c:	df000017 	ldw	fp,0(sp)
 200d140:	dec00204 	addi	sp,sp,8
 200d144:	f800283a 	ret

0200d148 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
 200d148:	defffa04 	addi	sp,sp,-24
 200d14c:	dfc00515 	stw	ra,20(sp)
 200d150:	df000415 	stw	fp,16(sp)
 200d154:	df000404 	addi	fp,sp,16
 200d158:	e13ffe15 	stw	r4,-8(fp)
 200d15c:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
 200d160:	e0bffe17 	ldw	r2,-8(fp)
 200d164:	10800017 	ldw	r2,0(r2)
 200d168:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 200d16c:	008003f4 	movhi	r2,15
 200d170:	10909004 	addi	r2,r2,16960
 200d174:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 200d178:	e0bffe17 	ldw	r2,-8(fp)
 200d17c:	10800803 	ldbu	r2,32(r2)
 200d180:	10803fcc 	andi	r2,r2,255
 200d184:	1080201c 	xori	r2,r2,128
 200d188:	10bfe004 	addi	r2,r2,-128
 200d18c:	1004c03a 	cmpne	r2,r2,zero
 200d190:	10001d1e 	bne	r2,zero,200d208 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 200d194:	00000a06 	br	200d1c0 <lcd_write_data+0x78>
    if (--i == 0)
 200d198:	e0bffc17 	ldw	r2,-16(fp)
 200d19c:	10bfffc4 	addi	r2,r2,-1
 200d1a0:	e0bffc15 	stw	r2,-16(fp)
 200d1a4:	e0bffc17 	ldw	r2,-16(fp)
 200d1a8:	1004c03a 	cmpne	r2,r2,zero
 200d1ac:	1000041e 	bne	r2,zero,200d1c0 <lcd_write_data+0x78>
    {
      sp->broken = 1;
 200d1b0:	e0fffe17 	ldw	r3,-8(fp)
 200d1b4:	00800044 	movi	r2,1
 200d1b8:	18800805 	stb	r2,32(r3)
      return;
 200d1bc:	00001206 	br	200d208 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 200d1c0:	e0bffd17 	ldw	r2,-12(fp)
 200d1c4:	10800104 	addi	r2,r2,4
 200d1c8:	10800037 	ldwio	r2,0(r2)
 200d1cc:	1080200c 	andi	r2,r2,128
 200d1d0:	1004c03a 	cmpne	r2,r2,zero
 200d1d4:	103ff01e 	bne	r2,zero,200d198 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 200d1d8:	01001904 	movi	r4,100
 200d1dc:	200c3580 	call	200c358 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
 200d1e0:	e0bffd17 	ldw	r2,-12(fp)
 200d1e4:	10800204 	addi	r2,r2,8
 200d1e8:	e0ffff03 	ldbu	r3,-4(fp)
 200d1ec:	10c00035 	stwio	r3,0(r2)

  sp->address++;
 200d1f0:	e0bffe17 	ldw	r2,-8(fp)
 200d1f4:	108008c3 	ldbu	r2,35(r2)
 200d1f8:	10800044 	addi	r2,r2,1
 200d1fc:	1007883a 	mov	r3,r2
 200d200:	e0bffe17 	ldw	r2,-8(fp)
 200d204:	10c008c5 	stb	r3,35(r2)
}
 200d208:	e037883a 	mov	sp,fp
 200d20c:	dfc00117 	ldw	ra,4(sp)
 200d210:	df000017 	ldw	fp,0(sp)
 200d214:	dec00204 	addi	sp,sp,8
 200d218:	f800283a 	ret

0200d21c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
 200d21c:	defffc04 	addi	sp,sp,-16
 200d220:	dfc00315 	stw	ra,12(sp)
 200d224:	df000215 	stw	fp,8(sp)
 200d228:	df000204 	addi	fp,sp,8
 200d22c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
 200d230:	e13fff17 	ldw	r4,-4(fp)
 200d234:	01400044 	movi	r5,1
 200d238:	200d0900 	call	200d090 <lcd_write_command>

  sp->x = 0;
 200d23c:	e0bfff17 	ldw	r2,-4(fp)
 200d240:	10000845 	stb	zero,33(r2)
  sp->y = 0;
 200d244:	e0bfff17 	ldw	r2,-4(fp)
 200d248:	10000885 	stb	zero,34(r2)
  sp->address = 0;
 200d24c:	e0bfff17 	ldw	r2,-4(fp)
 200d250:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200d254:	e03ffe15 	stw	zero,-8(fp)
 200d258:	00001906 	br	200d2c0 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
 200d25c:	e0bffe17 	ldw	r2,-8(fp)
 200d260:	108018e4 	muli	r2,r2,99
 200d264:	10c01004 	addi	r3,r2,64
 200d268:	e0bfff17 	ldw	r2,-4(fp)
 200d26c:	1889883a 	add	r4,r3,r2
 200d270:	01400804 	movi	r5,32
 200d274:	01801444 	movi	r6,81
 200d278:	2007e400 	call	2007e40 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
 200d27c:	e0bffe17 	ldw	r2,-8(fp)
 200d280:	108018e4 	muli	r2,r2,99
 200d284:	10c00c04 	addi	r3,r2,48
 200d288:	e0bfff17 	ldw	r2,-4(fp)
 200d28c:	1889883a 	add	r4,r3,r2
 200d290:	01400804 	movi	r5,32
 200d294:	01800404 	movi	r6,16
 200d298:	2007e400 	call	2007e40 <memset>
    sp->line[y].width = 0;
 200d29c:	e0bffe17 	ldw	r2,-8(fp)
 200d2a0:	e0ffff17 	ldw	r3,-4(fp)
 200d2a4:	108018e4 	muli	r2,r2,99
 200d2a8:	10c5883a 	add	r2,r2,r3
 200d2ac:	10802404 	addi	r2,r2,144
 200d2b0:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200d2b4:	e0bffe17 	ldw	r2,-8(fp)
 200d2b8:	10800044 	addi	r2,r2,1
 200d2bc:	e0bffe15 	stw	r2,-8(fp)
 200d2c0:	e0bffe17 	ldw	r2,-8(fp)
 200d2c4:	10800090 	cmplti	r2,r2,2
 200d2c8:	103fe41e 	bne	r2,zero,200d25c <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
 200d2cc:	e037883a 	mov	sp,fp
 200d2d0:	dfc00117 	ldw	ra,4(sp)
 200d2d4:	df000017 	ldw	fp,0(sp)
 200d2d8:	dec00204 	addi	sp,sp,8
 200d2dc:	f800283a 	ret

0200d2e0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
 200d2e0:	defff604 	addi	sp,sp,-40
 200d2e4:	dfc00915 	stw	ra,36(sp)
 200d2e8:	df000815 	stw	fp,32(sp)
 200d2ec:	dc000715 	stw	r16,28(sp)
 200d2f0:	df000704 	addi	fp,sp,28
 200d2f4:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
 200d2f8:	e0bfff17 	ldw	r2,-4(fp)
 200d2fc:	10800943 	ldbu	r2,37(r2)
 200d300:	10803fcc 	andi	r2,r2,255
 200d304:	1080201c 	xori	r2,r2,128
 200d308:	10bfe004 	addi	r2,r2,-128
 200d30c:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200d310:	e03ffe15 	stw	zero,-8(fp)
 200d314:	00006406 	br	200d4a8 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
 200d318:	e0bffe17 	ldw	r2,-8(fp)
 200d31c:	e0ffff17 	ldw	r3,-4(fp)
 200d320:	108018e4 	muli	r2,r2,99
 200d324:	10c5883a 	add	r2,r2,r3
 200d328:	10802404 	addi	r2,r2,144
 200d32c:	10800043 	ldbu	r2,1(r2)
 200d330:	10803fcc 	andi	r2,r2,255
 200d334:	1080201c 	xori	r2,r2,128
 200d338:	10bfe004 	addi	r2,r2,-128
 200d33c:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
 200d340:	e0bffe17 	ldw	r2,-8(fp)
 200d344:	e0ffff17 	ldw	r3,-4(fp)
 200d348:	108018e4 	muli	r2,r2,99
 200d34c:	10c5883a 	add	r2,r2,r3
 200d350:	10802404 	addi	r2,r2,144
 200d354:	10800083 	ldbu	r2,2(r2)
 200d358:	10c03fcc 	andi	r3,r2,255
 200d35c:	e0bffc17 	ldw	r2,-16(fp)
 200d360:	1885383a 	mul	r2,r3,r2
 200d364:	1005d23a 	srai	r2,r2,8
 200d368:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
 200d36c:	e0fffa17 	ldw	r3,-24(fp)
 200d370:	e0bffb17 	ldw	r2,-20(fp)
 200d374:	18800116 	blt	r3,r2,200d37c <lcd_repaint_screen+0x9c>
      offset = 0;
 200d378:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 200d37c:	e03ffd15 	stw	zero,-12(fp)
 200d380:	00004306 	br	200d490 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
 200d384:	e43ffe17 	ldw	r16,-8(fp)
 200d388:	e0fffd17 	ldw	r3,-12(fp)
 200d38c:	e0bffa17 	ldw	r2,-24(fp)
 200d390:	1889883a 	add	r4,r3,r2
 200d394:	e17ffb17 	ldw	r5,-20(fp)
 200d398:	20011740 	call	2001174 <__modsi3>
 200d39c:	1009883a 	mov	r4,r2
 200d3a0:	e0ffff17 	ldw	r3,-4(fp)
 200d3a4:	808018e4 	muli	r2,r16,99
 200d3a8:	10c5883a 	add	r2,r2,r3
 200d3ac:	1105883a 	add	r2,r2,r4
 200d3b0:	10801004 	addi	r2,r2,64
 200d3b4:	10800003 	ldbu	r2,0(r2)
 200d3b8:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
 200d3bc:	e0bffe17 	ldw	r2,-8(fp)
 200d3c0:	e13ffd17 	ldw	r4,-12(fp)
 200d3c4:	e0ffff17 	ldw	r3,-4(fp)
 200d3c8:	108018e4 	muli	r2,r2,99
 200d3cc:	10c5883a 	add	r2,r2,r3
 200d3d0:	1105883a 	add	r2,r2,r4
 200d3d4:	10800c04 	addi	r2,r2,48
 200d3d8:	10800003 	ldbu	r2,0(r2)
 200d3dc:	10c03fcc 	andi	r3,r2,255
 200d3e0:	18c0201c 	xori	r3,r3,128
 200d3e4:	18ffe004 	addi	r3,r3,-128
 200d3e8:	e0bff947 	ldb	r2,-27(fp)
 200d3ec:	18802526 	beq	r3,r2,200d484 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
 200d3f0:	e0fffe17 	ldw	r3,-8(fp)
 200d3f4:	d0a00f04 	addi	r2,gp,-32708
 200d3f8:	1885883a 	add	r2,r3,r2
 200d3fc:	10800003 	ldbu	r2,0(r2)
 200d400:	1007883a 	mov	r3,r2
 200d404:	e0bffd17 	ldw	r2,-12(fp)
 200d408:	1885883a 	add	r2,r3,r2
 200d40c:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
 200d410:	e0fff903 	ldbu	r3,-28(fp)
 200d414:	e0bfff17 	ldw	r2,-4(fp)
 200d418:	108008c3 	ldbu	r2,35(r2)
 200d41c:	10803fcc 	andi	r2,r2,255
 200d420:	1080201c 	xori	r2,r2,128
 200d424:	10bfe004 	addi	r2,r2,-128
 200d428:	18800926 	beq	r3,r2,200d450 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
 200d42c:	e0fff903 	ldbu	r3,-28(fp)
 200d430:	00bfe004 	movi	r2,-128
 200d434:	1884b03a 	or	r2,r3,r2
 200d438:	11403fcc 	andi	r5,r2,255
 200d43c:	e13fff17 	ldw	r4,-4(fp)
 200d440:	200d0900 	call	200d090 <lcd_write_command>
          sp->address = address;
 200d444:	e0fff903 	ldbu	r3,-28(fp)
 200d448:	e0bfff17 	ldw	r2,-4(fp)
 200d44c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
 200d450:	e0bff943 	ldbu	r2,-27(fp)
 200d454:	11403fcc 	andi	r5,r2,255
 200d458:	e13fff17 	ldw	r4,-4(fp)
 200d45c:	200d1480 	call	200d148 <lcd_write_data>
        sp->line[y].visible[x] = c;
 200d460:	e0bffe17 	ldw	r2,-8(fp)
 200d464:	e13ffd17 	ldw	r4,-12(fp)
 200d468:	e0ffff17 	ldw	r3,-4(fp)
 200d46c:	108018e4 	muli	r2,r2,99
 200d470:	10c5883a 	add	r2,r2,r3
 200d474:	1105883a 	add	r2,r2,r4
 200d478:	10c00c04 	addi	r3,r2,48
 200d47c:	e0bff943 	ldbu	r2,-27(fp)
 200d480:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 200d484:	e0bffd17 	ldw	r2,-12(fp)
 200d488:	10800044 	addi	r2,r2,1
 200d48c:	e0bffd15 	stw	r2,-12(fp)
 200d490:	e0bffd17 	ldw	r2,-12(fp)
 200d494:	10800410 	cmplti	r2,r2,16
 200d498:	103fba1e 	bne	r2,zero,200d384 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200d49c:	e0bffe17 	ldw	r2,-8(fp)
 200d4a0:	10800044 	addi	r2,r2,1
 200d4a4:	e0bffe15 	stw	r2,-8(fp)
 200d4a8:	e0bffe17 	ldw	r2,-8(fp)
 200d4ac:	10800090 	cmplti	r2,r2,2
 200d4b0:	103f991e 	bne	r2,zero,200d318 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
 200d4b4:	e037883a 	mov	sp,fp
 200d4b8:	dfc00217 	ldw	ra,8(sp)
 200d4bc:	df000117 	ldw	fp,4(sp)
 200d4c0:	dc000017 	ldw	r16,0(sp)
 200d4c4:	dec00304 	addi	sp,sp,12
 200d4c8:	f800283a 	ret

0200d4cc <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
 200d4cc:	defffc04 	addi	sp,sp,-16
 200d4d0:	dfc00315 	stw	ra,12(sp)
 200d4d4:	df000215 	stw	fp,8(sp)
 200d4d8:	df000204 	addi	fp,sp,8
 200d4dc:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200d4e0:	e03ffe15 	stw	zero,-8(fp)
 200d4e4:	00001d06 	br	200d55c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
 200d4e8:	e0bffe17 	ldw	r2,-8(fp)
 200d4ec:	10800048 	cmpgei	r2,r2,1
 200d4f0:	10000f1e 	bne	r2,zero,200d530 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
 200d4f4:	e0bffe17 	ldw	r2,-8(fp)
 200d4f8:	108018e4 	muli	r2,r2,99
 200d4fc:	10c01004 	addi	r3,r2,64
 200d500:	e0bfff17 	ldw	r2,-4(fp)
 200d504:	1889883a 	add	r4,r3,r2
 200d508:	e0bffe17 	ldw	r2,-8(fp)
 200d50c:	10800044 	addi	r2,r2,1
 200d510:	108018e4 	muli	r2,r2,99
 200d514:	10c01004 	addi	r3,r2,64
 200d518:	e0bfff17 	ldw	r2,-4(fp)
 200d51c:	1885883a 	add	r2,r3,r2
 200d520:	100b883a 	mov	r5,r2
 200d524:	01801404 	movi	r6,80
 200d528:	2007cc00 	call	2007cc0 <memcpy>
 200d52c:	00000806 	br	200d550 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
 200d530:	e0bffe17 	ldw	r2,-8(fp)
 200d534:	108018e4 	muli	r2,r2,99
 200d538:	10c01004 	addi	r3,r2,64
 200d53c:	e0bfff17 	ldw	r2,-4(fp)
 200d540:	1889883a 	add	r4,r3,r2
 200d544:	01400804 	movi	r5,32
 200d548:	01801404 	movi	r6,80
 200d54c:	2007e400 	call	2007e40 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200d550:	e0bffe17 	ldw	r2,-8(fp)
 200d554:	10800044 	addi	r2,r2,1
 200d558:	e0bffe15 	stw	r2,-8(fp)
 200d55c:	e0bffe17 	ldw	r2,-8(fp)
 200d560:	10800090 	cmplti	r2,r2,2
 200d564:	103fe01e 	bne	r2,zero,200d4e8 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
 200d568:	e0bfff17 	ldw	r2,-4(fp)
 200d56c:	10800883 	ldbu	r2,34(r2)
 200d570:	10bfffc4 	addi	r2,r2,-1
 200d574:	1007883a 	mov	r3,r2
 200d578:	e0bfff17 	ldw	r2,-4(fp)
 200d57c:	10c00885 	stb	r3,34(r2)
}
 200d580:	e037883a 	mov	sp,fp
 200d584:	dfc00117 	ldw	ra,4(sp)
 200d588:	df000017 	ldw	fp,0(sp)
 200d58c:	dec00204 	addi	sp,sp,8
 200d590:	f800283a 	ret

0200d594 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
 200d594:	defff804 	addi	sp,sp,-32
 200d598:	dfc00715 	stw	ra,28(sp)
 200d59c:	df000615 	stw	fp,24(sp)
 200d5a0:	df000604 	addi	fp,sp,24
 200d5a4:	e13ffd15 	stw	r4,-12(fp)
 200d5a8:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
 200d5ac:	e03ffc15 	stw	zero,-16(fp)
 200d5b0:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
 200d5b4:	e0bffd17 	ldw	r2,-12(fp)
 200d5b8:	10800a03 	ldbu	r2,40(r2)
 200d5bc:	10803fcc 	andi	r2,r2,255
 200d5c0:	1080201c 	xori	r2,r2,128
 200d5c4:	10bfe004 	addi	r2,r2,-128
 200d5c8:	108016d8 	cmpnei	r2,r2,91
 200d5cc:	1000491e 	bne	r2,zero,200d6f4 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
 200d5d0:	e0bffd17 	ldw	r2,-12(fp)
 200d5d4:	10800a04 	addi	r2,r2,40
 200d5d8:	10800044 	addi	r2,r2,1
 200d5dc:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
 200d5e0:	00000d06 	br	200d618 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
 200d5e4:	e0bffc17 	ldw	r2,-16(fp)
 200d5e8:	10c002a4 	muli	r3,r2,10
 200d5ec:	e0bffa17 	ldw	r2,-24(fp)
 200d5f0:	10800003 	ldbu	r2,0(r2)
 200d5f4:	10803fcc 	andi	r2,r2,255
 200d5f8:	1080201c 	xori	r2,r2,128
 200d5fc:	10bfe004 	addi	r2,r2,-128
 200d600:	1885883a 	add	r2,r3,r2
 200d604:	10bff404 	addi	r2,r2,-48
 200d608:	e0bffc15 	stw	r2,-16(fp)
 200d60c:	e0bffa17 	ldw	r2,-24(fp)
 200d610:	10800044 	addi	r2,r2,1
 200d614:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
 200d618:	e0bffa17 	ldw	r2,-24(fp)
 200d61c:	10800003 	ldbu	r2,0(r2)
 200d620:	10803fcc 	andi	r2,r2,255
 200d624:	1080201c 	xori	r2,r2,128
 200d628:	10bfe004 	addi	r2,r2,-128
 200d62c:	1007883a 	mov	r3,r2
 200d630:	00808074 	movhi	r2,513
 200d634:	10852004 	addi	r2,r2,5248
 200d638:	10800017 	ldw	r2,0(r2)
 200d63c:	1885883a 	add	r2,r3,r2
 200d640:	10800003 	ldbu	r2,0(r2)
 200d644:	10803fcc 	andi	r2,r2,255
 200d648:	1080010c 	andi	r2,r2,4
 200d64c:	1004c03a 	cmpne	r2,r2,zero
 200d650:	103fe41e 	bne	r2,zero,200d5e4 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
 200d654:	e0bffa17 	ldw	r2,-24(fp)
 200d658:	10800003 	ldbu	r2,0(r2)
 200d65c:	10803fcc 	andi	r2,r2,255
 200d660:	1080201c 	xori	r2,r2,128
 200d664:	10bfe004 	addi	r2,r2,-128
 200d668:	10800ed8 	cmpnei	r2,r2,59
 200d66c:	1000231e 	bne	r2,zero,200d6fc <lcd_handle_escape+0x168>
    {
      ptr++;
 200d670:	e0bffa17 	ldw	r2,-24(fp)
 200d674:	10800044 	addi	r2,r2,1
 200d678:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
 200d67c:	00000d06 	br	200d6b4 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
 200d680:	e0bffb17 	ldw	r2,-20(fp)
 200d684:	10c002a4 	muli	r3,r2,10
 200d688:	e0bffa17 	ldw	r2,-24(fp)
 200d68c:	10800003 	ldbu	r2,0(r2)
 200d690:	10803fcc 	andi	r2,r2,255
 200d694:	1080201c 	xori	r2,r2,128
 200d698:	10bfe004 	addi	r2,r2,-128
 200d69c:	1885883a 	add	r2,r3,r2
 200d6a0:	10bff404 	addi	r2,r2,-48
 200d6a4:	e0bffb15 	stw	r2,-20(fp)
 200d6a8:	e0bffa17 	ldw	r2,-24(fp)
 200d6ac:	10800044 	addi	r2,r2,1
 200d6b0:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
 200d6b4:	e0bffa17 	ldw	r2,-24(fp)
 200d6b8:	10800003 	ldbu	r2,0(r2)
 200d6bc:	10803fcc 	andi	r2,r2,255
 200d6c0:	1080201c 	xori	r2,r2,128
 200d6c4:	10bfe004 	addi	r2,r2,-128
 200d6c8:	1007883a 	mov	r3,r2
 200d6cc:	00808074 	movhi	r2,513
 200d6d0:	10852004 	addi	r2,r2,5248
 200d6d4:	10800017 	ldw	r2,0(r2)
 200d6d8:	1885883a 	add	r2,r3,r2
 200d6dc:	10800003 	ldbu	r2,0(r2)
 200d6e0:	10803fcc 	andi	r2,r2,255
 200d6e4:	1080010c 	andi	r2,r2,4
 200d6e8:	1004c03a 	cmpne	r2,r2,zero
 200d6ec:	103fe41e 	bne	r2,zero,200d680 <lcd_handle_escape+0xec>
 200d6f0:	00000206 	br	200d6fc <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
 200d6f4:	00bfffc4 	movi	r2,-1
 200d6f8:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
 200d6fc:	e0bffe07 	ldb	r2,-8(fp)
 200d700:	e0bfff15 	stw	r2,-4(fp)
 200d704:	e0ffff17 	ldw	r3,-4(fp)
 200d708:	188012a0 	cmpeqi	r2,r3,74
 200d70c:	10002f1e 	bne	r2,zero,200d7cc <lcd_handle_escape+0x238>
 200d710:	e0ffff17 	ldw	r3,-4(fp)
 200d714:	188012c8 	cmpgei	r2,r3,75
 200d718:	1000041e 	bne	r2,zero,200d72c <lcd_handle_escape+0x198>
 200d71c:	e0ffff17 	ldw	r3,-4(fp)
 200d720:	18801220 	cmpeqi	r2,r3,72
 200d724:	1000081e 	bne	r2,zero,200d748 <lcd_handle_escape+0x1b4>
 200d728:	00004906 	br	200d850 <lcd_handle_escape+0x2bc>
 200d72c:	e0ffff17 	ldw	r3,-4(fp)
 200d730:	188012e0 	cmpeqi	r2,r3,75
 200d734:	10002b1e 	bne	r2,zero,200d7e4 <lcd_handle_escape+0x250>
 200d738:	e0ffff17 	ldw	r3,-4(fp)
 200d73c:	188019a0 	cmpeqi	r2,r3,102
 200d740:	1000011e 	bne	r2,zero,200d748 <lcd_handle_escape+0x1b4>
 200d744:	00004206 	br	200d850 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
 200d748:	e0bffb17 	ldw	r2,-20(fp)
 200d74c:	10800050 	cmplti	r2,r2,1
 200d750:	1000051e 	bne	r2,zero,200d768 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
 200d754:	e0bffb17 	ldw	r2,-20(fp)
 200d758:	10bfffc4 	addi	r2,r2,-1
 200d75c:	1007883a 	mov	r3,r2
 200d760:	e0bffd17 	ldw	r2,-12(fp)
 200d764:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
 200d768:	e0bffc17 	ldw	r2,-16(fp)
 200d76c:	10800050 	cmplti	r2,r2,1
 200d770:	1000371e 	bne	r2,zero,200d850 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
 200d774:	e0bffc17 	ldw	r2,-16(fp)
 200d778:	10bfffc4 	addi	r2,r2,-1
 200d77c:	1007883a 	mov	r3,r2
 200d780:	e0bffd17 	ldw	r2,-12(fp)
 200d784:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
 200d788:	e0bffd17 	ldw	r2,-12(fp)
 200d78c:	10800883 	ldbu	r2,34(r2)
 200d790:	10803fcc 	andi	r2,r2,255
 200d794:	10800170 	cmpltui	r2,r2,5
 200d798:	1000061e 	bne	r2,zero,200d7b4 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
 200d79c:	e0fffd17 	ldw	r3,-12(fp)
 200d7a0:	00800104 	movi	r2,4
 200d7a4:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
 200d7a8:	00000206 	br	200d7b4 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
 200d7ac:	e13ffd17 	ldw	r4,-12(fp)
 200d7b0:	200d4cc0 	call	200d4cc <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
 200d7b4:	e0bffd17 	ldw	r2,-12(fp)
 200d7b8:	10800883 	ldbu	r2,34(r2)
 200d7bc:	10803fcc 	andi	r2,r2,255
 200d7c0:	108000e8 	cmpgeui	r2,r2,3
 200d7c4:	103ff91e 	bne	r2,zero,200d7ac <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
 200d7c8:	00002106 	br	200d850 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
 200d7cc:	e0bffc17 	ldw	r2,-16(fp)
 200d7d0:	10800098 	cmpnei	r2,r2,2
 200d7d4:	10001e1e 	bne	r2,zero,200d850 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
 200d7d8:	e13ffd17 	ldw	r4,-12(fp)
 200d7dc:	200d21c0 	call	200d21c <lcd_clear_screen>
    break;
 200d7e0:	00001b06 	br	200d850 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
 200d7e4:	e0bffc17 	ldw	r2,-16(fp)
 200d7e8:	10800048 	cmpgei	r2,r2,1
 200d7ec:	1000181e 	bne	r2,zero,200d850 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 200d7f0:	e0bffd17 	ldw	r2,-12(fp)
 200d7f4:	10800843 	ldbu	r2,33(r2)
 200d7f8:	10803fcc 	andi	r2,r2,255
 200d7fc:	10801428 	cmpgeui	r2,r2,80
 200d800:	1000131e 	bne	r2,zero,200d850 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
 200d804:	e0bffd17 	ldw	r2,-12(fp)
 200d808:	10800883 	ldbu	r2,34(r2)
 200d80c:	10803fcc 	andi	r2,r2,255
 200d810:	108018e4 	muli	r2,r2,99
 200d814:	10c01004 	addi	r3,r2,64
 200d818:	e0bffd17 	ldw	r2,-12(fp)
 200d81c:	1887883a 	add	r3,r3,r2
 200d820:	e0bffd17 	ldw	r2,-12(fp)
 200d824:	10800843 	ldbu	r2,33(r2)
 200d828:	10803fcc 	andi	r2,r2,255
 200d82c:	1889883a 	add	r4,r3,r2
 200d830:	e0bffd17 	ldw	r2,-12(fp)
 200d834:	10800843 	ldbu	r2,33(r2)
 200d838:	10c03fcc 	andi	r3,r2,255
 200d83c:	00801404 	movi	r2,80
 200d840:	10c5c83a 	sub	r2,r2,r3
 200d844:	100d883a 	mov	r6,r2
 200d848:	01400804 	movi	r5,32
 200d84c:	2007e400 	call	2007e40 <memset>
    }
    break;
  }
}
 200d850:	e037883a 	mov	sp,fp
 200d854:	dfc00117 	ldw	ra,4(sp)
 200d858:	df000017 	ldw	fp,0(sp)
 200d85c:	dec00204 	addi	sp,sp,8
 200d860:	f800283a 	ret

0200d864 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
 200d864:	defff204 	addi	sp,sp,-56
 200d868:	dfc00d15 	stw	ra,52(sp)
 200d86c:	df000c15 	stw	fp,48(sp)
 200d870:	dc000b15 	stw	r16,44(sp)
 200d874:	df000b04 	addi	fp,sp,44
 200d878:	e13ffc15 	stw	r4,-16(fp)
 200d87c:	e17ffd15 	stw	r5,-12(fp)
 200d880:	e1bffe15 	stw	r6,-8(fp)
 200d884:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
 200d888:	e0bffe17 	ldw	r2,-8(fp)
 200d88c:	1007883a 	mov	r3,r2
 200d890:	e0bffd17 	ldw	r2,-12(fp)
 200d894:	10c5883a 	add	r2,r2,r3
 200d898:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
 200d89c:	e0fffc17 	ldw	r3,-16(fp)
 200d8a0:	00800044 	movi	r2,1
 200d8a4:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
 200d8a8:	0000a206 	br	200db34 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
 200d8ac:	e0bffd17 	ldw	r2,-12(fp)
 200d8b0:	10800003 	ldbu	r2,0(r2)
 200d8b4:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
 200d8b8:	e0bffc17 	ldw	r2,-16(fp)
 200d8bc:	10800903 	ldbu	r2,36(r2)
 200d8c0:	10803fcc 	andi	r2,r2,255
 200d8c4:	1080201c 	xori	r2,r2,128
 200d8c8:	10bfe004 	addi	r2,r2,-128
 200d8cc:	1004803a 	cmplt	r2,r2,zero
 200d8d0:	10003b1e 	bne	r2,zero,200d9c0 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
 200d8d4:	e0bffc17 	ldw	r2,-16(fp)
 200d8d8:	10800903 	ldbu	r2,36(r2)
 200d8dc:	10803fcc 	andi	r2,r2,255
 200d8e0:	1080201c 	xori	r2,r2,128
 200d8e4:	10bfe004 	addi	r2,r2,-128
 200d8e8:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 200d8ec:	e0bff717 	ldw	r2,-36(fp)
 200d8f0:	1004c03a 	cmpne	r2,r2,zero
 200d8f4:	1000031e 	bne	r2,zero,200d904 <altera_avalon_lcd_16207_write+0xa0>
 200d8f8:	e0bff807 	ldb	r2,-32(fp)
 200d8fc:	108016d8 	cmpnei	r2,r2,91
 200d900:	1000111e 	bne	r2,zero,200d948 <altera_avalon_lcd_16207_write+0xe4>
 200d904:	e0bff717 	ldw	r2,-36(fp)
 200d908:	1005003a 	cmpeq	r2,r2,zero
 200d90c:	10001a1e 	bne	r2,zero,200d978 <altera_avalon_lcd_16207_write+0x114>
 200d910:	e0bff807 	ldb	r2,-32(fp)
 200d914:	1007883a 	mov	r3,r2
 200d918:	00808074 	movhi	r2,513
 200d91c:	10852004 	addi	r2,r2,5248
 200d920:	10800017 	ldw	r2,0(r2)
 200d924:	1885883a 	add	r2,r3,r2
 200d928:	10800003 	ldbu	r2,0(r2)
 200d92c:	10803fcc 	andi	r2,r2,255
 200d930:	1080010c 	andi	r2,r2,4
 200d934:	1004c03a 	cmpne	r2,r2,zero
 200d938:	10000f1e 	bne	r2,zero,200d978 <altera_avalon_lcd_16207_write+0x114>
 200d93c:	e0bff807 	ldb	r2,-32(fp)
 200d940:	10800ee0 	cmpeqi	r2,r2,59
 200d944:	10000c1e 	bne	r2,zero,200d978 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
 200d948:	e0fff717 	ldw	r3,-36(fp)
 200d94c:	e0bffc17 	ldw	r2,-16(fp)
 200d950:	1885883a 	add	r2,r3,r2
 200d954:	10800a04 	addi	r2,r2,40
 200d958:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
 200d95c:	e17ff807 	ldb	r5,-32(fp)
 200d960:	e13ffc17 	ldw	r4,-16(fp)
 200d964:	200d5940 	call	200d594 <lcd_handle_escape>

        sp->esccount = -1;
 200d968:	e0fffc17 	ldw	r3,-16(fp)
 200d96c:	00bfffc4 	movi	r2,-1
 200d970:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 200d974:	00006c06 	br	200db28 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
 200d978:	e0bffc17 	ldw	r2,-16(fp)
 200d97c:	10800903 	ldbu	r2,36(r2)
 200d980:	10803fcc 	andi	r2,r2,255
 200d984:	108001e8 	cmpgeui	r2,r2,7
 200d988:	1000671e 	bne	r2,zero,200db28 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
 200d98c:	e0fff717 	ldw	r3,-36(fp)
 200d990:	e0bffc17 	ldw	r2,-16(fp)
 200d994:	1885883a 	add	r2,r3,r2
 200d998:	10c00a04 	addi	r3,r2,40
 200d99c:	e0bff803 	ldbu	r2,-32(fp)
 200d9a0:	18800005 	stb	r2,0(r3)
        sp->esccount++;
 200d9a4:	e0bffc17 	ldw	r2,-16(fp)
 200d9a8:	10800903 	ldbu	r2,36(r2)
 200d9ac:	10800044 	addi	r2,r2,1
 200d9b0:	1007883a 	mov	r3,r2
 200d9b4:	e0bffc17 	ldw	r2,-16(fp)
 200d9b8:	10c00905 	stb	r3,36(r2)
 200d9bc:	00005a06 	br	200db28 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
 200d9c0:	e0bff807 	ldb	r2,-32(fp)
 200d9c4:	108006d8 	cmpnei	r2,r2,27
 200d9c8:	1000031e 	bne	r2,zero,200d9d8 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
 200d9cc:	e0bffc17 	ldw	r2,-16(fp)
 200d9d0:	10000905 	stb	zero,36(r2)
 200d9d4:	00005406 	br	200db28 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
 200d9d8:	e0bff807 	ldb	r2,-32(fp)
 200d9dc:	10800358 	cmpnei	r2,r2,13
 200d9e0:	1000031e 	bne	r2,zero,200d9f0 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
 200d9e4:	e0bffc17 	ldw	r2,-16(fp)
 200d9e8:	10000845 	stb	zero,33(r2)
 200d9ec:	00004e06 	br	200db28 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
 200d9f0:	e0bff807 	ldb	r2,-32(fp)
 200d9f4:	10800298 	cmpnei	r2,r2,10
 200d9f8:	1000101e 	bne	r2,zero,200da3c <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
 200d9fc:	e0bffc17 	ldw	r2,-16(fp)
 200da00:	10000845 	stb	zero,33(r2)
      sp->y++;
 200da04:	e0bffc17 	ldw	r2,-16(fp)
 200da08:	10800883 	ldbu	r2,34(r2)
 200da0c:	10800044 	addi	r2,r2,1
 200da10:	1007883a 	mov	r3,r2
 200da14:	e0bffc17 	ldw	r2,-16(fp)
 200da18:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
 200da1c:	e0bffc17 	ldw	r2,-16(fp)
 200da20:	10800883 	ldbu	r2,34(r2)
 200da24:	10803fcc 	andi	r2,r2,255
 200da28:	108000f0 	cmpltui	r2,r2,3
 200da2c:	10003e1e 	bne	r2,zero,200db28 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
 200da30:	e13ffc17 	ldw	r4,-16(fp)
 200da34:	200d4cc0 	call	200d4cc <lcd_scroll_up>
 200da38:	00003b06 	br	200db28 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
 200da3c:	e0bff807 	ldb	r2,-32(fp)
 200da40:	10800218 	cmpnei	r2,r2,8
 200da44:	10000c1e 	bne	r2,zero,200da78 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
 200da48:	e0bffc17 	ldw	r2,-16(fp)
 200da4c:	10800843 	ldbu	r2,33(r2)
 200da50:	10803fcc 	andi	r2,r2,255
 200da54:	1005003a 	cmpeq	r2,r2,zero
 200da58:	1000331e 	bne	r2,zero,200db28 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
 200da5c:	e0bffc17 	ldw	r2,-16(fp)
 200da60:	10800843 	ldbu	r2,33(r2)
 200da64:	10bfffc4 	addi	r2,r2,-1
 200da68:	1007883a 	mov	r3,r2
 200da6c:	e0bffc17 	ldw	r2,-16(fp)
 200da70:	10c00845 	stb	r3,33(r2)
 200da74:	00002c06 	br	200db28 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
 200da78:	e0bff807 	ldb	r2,-32(fp)
 200da7c:	1007883a 	mov	r3,r2
 200da80:	00808074 	movhi	r2,513
 200da84:	10852004 	addi	r2,r2,5248
 200da88:	10800017 	ldw	r2,0(r2)
 200da8c:	1885883a 	add	r2,r3,r2
 200da90:	10800003 	ldbu	r2,0(r2)
 200da94:	10803fcc 	andi	r2,r2,255
 200da98:	1080201c 	xori	r2,r2,128
 200da9c:	10bfe004 	addi	r2,r2,-128
 200daa0:	108025cc 	andi	r2,r2,151
 200daa4:	1005003a 	cmpeq	r2,r2,zero
 200daa8:	10001f1e 	bne	r2,zero,200db28 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
 200daac:	e0bffc17 	ldw	r2,-16(fp)
 200dab0:	10800883 	ldbu	r2,34(r2)
 200dab4:	10803fcc 	andi	r2,r2,255
 200dab8:	108000b0 	cmpltui	r2,r2,2
 200dabc:	1000021e 	bne	r2,zero,200dac8 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
 200dac0:	e13ffc17 	ldw	r4,-16(fp)
 200dac4:	200d4cc0 	call	200d4cc <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 200dac8:	e0bffc17 	ldw	r2,-16(fp)
 200dacc:	10800843 	ldbu	r2,33(r2)
 200dad0:	10803fcc 	andi	r2,r2,255
 200dad4:	10801428 	cmpgeui	r2,r2,80
 200dad8:	10000d1e 	bne	r2,zero,200db10 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
 200dadc:	e0bffc17 	ldw	r2,-16(fp)
 200dae0:	10800883 	ldbu	r2,34(r2)
 200dae4:	11003fcc 	andi	r4,r2,255
 200dae8:	e0bffc17 	ldw	r2,-16(fp)
 200daec:	10800843 	ldbu	r2,33(r2)
 200daf0:	11403fcc 	andi	r5,r2,255
 200daf4:	e0fffc17 	ldw	r3,-16(fp)
 200daf8:	208018e4 	muli	r2,r4,99
 200dafc:	10c5883a 	add	r2,r2,r3
 200db00:	1145883a 	add	r2,r2,r5
 200db04:	10c01004 	addi	r3,r2,64
 200db08:	e0bff803 	ldbu	r2,-32(fp)
 200db0c:	18800005 	stb	r2,0(r3)

      sp->x++;
 200db10:	e0bffc17 	ldw	r2,-16(fp)
 200db14:	10800843 	ldbu	r2,33(r2)
 200db18:	10800044 	addi	r2,r2,1
 200db1c:	1007883a 	mov	r3,r2
 200db20:	e0bffc17 	ldw	r2,-16(fp)
 200db24:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
 200db28:	e0bffd17 	ldw	r2,-12(fp)
 200db2c:	10800044 	addi	r2,r2,1
 200db30:	e0bffd15 	stw	r2,-12(fp)
 200db34:	e0fffd17 	ldw	r3,-12(fp)
 200db38:	e0bffb17 	ldw	r2,-20(fp)
 200db3c:	18bf5b36 	bltu	r3,r2,200d8ac <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
 200db40:	00800404 	movi	r2,16
 200db44:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200db48:	e03ffa15 	stw	zero,-24(fp)
 200db4c:	00003606 	br	200dc28 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 200db50:	00801404 	movi	r2,80
 200db54:	e0bff615 	stw	r2,-40(fp)
 200db58:	00001106 	br	200dba0 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
 200db5c:	e13ffa17 	ldw	r4,-24(fp)
 200db60:	e0bff617 	ldw	r2,-40(fp)
 200db64:	117fffc4 	addi	r5,r2,-1
 200db68:	e0fffc17 	ldw	r3,-16(fp)
 200db6c:	208018e4 	muli	r2,r4,99
 200db70:	10c5883a 	add	r2,r2,r3
 200db74:	1145883a 	add	r2,r2,r5
 200db78:	10801004 	addi	r2,r2,64
 200db7c:	10800003 	ldbu	r2,0(r2)
 200db80:	10803fcc 	andi	r2,r2,255
 200db84:	1080201c 	xori	r2,r2,128
 200db88:	10bfe004 	addi	r2,r2,-128
 200db8c:	10800818 	cmpnei	r2,r2,32
 200db90:	1000061e 	bne	r2,zero,200dbac <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 200db94:	e0bff617 	ldw	r2,-40(fp)
 200db98:	10bfffc4 	addi	r2,r2,-1
 200db9c:	e0bff615 	stw	r2,-40(fp)
 200dba0:	e0bff617 	ldw	r2,-40(fp)
 200dba4:	10800048 	cmpgei	r2,r2,1
 200dba8:	103fec1e 	bne	r2,zero,200db5c <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
 200dbac:	e0bff617 	ldw	r2,-40(fp)
 200dbb0:	10800448 	cmpgei	r2,r2,17
 200dbb4:	1000031e 	bne	r2,zero,200dbc4 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
 200dbb8:	00800404 	movi	r2,16
 200dbbc:	e0bff615 	stw	r2,-40(fp)
 200dbc0:	00000306 	br	200dbd0 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
 200dbc4:	e0bff617 	ldw	r2,-40(fp)
 200dbc8:	10800044 	addi	r2,r2,1
 200dbcc:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
 200dbd0:	e13ffa17 	ldw	r4,-24(fp)
 200dbd4:	e0bff617 	ldw	r2,-40(fp)
 200dbd8:	100b883a 	mov	r5,r2
 200dbdc:	e0fffc17 	ldw	r3,-16(fp)
 200dbe0:	208018e4 	muli	r2,r4,99
 200dbe4:	10c5883a 	add	r2,r2,r3
 200dbe8:	10802404 	addi	r2,r2,144
 200dbec:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
 200dbf0:	e0fff917 	ldw	r3,-28(fp)
 200dbf4:	e0bff617 	ldw	r2,-40(fp)
 200dbf8:	1880020e 	bge	r3,r2,200dc04 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
 200dbfc:	e0bff617 	ldw	r2,-40(fp)
 200dc00:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
 200dc04:	e0bffa17 	ldw	r2,-24(fp)
 200dc08:	e0fffc17 	ldw	r3,-16(fp)
 200dc0c:	108018e4 	muli	r2,r2,99
 200dc10:	10c5883a 	add	r2,r2,r3
 200dc14:	10802404 	addi	r2,r2,144
 200dc18:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200dc1c:	e0bffa17 	ldw	r2,-24(fp)
 200dc20:	10800044 	addi	r2,r2,1
 200dc24:	e0bffa15 	stw	r2,-24(fp)
 200dc28:	e0bffa17 	ldw	r2,-24(fp)
 200dc2c:	10800090 	cmplti	r2,r2,2
 200dc30:	103fc71e 	bne	r2,zero,200db50 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
 200dc34:	e0bff917 	ldw	r2,-28(fp)
 200dc38:	10800448 	cmpgei	r2,r2,17
 200dc3c:	1000031e 	bne	r2,zero,200dc4c <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
 200dc40:	e0bffc17 	ldw	r2,-16(fp)
 200dc44:	10000985 	stb	zero,38(r2)
 200dc48:	00002d06 	br	200dd00 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
 200dc4c:	e0bff917 	ldw	r2,-28(fp)
 200dc50:	1085883a 	add	r2,r2,r2
 200dc54:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
 200dc58:	e0bff917 	ldw	r2,-28(fp)
 200dc5c:	1007883a 	mov	r3,r2
 200dc60:	e0bffc17 	ldw	r2,-16(fp)
 200dc64:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200dc68:	e03ffa15 	stw	zero,-24(fp)
 200dc6c:	00002106 	br	200dcf4 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
 200dc70:	e0bffa17 	ldw	r2,-24(fp)
 200dc74:	e0fffc17 	ldw	r3,-16(fp)
 200dc78:	108018e4 	muli	r2,r2,99
 200dc7c:	10c5883a 	add	r2,r2,r3
 200dc80:	10802404 	addi	r2,r2,144
 200dc84:	10800043 	ldbu	r2,1(r2)
 200dc88:	10803fcc 	andi	r2,r2,255
 200dc8c:	1080201c 	xori	r2,r2,128
 200dc90:	10bfe004 	addi	r2,r2,-128
 200dc94:	10800450 	cmplti	r2,r2,17
 200dc98:	1000131e 	bne	r2,zero,200dce8 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
 200dc9c:	e43ffa17 	ldw	r16,-24(fp)
 200dca0:	e0bffa17 	ldw	r2,-24(fp)
 200dca4:	e0fffc17 	ldw	r3,-16(fp)
 200dca8:	108018e4 	muli	r2,r2,99
 200dcac:	10c5883a 	add	r2,r2,r3
 200dcb0:	10802404 	addi	r2,r2,144
 200dcb4:	10800043 	ldbu	r2,1(r2)
 200dcb8:	10803fcc 	andi	r2,r2,255
 200dcbc:	1080201c 	xori	r2,r2,128
 200dcc0:	10bfe004 	addi	r2,r2,-128
 200dcc4:	1008923a 	slli	r4,r2,8
 200dcc8:	e17ff917 	ldw	r5,-28(fp)
 200dccc:	20011140 	call	2001114 <__divsi3>
 200dcd0:	1009883a 	mov	r4,r2
 200dcd4:	e0fffc17 	ldw	r3,-16(fp)
 200dcd8:	808018e4 	muli	r2,r16,99
 200dcdc:	10c5883a 	add	r2,r2,r3
 200dce0:	10802404 	addi	r2,r2,144
 200dce4:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 200dce8:	e0bffa17 	ldw	r2,-24(fp)
 200dcec:	10800044 	addi	r2,r2,1
 200dcf0:	e0bffa15 	stw	r2,-24(fp)
 200dcf4:	e0bffa17 	ldw	r2,-24(fp)
 200dcf8:	10800090 	cmplti	r2,r2,2
 200dcfc:	103fdc1e 	bne	r2,zero,200dc70 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
 200dd00:	e0bffc17 	ldw	r2,-16(fp)
 200dd04:	10800943 	ldbu	r2,37(r2)
 200dd08:	10803fcc 	andi	r2,r2,255
 200dd0c:	1080201c 	xori	r2,r2,128
 200dd10:	10bfe004 	addi	r2,r2,-128
 200dd14:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
 200dd18:	e13ffc17 	ldw	r4,-16(fp)
 200dd1c:	200d2e00 	call	200d2e0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
 200dd20:	e0bffc17 	ldw	r2,-16(fp)
 200dd24:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
 200dd28:	e0bffc17 	ldw	r2,-16(fp)
 200dd2c:	10800943 	ldbu	r2,37(r2)
 200dd30:	10c03fcc 	andi	r3,r2,255
 200dd34:	18c0201c 	xori	r3,r3,128
 200dd38:	18ffe004 	addi	r3,r3,-128
 200dd3c:	e0bff517 	ldw	r2,-44(fp)
 200dd40:	18800426 	beq	r3,r2,200dd54 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
 200dd44:	e0fffc17 	ldw	r3,-16(fp)
 200dd48:	00800044 	movi	r2,1
 200dd4c:	188009c5 	stb	r2,39(r3)
  }
 200dd50:	003feb06 	br	200dd00 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
 200dd54:	e0bffe17 	ldw	r2,-8(fp)
}
 200dd58:	e037883a 	mov	sp,fp
 200dd5c:	dfc00217 	ldw	ra,8(sp)
 200dd60:	df000117 	ldw	fp,4(sp)
 200dd64:	dc000017 	ldw	r16,0(sp)
 200dd68:	dec00304 	addi	sp,sp,12
 200dd6c:	f800283a 	ret

0200dd70 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
 200dd70:	defffc04 	addi	sp,sp,-16
 200dd74:	dfc00315 	stw	ra,12(sp)
 200dd78:	df000215 	stw	fp,8(sp)
 200dd7c:	df000204 	addi	fp,sp,8
 200dd80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
 200dd84:	e0bfff17 	ldw	r2,-4(fp)
 200dd88:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
 200dd8c:	e0bffe17 	ldw	r2,-8(fp)
 200dd90:	10800943 	ldbu	r2,37(r2)
 200dd94:	10803fcc 	andi	r2,r2,255
 200dd98:	1080201c 	xori	r2,r2,128
 200dd9c:	10bfe004 	addi	r2,r2,-128
 200dda0:	10c00044 	addi	r3,r2,1
 200dda4:	e0bffe17 	ldw	r2,-8(fp)
 200dda8:	10800983 	ldbu	r2,38(r2)
 200ddac:	10803fcc 	andi	r2,r2,255
 200ddb0:	1080201c 	xori	r2,r2,128
 200ddb4:	10bfe004 	addi	r2,r2,-128
 200ddb8:	18800316 	blt	r3,r2,200ddc8 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
 200ddbc:	e0bffe17 	ldw	r2,-8(fp)
 200ddc0:	10000945 	stb	zero,37(r2)
 200ddc4:	00000606 	br	200dde0 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
 200ddc8:	e0bffe17 	ldw	r2,-8(fp)
 200ddcc:	10800943 	ldbu	r2,37(r2)
 200ddd0:	10800044 	addi	r2,r2,1
 200ddd4:	1007883a 	mov	r3,r2
 200ddd8:	e0bffe17 	ldw	r2,-8(fp)
 200dddc:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
 200dde0:	e0bffe17 	ldw	r2,-8(fp)
 200dde4:	10800983 	ldbu	r2,38(r2)
 200dde8:	10803fcc 	andi	r2,r2,255
 200ddec:	1080201c 	xori	r2,r2,128
 200ddf0:	10bfe004 	addi	r2,r2,-128
 200ddf4:	10800050 	cmplti	r2,r2,1
 200ddf8:	1000091e 	bne	r2,zero,200de20 <alt_lcd_16207_timeout+0xb0>
 200ddfc:	e0bffe17 	ldw	r2,-8(fp)
 200de00:	108009c3 	ldbu	r2,39(r2)
 200de04:	10803fcc 	andi	r2,r2,255
 200de08:	1080201c 	xori	r2,r2,128
 200de0c:	10bfe004 	addi	r2,r2,-128
 200de10:	1004c03a 	cmpne	r2,r2,zero
 200de14:	1000021e 	bne	r2,zero,200de20 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
 200de18:	e13ffe17 	ldw	r4,-8(fp)
 200de1c:	200d2e00 	call	200d2e0 <lcd_repaint_screen>

  return sp->period;
 200de20:	e0bffe17 	ldw	r2,-8(fp)
 200de24:	10800717 	ldw	r2,28(r2)
}
 200de28:	e037883a 	mov	sp,fp
 200de2c:	dfc00117 	ldw	ra,4(sp)
 200de30:	df000017 	ldw	fp,0(sp)
 200de34:	dec00204 	addi	sp,sp,8
 200de38:	f800283a 	ret

0200de3c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
 200de3c:	defffc04 	addi	sp,sp,-16
 200de40:	dfc00315 	stw	ra,12(sp)
 200de44:	df000215 	stw	fp,8(sp)
 200de48:	df000204 	addi	fp,sp,8
 200de4c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
 200de50:	e0bfff17 	ldw	r2,-4(fp)
 200de54:	10800017 	ldw	r2,0(r2)
 200de58:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
 200de5c:	e0bfff17 	ldw	r2,-4(fp)
 200de60:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
 200de64:	010ea604 	movi	r4,15000
 200de68:	200c3580 	call	200c358 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 200de6c:	e0bffe17 	ldw	r2,-8(fp)
 200de70:	1007883a 	mov	r3,r2
 200de74:	00800c04 	movi	r2,48
 200de78:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
 200de7c:	01040104 	movi	r4,4100
 200de80:	200c3580 	call	200c358 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 200de84:	e0bffe17 	ldw	r2,-8(fp)
 200de88:	1007883a 	mov	r3,r2
 200de8c:	00800c04 	movi	r2,48
 200de90:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
 200de94:	0100fa04 	movi	r4,1000
 200de98:	200c3580 	call	200c358 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 200de9c:	e0bffe17 	ldw	r2,-8(fp)
 200dea0:	1007883a 	mov	r3,r2
 200dea4:	00800c04 	movi	r2,48
 200dea8:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
 200deac:	e13fff17 	ldw	r4,-4(fp)
 200deb0:	01400e04 	movi	r5,56
 200deb4:	200d0900 	call	200d090 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
 200deb8:	e13fff17 	ldw	r4,-4(fp)
 200debc:	01400204 	movi	r5,8
 200dec0:	200d0900 	call	200d090 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
 200dec4:	e13fff17 	ldw	r4,-4(fp)
 200dec8:	200d21c0 	call	200d21c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
 200decc:	e13fff17 	ldw	r4,-4(fp)
 200ded0:	01400184 	movi	r5,6
 200ded4:	200d0900 	call	200d090 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
 200ded8:	e13fff17 	ldw	r4,-4(fp)
 200dedc:	01400304 	movi	r5,12
 200dee0:	200d0900 	call	200d090 <lcd_write_command>

  sp->esccount = -1;
 200dee4:	e0ffff17 	ldw	r3,-4(fp)
 200dee8:	00bfffc4 	movi	r2,-1
 200deec:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
 200def0:	e0bfff17 	ldw	r2,-4(fp)
 200def4:	11000a04 	addi	r4,r2,40
 200def8:	000b883a 	mov	r5,zero
 200defc:	01800204 	movi	r6,8
 200df00:	2007e400 	call	2007e40 <memset>

  sp->scrollpos = 0;
 200df04:	e0bfff17 	ldw	r2,-4(fp)
 200df08:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
 200df0c:	e0bfff17 	ldw	r2,-4(fp)
 200df10:	10000985 	stb	zero,38(r2)
  sp->active = 0;
 200df14:	e0bfff17 	ldw	r2,-4(fp)
 200df18:	100009c5 	stb	zero,39(r2)
 200df1c:	00808074 	movhi	r2,513
 200df20:	108c1404 	addi	r2,r2,12368
 200df24:	10800017 	ldw	r2,0(r2)
 200df28:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
 200df2c:	01400284 	movi	r5,10
 200df30:	20011d40 	call	20011d4 <__udivsi3>
 200df34:	1007883a 	mov	r3,r2
 200df38:	e0bfff17 	ldw	r2,-4(fp)
 200df3c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
 200df40:	e0bfff17 	ldw	r2,-4(fp)
 200df44:	11000104 	addi	r4,r2,4
 200df48:	e0bfff17 	ldw	r2,-4(fp)
 200df4c:	10800717 	ldw	r2,28(r2)
 200df50:	100b883a 	mov	r5,r2
 200df54:	01808074 	movhi	r6,513
 200df58:	31b75c04 	addi	r6,r6,-8848
 200df5c:	e1ffff17 	ldw	r7,-4(fp)
 200df60:	200e0d00 	call	200e0d0 <alt_alarm_start>
}
 200df64:	e037883a 	mov	sp,fp
 200df68:	dfc00117 	ldw	ra,4(sp)
 200df6c:	df000017 	ldw	fp,0(sp)
 200df70:	dec00204 	addi	sp,sp,8
 200df74:	f800283a 	ret

0200df78 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200df78:	defffa04 	addi	sp,sp,-24
 200df7c:	dfc00515 	stw	ra,20(sp)
 200df80:	df000415 	stw	fp,16(sp)
 200df84:	df000404 	addi	fp,sp,16
 200df88:	e13ffd15 	stw	r4,-12(fp)
 200df8c:	e17ffe15 	stw	r5,-8(fp)
 200df90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
 200df94:	e0bffd17 	ldw	r2,-12(fp)
 200df98:	10800017 	ldw	r2,0(r2)
 200df9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
 200dfa0:	e0bffc17 	ldw	r2,-16(fp)
 200dfa4:	11000a04 	addi	r4,r2,40
 200dfa8:	e0bffd17 	ldw	r2,-12(fp)
 200dfac:	11c00217 	ldw	r7,8(r2)
 200dfb0:	e17ffe17 	ldw	r5,-8(fp)
 200dfb4:	e1bfff17 	ldw	r6,-4(fp)
 200dfb8:	200d8640 	call	200d864 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
 200dfbc:	e037883a 	mov	sp,fp
 200dfc0:	dfc00117 	ldw	ra,4(sp)
 200dfc4:	df000017 	ldw	fp,0(sp)
 200dfc8:	dec00204 	addi	sp,sp,8
 200dfcc:	f800283a 	ret

0200dfd0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 200dfd0:	defffa04 	addi	sp,sp,-24
 200dfd4:	dfc00515 	stw	ra,20(sp)
 200dfd8:	df000415 	stw	fp,16(sp)
 200dfdc:	df000404 	addi	fp,sp,16
 200dfe0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 200dfe4:	e0bfff17 	ldw	r2,-4(fp)
 200dfe8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 200dfec:	e0bfff17 	ldw	r2,-4(fp)
 200dff0:	10800104 	addi	r2,r2,4
 200dff4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200dff8:	0005303a 	rdctl	r2,status
 200dffc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e000:	e0fffd17 	ldw	r3,-12(fp)
 200e004:	00bfff84 	movi	r2,-2
 200e008:	1884703a 	and	r2,r3,r2
 200e00c:	1001703a 	wrctl	status,r2
  
  return context;
 200e010:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 200e014:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 200e018:	200c24c0 	call	200c24c <alt_tick>
 200e01c:	e0bffe17 	ldw	r2,-8(fp)
 200e020:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e024:	e0bffc17 	ldw	r2,-16(fp)
 200e028:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 200e02c:	e037883a 	mov	sp,fp
 200e030:	dfc00117 	ldw	ra,4(sp)
 200e034:	df000017 	ldw	fp,0(sp)
 200e038:	dec00204 	addi	sp,sp,8
 200e03c:	f800283a 	ret

0200e040 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 200e040:	defff804 	addi	sp,sp,-32
 200e044:	dfc00715 	stw	ra,28(sp)
 200e048:	df000615 	stw	fp,24(sp)
 200e04c:	df000604 	addi	fp,sp,24
 200e050:	e13ffc15 	stw	r4,-16(fp)
 200e054:	e17ffd15 	stw	r5,-12(fp)
 200e058:	e1bffe15 	stw	r6,-8(fp)
 200e05c:	e1ffff15 	stw	r7,-4(fp)
 200e060:	e0bfff17 	ldw	r2,-4(fp)
 200e064:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 200e068:	00808074 	movhi	r2,513
 200e06c:	108c1404 	addi	r2,r2,12368
 200e070:	10800017 	ldw	r2,0(r2)
 200e074:	1004c03a 	cmpne	r2,r2,zero
 200e078:	1000041e 	bne	r2,zero,200e08c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 200e07c:	00c08074 	movhi	r3,513
 200e080:	18cc1404 	addi	r3,r3,12368
 200e084:	e0bffb17 	ldw	r2,-20(fp)
 200e088:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 200e08c:	e0bffc17 	ldw	r2,-16(fp)
 200e090:	10800104 	addi	r2,r2,4
 200e094:	1007883a 	mov	r3,r2
 200e098:	008001c4 	movi	r2,7
 200e09c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 200e0a0:	d8000015 	stw	zero,0(sp)
 200e0a4:	e13ffd17 	ldw	r4,-12(fp)
 200e0a8:	e17ffe17 	ldw	r5,-8(fp)
 200e0ac:	01808074 	movhi	r6,513
 200e0b0:	31b7f404 	addi	r6,r6,-8240
 200e0b4:	e1fffc17 	ldw	r7,-16(fp)
 200e0b8:	200e82c0 	call	200e82c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 200e0bc:	e037883a 	mov	sp,fp
 200e0c0:	dfc00117 	ldw	ra,4(sp)
 200e0c4:	df000017 	ldw	fp,0(sp)
 200e0c8:	dec00204 	addi	sp,sp,8
 200e0cc:	f800283a 	ret

0200e0d0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 200e0d0:	defff404 	addi	sp,sp,-48
 200e0d4:	df000b15 	stw	fp,44(sp)
 200e0d8:	df000b04 	addi	fp,sp,44
 200e0dc:	e13ffb15 	stw	r4,-20(fp)
 200e0e0:	e17ffc15 	stw	r5,-16(fp)
 200e0e4:	e1bffd15 	stw	r6,-12(fp)
 200e0e8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 200e0ec:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200e0f0:	00808074 	movhi	r2,513
 200e0f4:	108c1404 	addi	r2,r2,12368
 200e0f8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 200e0fc:	1005003a 	cmpeq	r2,r2,zero
 200e100:	1000411e 	bne	r2,zero,200e208 <alt_alarm_start+0x138>
  {
    if (alarm)
 200e104:	e0bffb17 	ldw	r2,-20(fp)
 200e108:	1005003a 	cmpeq	r2,r2,zero
 200e10c:	10003b1e 	bne	r2,zero,200e1fc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 200e110:	e0fffb17 	ldw	r3,-20(fp)
 200e114:	e0bffd17 	ldw	r2,-12(fp)
 200e118:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 200e11c:	e0fffb17 	ldw	r3,-20(fp)
 200e120:	e0bffe17 	ldw	r2,-8(fp)
 200e124:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e128:	0005303a 	rdctl	r2,status
 200e12c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e130:	e0fff817 	ldw	r3,-32(fp)
 200e134:	00bfff84 	movi	r2,-2
 200e138:	1884703a 	and	r2,r3,r2
 200e13c:	1001703a 	wrctl	status,r2
  
  return context;
 200e140:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 200e144:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 200e148:	00808074 	movhi	r2,513
 200e14c:	108c1504 	addi	r2,r2,12372
 200e150:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 200e154:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 200e158:	e0fffc17 	ldw	r3,-16(fp)
 200e15c:	e0bff917 	ldw	r2,-28(fp)
 200e160:	1885883a 	add	r2,r3,r2
 200e164:	10c00044 	addi	r3,r2,1
 200e168:	e0bffb17 	ldw	r2,-20(fp)
 200e16c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 200e170:	e0bffb17 	ldw	r2,-20(fp)
 200e174:	10c00217 	ldw	r3,8(r2)
 200e178:	e0bff917 	ldw	r2,-28(fp)
 200e17c:	1880042e 	bgeu	r3,r2,200e190 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 200e180:	e0fffb17 	ldw	r3,-20(fp)
 200e184:	00800044 	movi	r2,1
 200e188:	18800405 	stb	r2,16(r3)
 200e18c:	00000206 	br	200e198 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 200e190:	e0bffb17 	ldw	r2,-20(fp)
 200e194:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 200e198:	e0fffb17 	ldw	r3,-20(fp)
 200e19c:	00808074 	movhi	r2,513
 200e1a0:	10851c04 	addi	r2,r2,5232
 200e1a4:	e0bff615 	stw	r2,-40(fp)
 200e1a8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200e1ac:	e0fff717 	ldw	r3,-36(fp)
 200e1b0:	e0bff617 	ldw	r2,-40(fp)
 200e1b4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 200e1b8:	e0bff617 	ldw	r2,-40(fp)
 200e1bc:	10c00017 	ldw	r3,0(r2)
 200e1c0:	e0bff717 	ldw	r2,-36(fp)
 200e1c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200e1c8:	e0bff617 	ldw	r2,-40(fp)
 200e1cc:	10c00017 	ldw	r3,0(r2)
 200e1d0:	e0bff717 	ldw	r2,-36(fp)
 200e1d4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 200e1d8:	e0fff617 	ldw	r3,-40(fp)
 200e1dc:	e0bff717 	ldw	r2,-36(fp)
 200e1e0:	18800015 	stw	r2,0(r3)
 200e1e4:	e0bffa17 	ldw	r2,-24(fp)
 200e1e8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e1ec:	e0bff517 	ldw	r2,-44(fp)
 200e1f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 200e1f4:	e03fff15 	stw	zero,-4(fp)
 200e1f8:	00000506 	br	200e210 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 200e1fc:	00bffa84 	movi	r2,-22
 200e200:	e0bfff15 	stw	r2,-4(fp)
 200e204:	00000206 	br	200e210 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 200e208:	00bfde84 	movi	r2,-134
 200e20c:	e0bfff15 	stw	r2,-4(fp)
 200e210:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 200e214:	e037883a 	mov	sp,fp
 200e218:	df000017 	ldw	fp,0(sp)
 200e21c:	dec00104 	addi	sp,sp,4
 200e220:	f800283a 	ret

0200e224 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 200e224:	defffa04 	addi	sp,sp,-24
 200e228:	dfc00515 	stw	ra,20(sp)
 200e22c:	df000415 	stw	fp,16(sp)
 200e230:	df000404 	addi	fp,sp,16
 200e234:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 200e238:	008000c4 	movi	r2,3
 200e23c:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 200e240:	e0fffc17 	ldw	r3,-16(fp)
 200e244:	008003f4 	movhi	r2,15
 200e248:	10909004 	addi	r2,r2,16960
 200e24c:	188b383a 	mul	r5,r3,r2
 200e250:	0100bef4 	movhi	r4,763
 200e254:	213c2004 	addi	r4,r4,-3968
 200e258:	20011d40 	call	20011d4 <__udivsi3>
 200e25c:	100b883a 	mov	r5,r2
 200e260:	01200034 	movhi	r4,32768
 200e264:	213fffc4 	addi	r4,r4,-1
 200e268:	20011d40 	call	20011d4 <__udivsi3>
 200e26c:	100b883a 	mov	r5,r2
 200e270:	e13fff17 	ldw	r4,-4(fp)
 200e274:	20011d40 	call	20011d4 <__udivsi3>
 200e278:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 200e27c:	e0bffd17 	ldw	r2,-12(fp)
 200e280:	1005003a 	cmpeq	r2,r2,zero
 200e284:	1000281e 	bne	r2,zero,200e328 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 200e288:	e03ffe15 	stw	zero,-8(fp)
 200e28c:	00001606 	br	200e2e8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 200e290:	00a00034 	movhi	r2,32768
 200e294:	10bfffc4 	addi	r2,r2,-1
 200e298:	10bfffc4 	addi	r2,r2,-1
 200e29c:	103ffe1e 	bne	r2,zero,200e298 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 200e2a0:	e0fffc17 	ldw	r3,-16(fp)
 200e2a4:	008003f4 	movhi	r2,15
 200e2a8:	10909004 	addi	r2,r2,16960
 200e2ac:	188b383a 	mul	r5,r3,r2
 200e2b0:	0100bef4 	movhi	r4,763
 200e2b4:	213c2004 	addi	r4,r4,-3968
 200e2b8:	20011d40 	call	20011d4 <__udivsi3>
 200e2bc:	100b883a 	mov	r5,r2
 200e2c0:	01200034 	movhi	r4,32768
 200e2c4:	213fffc4 	addi	r4,r4,-1
 200e2c8:	20011d40 	call	20011d4 <__udivsi3>
 200e2cc:	1007883a 	mov	r3,r2
 200e2d0:	e0bfff17 	ldw	r2,-4(fp)
 200e2d4:	10c5c83a 	sub	r2,r2,r3
 200e2d8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 200e2dc:	e0bffe17 	ldw	r2,-8(fp)
 200e2e0:	10800044 	addi	r2,r2,1
 200e2e4:	e0bffe15 	stw	r2,-8(fp)
 200e2e8:	e0fffe17 	ldw	r3,-8(fp)
 200e2ec:	e0bffd17 	ldw	r2,-12(fp)
 200e2f0:	18bfe716 	blt	r3,r2,200e290 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 200e2f4:	e0fffc17 	ldw	r3,-16(fp)
 200e2f8:	008003f4 	movhi	r2,15
 200e2fc:	10909004 	addi	r2,r2,16960
 200e300:	188b383a 	mul	r5,r3,r2
 200e304:	0100bef4 	movhi	r4,763
 200e308:	213c2004 	addi	r4,r4,-3968
 200e30c:	20011d40 	call	20011d4 <__udivsi3>
 200e310:	1007883a 	mov	r3,r2
 200e314:	e0bfff17 	ldw	r2,-4(fp)
 200e318:	1885383a 	mul	r2,r3,r2
 200e31c:	10bfffc4 	addi	r2,r2,-1
 200e320:	103ffe1e 	bne	r2,zero,200e31c <alt_busy_sleep+0xf8>
 200e324:	00000c06 	br	200e358 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 200e328:	e0fffc17 	ldw	r3,-16(fp)
 200e32c:	008003f4 	movhi	r2,15
 200e330:	10909004 	addi	r2,r2,16960
 200e334:	188b383a 	mul	r5,r3,r2
 200e338:	0100bef4 	movhi	r4,763
 200e33c:	213c2004 	addi	r4,r4,-3968
 200e340:	20011d40 	call	20011d4 <__udivsi3>
 200e344:	1007883a 	mov	r3,r2
 200e348:	e0bfff17 	ldw	r2,-4(fp)
 200e34c:	1885383a 	mul	r2,r3,r2
 200e350:	10bfffc4 	addi	r2,r2,-1
 200e354:	00bffe16 	blt	zero,r2,200e350 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 200e358:	0005883a 	mov	r2,zero
}
 200e35c:	e037883a 	mov	sp,fp
 200e360:	dfc00117 	ldw	ra,4(sp)
 200e364:	df000017 	ldw	fp,0(sp)
 200e368:	dec00204 	addi	sp,sp,8
 200e36c:	f800283a 	ret

0200e370 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 200e370:	defffe04 	addi	sp,sp,-8
 200e374:	df000115 	stw	fp,4(sp)
 200e378:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 200e37c:	e03fff15 	stw	zero,-4(fp)
 200e380:	00000506 	br	200e398 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 200e384:	e0bfff17 	ldw	r2,-4(fp)
 200e388:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 200e38c:	e0bfff17 	ldw	r2,-4(fp)
 200e390:	10800804 	addi	r2,r2,32
 200e394:	e0bfff15 	stw	r2,-4(fp)
 200e398:	e0bfff17 	ldw	r2,-4(fp)
 200e39c:	10820030 	cmpltui	r2,r2,2048
 200e3a0:	103ff81e 	bne	r2,zero,200e384 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 200e3a4:	e037883a 	mov	sp,fp
 200e3a8:	df000017 	ldw	fp,0(sp)
 200e3ac:	dec00104 	addi	sp,sp,4
 200e3b0:	f800283a 	ret

0200e3b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 200e3b4:	defff904 	addi	sp,sp,-28
 200e3b8:	dfc00615 	stw	ra,24(sp)
 200e3bc:	df000515 	stw	fp,20(sp)
 200e3c0:	df000504 	addi	fp,sp,20
 200e3c4:	e13ffd15 	stw	r4,-12(fp)
 200e3c8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 200e3cc:	e0bffd17 	ldw	r2,-12(fp)
 200e3d0:	1005003a 	cmpeq	r2,r2,zero
 200e3d4:	1000041e 	bne	r2,zero,200e3e8 <alt_dev_llist_insert+0x34>
 200e3d8:	e0bffd17 	ldw	r2,-12(fp)
 200e3dc:	10800217 	ldw	r2,8(r2)
 200e3e0:	1004c03a 	cmpne	r2,r2,zero
 200e3e4:	1000071e 	bne	r2,zero,200e404 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 200e3e8:	200e4680 	call	200e468 <alt_get_errno>
 200e3ec:	1007883a 	mov	r3,r2
 200e3f0:	00800584 	movi	r2,22
 200e3f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 200e3f8:	00bffa84 	movi	r2,-22
 200e3fc:	e0bfff15 	stw	r2,-4(fp)
 200e400:	00001306 	br	200e450 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 200e404:	e0fffd17 	ldw	r3,-12(fp)
 200e408:	e0bffe17 	ldw	r2,-8(fp)
 200e40c:	e0bffb15 	stw	r2,-20(fp)
 200e410:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200e414:	e0fffc17 	ldw	r3,-16(fp)
 200e418:	e0bffb17 	ldw	r2,-20(fp)
 200e41c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 200e420:	e0bffb17 	ldw	r2,-20(fp)
 200e424:	10c00017 	ldw	r3,0(r2)
 200e428:	e0bffc17 	ldw	r2,-16(fp)
 200e42c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200e430:	e0bffb17 	ldw	r2,-20(fp)
 200e434:	10c00017 	ldw	r3,0(r2)
 200e438:	e0bffc17 	ldw	r2,-16(fp)
 200e43c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 200e440:	e0fffb17 	ldw	r3,-20(fp)
 200e444:	e0bffc17 	ldw	r2,-16(fp)
 200e448:	18800015 	stw	r2,0(r3)

  return 0;  
 200e44c:	e03fff15 	stw	zero,-4(fp)
 200e450:	e0bfff17 	ldw	r2,-4(fp)
}
 200e454:	e037883a 	mov	sp,fp
 200e458:	dfc00117 	ldw	ra,4(sp)
 200e45c:	df000017 	ldw	fp,0(sp)
 200e460:	dec00204 	addi	sp,sp,8
 200e464:	f800283a 	ret

0200e468 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e468:	defffd04 	addi	sp,sp,-12
 200e46c:	dfc00215 	stw	ra,8(sp)
 200e470:	df000115 	stw	fp,4(sp)
 200e474:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200e478:	00808074 	movhi	r2,513
 200e47c:	10851a04 	addi	r2,r2,5224
 200e480:	10800017 	ldw	r2,0(r2)
 200e484:	1005003a 	cmpeq	r2,r2,zero
 200e488:	1000061e 	bne	r2,zero,200e4a4 <alt_get_errno+0x3c>
 200e48c:	00808074 	movhi	r2,513
 200e490:	10851a04 	addi	r2,r2,5224
 200e494:	10800017 	ldw	r2,0(r2)
 200e498:	103ee83a 	callr	r2
 200e49c:	e0bfff15 	stw	r2,-4(fp)
 200e4a0:	00000306 	br	200e4b0 <alt_get_errno+0x48>
 200e4a4:	00808074 	movhi	r2,513
 200e4a8:	108c0604 	addi	r2,r2,12312
 200e4ac:	e0bfff15 	stw	r2,-4(fp)
 200e4b0:	e0bfff17 	ldw	r2,-4(fp)
}
 200e4b4:	e037883a 	mov	sp,fp
 200e4b8:	dfc00117 	ldw	ra,4(sp)
 200e4bc:	df000017 	ldw	fp,0(sp)
 200e4c0:	dec00204 	addi	sp,sp,8
 200e4c4:	f800283a 	ret

0200e4c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 200e4c8:	defffd04 	addi	sp,sp,-12
 200e4cc:	dfc00215 	stw	ra,8(sp)
 200e4d0:	df000115 	stw	fp,4(sp)
 200e4d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200e4d8:	00bfff04 	movi	r2,-4
 200e4dc:	00c08074 	movhi	r3,513
 200e4e0:	18fc3c04 	addi	r3,r3,-3856
 200e4e4:	1885883a 	add	r2,r3,r2
 200e4e8:	e0bfff15 	stw	r2,-4(fp)
 200e4ec:	00000606 	br	200e508 <_do_ctors+0x40>
        (*ctor) (); 
 200e4f0:	e0bfff17 	ldw	r2,-4(fp)
 200e4f4:	10800017 	ldw	r2,0(r2)
 200e4f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200e4fc:	e0bfff17 	ldw	r2,-4(fp)
 200e500:	10bfff04 	addi	r2,r2,-4
 200e504:	e0bfff15 	stw	r2,-4(fp)
 200e508:	e0ffff17 	ldw	r3,-4(fp)
 200e50c:	00808074 	movhi	r2,513
 200e510:	10bc3b04 	addi	r2,r2,-3860
 200e514:	18bff62e 	bgeu	r3,r2,200e4f0 <_do_ctors+0x28>
        (*ctor) (); 
}
 200e518:	e037883a 	mov	sp,fp
 200e51c:	dfc00117 	ldw	ra,4(sp)
 200e520:	df000017 	ldw	fp,0(sp)
 200e524:	dec00204 	addi	sp,sp,8
 200e528:	f800283a 	ret

0200e52c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 200e52c:	defffd04 	addi	sp,sp,-12
 200e530:	dfc00215 	stw	ra,8(sp)
 200e534:	df000115 	stw	fp,4(sp)
 200e538:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200e53c:	00bfff04 	movi	r2,-4
 200e540:	00c08074 	movhi	r3,513
 200e544:	18fc3c04 	addi	r3,r3,-3856
 200e548:	1885883a 	add	r2,r3,r2
 200e54c:	e0bfff15 	stw	r2,-4(fp)
 200e550:	00000606 	br	200e56c <_do_dtors+0x40>
        (*dtor) (); 
 200e554:	e0bfff17 	ldw	r2,-4(fp)
 200e558:	10800017 	ldw	r2,0(r2)
 200e55c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200e560:	e0bfff17 	ldw	r2,-4(fp)
 200e564:	10bfff04 	addi	r2,r2,-4
 200e568:	e0bfff15 	stw	r2,-4(fp)
 200e56c:	e0ffff17 	ldw	r3,-4(fp)
 200e570:	00808074 	movhi	r2,513
 200e574:	10bc3c04 	addi	r2,r2,-3856
 200e578:	18bff62e 	bgeu	r3,r2,200e554 <_do_dtors+0x28>
        (*dtor) (); 
}
 200e57c:	e037883a 	mov	sp,fp
 200e580:	dfc00117 	ldw	ra,4(sp)
 200e584:	df000017 	ldw	fp,0(sp)
 200e588:	dec00204 	addi	sp,sp,8
 200e58c:	f800283a 	ret

0200e590 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 200e590:	defff904 	addi	sp,sp,-28
 200e594:	dfc00615 	stw	ra,24(sp)
 200e598:	df000515 	stw	fp,20(sp)
 200e59c:	df000504 	addi	fp,sp,20
 200e5a0:	e13ffd15 	stw	r4,-12(fp)
 200e5a4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 200e5a8:	e0bffe17 	ldw	r2,-8(fp)
 200e5ac:	10800017 	ldw	r2,0(r2)
 200e5b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 200e5b4:	e13ffd17 	ldw	r4,-12(fp)
 200e5b8:	2002fe80 	call	2002fe8 <strlen>
 200e5bc:	10800044 	addi	r2,r2,1
 200e5c0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200e5c4:	00000d06 	br	200e5fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 200e5c8:	e0bffc17 	ldw	r2,-16(fp)
 200e5cc:	11000217 	ldw	r4,8(r2)
 200e5d0:	e1bffb17 	ldw	r6,-20(fp)
 200e5d4:	e17ffd17 	ldw	r5,-12(fp)
 200e5d8:	200ed300 	call	200ed30 <memcmp>
 200e5dc:	1004c03a 	cmpne	r2,r2,zero
 200e5e0:	1000031e 	bne	r2,zero,200e5f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 200e5e4:	e0bffc17 	ldw	r2,-16(fp)
 200e5e8:	e0bfff15 	stw	r2,-4(fp)
 200e5ec:	00000706 	br	200e60c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 200e5f0:	e0bffc17 	ldw	r2,-16(fp)
 200e5f4:	10800017 	ldw	r2,0(r2)
 200e5f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200e5fc:	e0fffe17 	ldw	r3,-8(fp)
 200e600:	e0bffc17 	ldw	r2,-16(fp)
 200e604:	10fff01e 	bne	r2,r3,200e5c8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 200e608:	e03fff15 	stw	zero,-4(fp)
 200e60c:	e0bfff17 	ldw	r2,-4(fp)
}
 200e610:	e037883a 	mov	sp,fp
 200e614:	dfc00117 	ldw	ra,4(sp)
 200e618:	df000017 	ldw	fp,0(sp)
 200e61c:	dec00204 	addi	sp,sp,8
 200e620:	f800283a 	ret

0200e624 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 200e624:	defffa04 	addi	sp,sp,-24
 200e628:	dfc00515 	stw	ra,20(sp)
 200e62c:	df000415 	stw	fp,16(sp)
 200e630:	df000404 	addi	fp,sp,16
 200e634:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 200e638:	00808074 	movhi	r2,513
 200e63c:	10851504 	addi	r2,r2,5204
 200e640:	10800017 	ldw	r2,0(r2)
 200e644:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200e648:	00003306 	br	200e718 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 200e64c:	e0bffd17 	ldw	r2,-12(fp)
 200e650:	11000217 	ldw	r4,8(r2)
 200e654:	2002fe80 	call	2002fe8 <strlen>
 200e658:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 200e65c:	e0bffd17 	ldw	r2,-12(fp)
 200e660:	10c00217 	ldw	r3,8(r2)
 200e664:	e0bffc17 	ldw	r2,-16(fp)
 200e668:	1885883a 	add	r2,r3,r2
 200e66c:	10bfffc4 	addi	r2,r2,-1
 200e670:	10800003 	ldbu	r2,0(r2)
 200e674:	10803fcc 	andi	r2,r2,255
 200e678:	1080201c 	xori	r2,r2,128
 200e67c:	10bfe004 	addi	r2,r2,-128
 200e680:	10800bd8 	cmpnei	r2,r2,47
 200e684:	1000031e 	bne	r2,zero,200e694 <alt_find_file+0x70>
    {
      len -= 1;
 200e688:	e0bffc17 	ldw	r2,-16(fp)
 200e68c:	10bfffc4 	addi	r2,r2,-1
 200e690:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 200e694:	e0bffc17 	ldw	r2,-16(fp)
 200e698:	1007883a 	mov	r3,r2
 200e69c:	e0bffe17 	ldw	r2,-8(fp)
 200e6a0:	1885883a 	add	r2,r3,r2
 200e6a4:	10800003 	ldbu	r2,0(r2)
 200e6a8:	10803fcc 	andi	r2,r2,255
 200e6ac:	1080201c 	xori	r2,r2,128
 200e6b0:	10bfe004 	addi	r2,r2,-128
 200e6b4:	10800be0 	cmpeqi	r2,r2,47
 200e6b8:	10000a1e 	bne	r2,zero,200e6e4 <alt_find_file+0xc0>
 200e6bc:	e0bffc17 	ldw	r2,-16(fp)
 200e6c0:	1007883a 	mov	r3,r2
 200e6c4:	e0bffe17 	ldw	r2,-8(fp)
 200e6c8:	1885883a 	add	r2,r3,r2
 200e6cc:	10800003 	ldbu	r2,0(r2)
 200e6d0:	10803fcc 	andi	r2,r2,255
 200e6d4:	1080201c 	xori	r2,r2,128
 200e6d8:	10bfe004 	addi	r2,r2,-128
 200e6dc:	1004c03a 	cmpne	r2,r2,zero
 200e6e0:	10000a1e 	bne	r2,zero,200e70c <alt_find_file+0xe8>
 200e6e4:	e0bffd17 	ldw	r2,-12(fp)
 200e6e8:	11000217 	ldw	r4,8(r2)
 200e6ec:	e1bffc17 	ldw	r6,-16(fp)
 200e6f0:	e17ffe17 	ldw	r5,-8(fp)
 200e6f4:	200ed300 	call	200ed30 <memcmp>
 200e6f8:	1004c03a 	cmpne	r2,r2,zero
 200e6fc:	1000031e 	bne	r2,zero,200e70c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 200e700:	e0bffd17 	ldw	r2,-12(fp)
 200e704:	e0bfff15 	stw	r2,-4(fp)
 200e708:	00000806 	br	200e72c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 200e70c:	e0bffd17 	ldw	r2,-12(fp)
 200e710:	10800017 	ldw	r2,0(r2)
 200e714:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200e718:	00c08074 	movhi	r3,513
 200e71c:	18c51504 	addi	r3,r3,5204
 200e720:	e0bffd17 	ldw	r2,-12(fp)
 200e724:	10ffc91e 	bne	r2,r3,200e64c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 200e728:	e03fff15 	stw	zero,-4(fp)
 200e72c:	e0bfff17 	ldw	r2,-4(fp)
}
 200e730:	e037883a 	mov	sp,fp
 200e734:	dfc00117 	ldw	ra,4(sp)
 200e738:	df000017 	ldw	fp,0(sp)
 200e73c:	dec00204 	addi	sp,sp,8
 200e740:	f800283a 	ret

0200e744 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 200e744:	defffc04 	addi	sp,sp,-16
 200e748:	df000315 	stw	fp,12(sp)
 200e74c:	df000304 	addi	fp,sp,12
 200e750:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 200e754:	00bffa04 	movi	r2,-24
 200e758:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 200e75c:	e03ffe15 	stw	zero,-8(fp)
 200e760:	00001e06 	br	200e7dc <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 200e764:	e0bffe17 	ldw	r2,-8(fp)
 200e768:	00c08074 	movhi	r3,513
 200e76c:	18c04f04 	addi	r3,r3,316
 200e770:	10800324 	muli	r2,r2,12
 200e774:	10c5883a 	add	r2,r2,r3
 200e778:	10800017 	ldw	r2,0(r2)
 200e77c:	1004c03a 	cmpne	r2,r2,zero
 200e780:	1000131e 	bne	r2,zero,200e7d0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 200e784:	e0bffe17 	ldw	r2,-8(fp)
 200e788:	00c08074 	movhi	r3,513
 200e78c:	18c04f04 	addi	r3,r3,316
 200e790:	10800324 	muli	r2,r2,12
 200e794:	10c7883a 	add	r3,r2,r3
 200e798:	e0bfff17 	ldw	r2,-4(fp)
 200e79c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 200e7a0:	00808074 	movhi	r2,513
 200e7a4:	10851904 	addi	r2,r2,5220
 200e7a8:	10c00017 	ldw	r3,0(r2)
 200e7ac:	e0bffe17 	ldw	r2,-8(fp)
 200e7b0:	1880040e 	bge	r3,r2,200e7c4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 200e7b4:	00c08074 	movhi	r3,513
 200e7b8:	18c51904 	addi	r3,r3,5220
 200e7bc:	e0bffe17 	ldw	r2,-8(fp)
 200e7c0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 200e7c4:	e0bffe17 	ldw	r2,-8(fp)
 200e7c8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 200e7cc:	00000606 	br	200e7e8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 200e7d0:	e0bffe17 	ldw	r2,-8(fp)
 200e7d4:	10800044 	addi	r2,r2,1
 200e7d8:	e0bffe15 	stw	r2,-8(fp)
 200e7dc:	e0bffe17 	ldw	r2,-8(fp)
 200e7e0:	10800810 	cmplti	r2,r2,32
 200e7e4:	103fdf1e 	bne	r2,zero,200e764 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 200e7e8:	e0bffd17 	ldw	r2,-12(fp)
}
 200e7ec:	e037883a 	mov	sp,fp
 200e7f0:	df000017 	ldw	fp,0(sp)
 200e7f4:	dec00104 	addi	sp,sp,4
 200e7f8:	f800283a 	ret

0200e7fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 200e7fc:	defffe04 	addi	sp,sp,-8
 200e800:	dfc00115 	stw	ra,4(sp)
 200e804:	df000015 	stw	fp,0(sp)
 200e808:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 200e80c:	0009883a 	mov	r4,zero
 200e810:	01440004 	movi	r5,4096
 200e814:	200ec540 	call	200ec54 <alt_icache_flush>
#endif
}
 200e818:	e037883a 	mov	sp,fp
 200e81c:	dfc00117 	ldw	ra,4(sp)
 200e820:	df000017 	ldw	fp,0(sp)
 200e824:	dec00204 	addi	sp,sp,8
 200e828:	f800283a 	ret

0200e82c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200e82c:	defff904 	addi	sp,sp,-28
 200e830:	dfc00615 	stw	ra,24(sp)
 200e834:	df000515 	stw	fp,20(sp)
 200e838:	df000504 	addi	fp,sp,20
 200e83c:	e13ffc15 	stw	r4,-16(fp)
 200e840:	e17ffd15 	stw	r5,-12(fp)
 200e844:	e1bffe15 	stw	r6,-8(fp)
 200e848:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 200e84c:	e0800217 	ldw	r2,8(fp)
 200e850:	d8800015 	stw	r2,0(sp)
 200e854:	e13ffc17 	ldw	r4,-16(fp)
 200e858:	e17ffd17 	ldw	r5,-12(fp)
 200e85c:	e1bffe17 	ldw	r6,-8(fp)
 200e860:	e1ffff17 	ldw	r7,-4(fp)
 200e864:	200ea000 	call	200ea00 <alt_iic_isr_register>
}  
 200e868:	e037883a 	mov	sp,fp
 200e86c:	dfc00117 	ldw	ra,4(sp)
 200e870:	df000017 	ldw	fp,0(sp)
 200e874:	dec00204 	addi	sp,sp,8
 200e878:	f800283a 	ret

0200e87c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 200e87c:	defff904 	addi	sp,sp,-28
 200e880:	df000615 	stw	fp,24(sp)
 200e884:	df000604 	addi	fp,sp,24
 200e888:	e13ffe15 	stw	r4,-8(fp)
 200e88c:	e17fff15 	stw	r5,-4(fp)
 200e890:	e0bfff17 	ldw	r2,-4(fp)
 200e894:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e898:	0005303a 	rdctl	r2,status
 200e89c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e8a0:	e0fffb17 	ldw	r3,-20(fp)
 200e8a4:	00bfff84 	movi	r2,-2
 200e8a8:	1884703a 	and	r2,r3,r2
 200e8ac:	1001703a 	wrctl	status,r2
  
  return context;
 200e8b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200e8b4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 200e8b8:	e0fffc17 	ldw	r3,-16(fp)
 200e8bc:	00800044 	movi	r2,1
 200e8c0:	10c4983a 	sll	r2,r2,r3
 200e8c4:	1007883a 	mov	r3,r2
 200e8c8:	00808074 	movhi	r2,513
 200e8cc:	108c1604 	addi	r2,r2,12376
 200e8d0:	10800017 	ldw	r2,0(r2)
 200e8d4:	1886b03a 	or	r3,r3,r2
 200e8d8:	00808074 	movhi	r2,513
 200e8dc:	108c1604 	addi	r2,r2,12376
 200e8e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200e8e4:	00808074 	movhi	r2,513
 200e8e8:	108c1604 	addi	r2,r2,12376
 200e8ec:	10800017 	ldw	r2,0(r2)
 200e8f0:	100170fa 	wrctl	ienable,r2
 200e8f4:	e0bffd17 	ldw	r2,-12(fp)
 200e8f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e8fc:	e0bffa17 	ldw	r2,-24(fp)
 200e900:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200e904:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 200e908:	e037883a 	mov	sp,fp
 200e90c:	df000017 	ldw	fp,0(sp)
 200e910:	dec00104 	addi	sp,sp,4
 200e914:	f800283a 	ret

0200e918 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 200e918:	defff904 	addi	sp,sp,-28
 200e91c:	df000615 	stw	fp,24(sp)
 200e920:	df000604 	addi	fp,sp,24
 200e924:	e13ffe15 	stw	r4,-8(fp)
 200e928:	e17fff15 	stw	r5,-4(fp)
 200e92c:	e0bfff17 	ldw	r2,-4(fp)
 200e930:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e934:	0005303a 	rdctl	r2,status
 200e938:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e93c:	e0fffb17 	ldw	r3,-20(fp)
 200e940:	00bfff84 	movi	r2,-2
 200e944:	1884703a 	and	r2,r3,r2
 200e948:	1001703a 	wrctl	status,r2
  
  return context;
 200e94c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200e950:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 200e954:	e0fffc17 	ldw	r3,-16(fp)
 200e958:	00800044 	movi	r2,1
 200e95c:	10c4983a 	sll	r2,r2,r3
 200e960:	0084303a 	nor	r2,zero,r2
 200e964:	1007883a 	mov	r3,r2
 200e968:	00808074 	movhi	r2,513
 200e96c:	108c1604 	addi	r2,r2,12376
 200e970:	10800017 	ldw	r2,0(r2)
 200e974:	1886703a 	and	r3,r3,r2
 200e978:	00808074 	movhi	r2,513
 200e97c:	108c1604 	addi	r2,r2,12376
 200e980:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200e984:	00808074 	movhi	r2,513
 200e988:	108c1604 	addi	r2,r2,12376
 200e98c:	10800017 	ldw	r2,0(r2)
 200e990:	100170fa 	wrctl	ienable,r2
 200e994:	e0bffd17 	ldw	r2,-12(fp)
 200e998:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e99c:	e0bffa17 	ldw	r2,-24(fp)
 200e9a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200e9a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 200e9a8:	e037883a 	mov	sp,fp
 200e9ac:	df000017 	ldw	fp,0(sp)
 200e9b0:	dec00104 	addi	sp,sp,4
 200e9b4:	f800283a 	ret

0200e9b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 200e9b8:	defffc04 	addi	sp,sp,-16
 200e9bc:	df000315 	stw	fp,12(sp)
 200e9c0:	df000304 	addi	fp,sp,12
 200e9c4:	e13ffe15 	stw	r4,-8(fp)
 200e9c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 200e9cc:	000530fa 	rdctl	r2,ienable
 200e9d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 200e9d4:	e0ffff17 	ldw	r3,-4(fp)
 200e9d8:	00800044 	movi	r2,1
 200e9dc:	10c4983a 	sll	r2,r2,r3
 200e9e0:	1007883a 	mov	r3,r2
 200e9e4:	e0bffd17 	ldw	r2,-12(fp)
 200e9e8:	1884703a 	and	r2,r3,r2
 200e9ec:	1004c03a 	cmpne	r2,r2,zero
}
 200e9f0:	e037883a 	mov	sp,fp
 200e9f4:	df000017 	ldw	fp,0(sp)
 200e9f8:	dec00104 	addi	sp,sp,4
 200e9fc:	f800283a 	ret

0200ea00 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200ea00:	defff404 	addi	sp,sp,-48
 200ea04:	dfc00b15 	stw	ra,44(sp)
 200ea08:	df000a15 	stw	fp,40(sp)
 200ea0c:	df000a04 	addi	fp,sp,40
 200ea10:	e13ffb15 	stw	r4,-20(fp)
 200ea14:	e17ffc15 	stw	r5,-16(fp)
 200ea18:	e1bffd15 	stw	r6,-12(fp)
 200ea1c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 200ea20:	00bffa84 	movi	r2,-22
 200ea24:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 200ea28:	e0bffc17 	ldw	r2,-16(fp)
 200ea2c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 200ea30:	e0bff917 	ldw	r2,-28(fp)
 200ea34:	10800808 	cmpgei	r2,r2,32
 200ea38:	1000291e 	bne	r2,zero,200eae0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ea3c:	0005303a 	rdctl	r2,status
 200ea40:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ea44:	e0fff717 	ldw	r3,-36(fp)
 200ea48:	00bfff84 	movi	r2,-2
 200ea4c:	1884703a 	and	r2,r3,r2
 200ea50:	1001703a 	wrctl	status,r2
  
  return context;
 200ea54:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 200ea58:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 200ea5c:	e0bff917 	ldw	r2,-28(fp)
 200ea60:	00c08074 	movhi	r3,513
 200ea64:	18cc2104 	addi	r3,r3,12420
 200ea68:	100490fa 	slli	r2,r2,3
 200ea6c:	10c7883a 	add	r3,r2,r3
 200ea70:	e0bffd17 	ldw	r2,-12(fp)
 200ea74:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 200ea78:	e0bff917 	ldw	r2,-28(fp)
 200ea7c:	00c08074 	movhi	r3,513
 200ea80:	18cc2104 	addi	r3,r3,12420
 200ea84:	100490fa 	slli	r2,r2,3
 200ea88:	10c5883a 	add	r2,r2,r3
 200ea8c:	10c00104 	addi	r3,r2,4
 200ea90:	e0bffe17 	ldw	r2,-8(fp)
 200ea94:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 200ea98:	e0bffd17 	ldw	r2,-12(fp)
 200ea9c:	1005003a 	cmpeq	r2,r2,zero
 200eaa0:	1000051e 	bne	r2,zero,200eab8 <alt_iic_isr_register+0xb8>
 200eaa4:	e17ff917 	ldw	r5,-28(fp)
 200eaa8:	e13ffb17 	ldw	r4,-20(fp)
 200eaac:	200e87c0 	call	200e87c <alt_ic_irq_enable>
 200eab0:	e0bfff15 	stw	r2,-4(fp)
 200eab4:	00000406 	br	200eac8 <alt_iic_isr_register+0xc8>
 200eab8:	e17ff917 	ldw	r5,-28(fp)
 200eabc:	e13ffb17 	ldw	r4,-20(fp)
 200eac0:	200e9180 	call	200e918 <alt_ic_irq_disable>
 200eac4:	e0bfff15 	stw	r2,-4(fp)
 200eac8:	e0bfff17 	ldw	r2,-4(fp)
 200eacc:	e0bffa15 	stw	r2,-24(fp)
 200ead0:	e0bff817 	ldw	r2,-32(fp)
 200ead4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ead8:	e0bff617 	ldw	r2,-40(fp)
 200eadc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 200eae0:	e0bffa17 	ldw	r2,-24(fp)
}
 200eae4:	e037883a 	mov	sp,fp
 200eae8:	dfc00117 	ldw	ra,4(sp)
 200eaec:	df000017 	ldw	fp,0(sp)
 200eaf0:	dec00204 	addi	sp,sp,8
 200eaf4:	f800283a 	ret

0200eaf8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 200eaf8:	defff904 	addi	sp,sp,-28
 200eafc:	dfc00615 	stw	ra,24(sp)
 200eb00:	df000515 	stw	fp,20(sp)
 200eb04:	df000504 	addi	fp,sp,20
 200eb08:	e13ffc15 	stw	r4,-16(fp)
 200eb0c:	e17ffd15 	stw	r5,-12(fp)
 200eb10:	e1bffe15 	stw	r6,-8(fp)
 200eb14:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 200eb18:	e13ffd17 	ldw	r4,-12(fp)
 200eb1c:	e17ffe17 	ldw	r5,-8(fp)
 200eb20:	e1bfff17 	ldw	r6,-4(fp)
 200eb24:	200bd300 	call	200bd30 <open>
 200eb28:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 200eb2c:	e0bffb17 	ldw	r2,-20(fp)
 200eb30:	1004803a 	cmplt	r2,r2,zero
 200eb34:	10001c1e 	bne	r2,zero,200eba8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 200eb38:	e0bffb17 	ldw	r2,-20(fp)
 200eb3c:	00c08074 	movhi	r3,513
 200eb40:	18c04f04 	addi	r3,r3,316
 200eb44:	10800324 	muli	r2,r2,12
 200eb48:	10c5883a 	add	r2,r2,r3
 200eb4c:	10c00017 	ldw	r3,0(r2)
 200eb50:	e0bffc17 	ldw	r2,-16(fp)
 200eb54:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 200eb58:	e0bffb17 	ldw	r2,-20(fp)
 200eb5c:	00c08074 	movhi	r3,513
 200eb60:	18c04f04 	addi	r3,r3,316
 200eb64:	10800324 	muli	r2,r2,12
 200eb68:	10c5883a 	add	r2,r2,r3
 200eb6c:	10800104 	addi	r2,r2,4
 200eb70:	10c00017 	ldw	r3,0(r2)
 200eb74:	e0bffc17 	ldw	r2,-16(fp)
 200eb78:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 200eb7c:	e0bffb17 	ldw	r2,-20(fp)
 200eb80:	00c08074 	movhi	r3,513
 200eb84:	18c04f04 	addi	r3,r3,316
 200eb88:	10800324 	muli	r2,r2,12
 200eb8c:	10c5883a 	add	r2,r2,r3
 200eb90:	10800204 	addi	r2,r2,8
 200eb94:	10c00017 	ldw	r3,0(r2)
 200eb98:	e0bffc17 	ldw	r2,-16(fp)
 200eb9c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 200eba0:	e13ffb17 	ldw	r4,-20(fp)
 200eba4:	200c0980 	call	200c098 <alt_release_fd>
  }
} 
 200eba8:	e037883a 	mov	sp,fp
 200ebac:	dfc00117 	ldw	ra,4(sp)
 200ebb0:	df000017 	ldw	fp,0(sp)
 200ebb4:	dec00204 	addi	sp,sp,8
 200ebb8:	f800283a 	ret

0200ebbc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 200ebbc:	defffb04 	addi	sp,sp,-20
 200ebc0:	dfc00415 	stw	ra,16(sp)
 200ebc4:	df000315 	stw	fp,12(sp)
 200ebc8:	df000304 	addi	fp,sp,12
 200ebcc:	e13ffd15 	stw	r4,-12(fp)
 200ebd0:	e17ffe15 	stw	r5,-8(fp)
 200ebd4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 200ebd8:	01008074 	movhi	r4,513
 200ebdc:	21005204 	addi	r4,r4,328
 200ebe0:	e17ffd17 	ldw	r5,-12(fp)
 200ebe4:	01800044 	movi	r6,1
 200ebe8:	01c07fc4 	movi	r7,511
 200ebec:	200eaf80 	call	200eaf8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 200ebf0:	01008074 	movhi	r4,513
 200ebf4:	21004f04 	addi	r4,r4,316
 200ebf8:	e17ffe17 	ldw	r5,-8(fp)
 200ebfc:	000d883a 	mov	r6,zero
 200ec00:	01c07fc4 	movi	r7,511
 200ec04:	200eaf80 	call	200eaf8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 200ec08:	01008074 	movhi	r4,513
 200ec0c:	21005504 	addi	r4,r4,340
 200ec10:	e17fff17 	ldw	r5,-4(fp)
 200ec14:	01800044 	movi	r6,1
 200ec18:	01c07fc4 	movi	r7,511
 200ec1c:	200eaf80 	call	200eaf8 <alt_open_fd>
}  
 200ec20:	e037883a 	mov	sp,fp
 200ec24:	dfc00117 	ldw	ra,4(sp)
 200ec28:	df000017 	ldw	fp,0(sp)
 200ec2c:	dec00204 	addi	sp,sp,8
 200ec30:	f800283a 	ret

0200ec34 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 200ec34:	deffff04 	addi	sp,sp,-4
 200ec38:	df000015 	stw	fp,0(sp)
 200ec3c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 200ec40:	000170fa 	wrctl	ienable,zero
}
 200ec44:	e037883a 	mov	sp,fp
 200ec48:	df000017 	ldw	fp,0(sp)
 200ec4c:	dec00104 	addi	sp,sp,4
 200ec50:	f800283a 	ret

0200ec54 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 200ec54:	defffb04 	addi	sp,sp,-20
 200ec58:	df000415 	stw	fp,16(sp)
 200ec5c:	df000404 	addi	fp,sp,16
 200ec60:	e13ffe15 	stw	r4,-8(fp)
 200ec64:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 200ec68:	e0bfff17 	ldw	r2,-4(fp)
 200ec6c:	10840070 	cmpltui	r2,r2,4097
 200ec70:	1000021e 	bne	r2,zero,200ec7c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 200ec74:	00840004 	movi	r2,4096
 200ec78:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 200ec7c:	e0fffe17 	ldw	r3,-8(fp)
 200ec80:	e0bfff17 	ldw	r2,-4(fp)
 200ec84:	1885883a 	add	r2,r3,r2
 200ec88:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 200ec8c:	e0bffe17 	ldw	r2,-8(fp)
 200ec90:	e0bffd15 	stw	r2,-12(fp)
 200ec94:	00000506 	br	200ecac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 200ec98:	e0bffd17 	ldw	r2,-12(fp)
 200ec9c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 200eca0:	e0bffd17 	ldw	r2,-12(fp)
 200eca4:	10800804 	addi	r2,r2,32
 200eca8:	e0bffd15 	stw	r2,-12(fp)
 200ecac:	e0fffd17 	ldw	r3,-12(fp)
 200ecb0:	e0bffc17 	ldw	r2,-16(fp)
 200ecb4:	18bff836 	bltu	r3,r2,200ec98 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 200ecb8:	e0bffe17 	ldw	r2,-8(fp)
 200ecbc:	108007cc 	andi	r2,r2,31
 200ecc0:	1005003a 	cmpeq	r2,r2,zero
 200ecc4:	1000021e 	bne	r2,zero,200ecd0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 200ecc8:	e0bffd17 	ldw	r2,-12(fp)
 200eccc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 200ecd0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 200ecd4:	e037883a 	mov	sp,fp
 200ecd8:	df000017 	ldw	fp,0(sp)
 200ecdc:	dec00104 	addi	sp,sp,4
 200ece0:	f800283a 	ret

0200ece4 <atexit>:
 200ece4:	200b883a 	mov	r5,r4
 200ece8:	000d883a 	mov	r6,zero
 200ecec:	0009883a 	mov	r4,zero
 200ecf0:	000f883a 	mov	r7,zero
 200ecf4:	200eda41 	jmpi	200eda4 <__register_exitproc>

0200ecf8 <exit>:
 200ecf8:	defffe04 	addi	sp,sp,-8
 200ecfc:	000b883a 	mov	r5,zero
 200ed00:	dc000015 	stw	r16,0(sp)
 200ed04:	dfc00115 	stw	ra,4(sp)
 200ed08:	2021883a 	mov	r16,r4
 200ed0c:	200eedc0 	call	200eedc <__call_exitprocs>
 200ed10:	00808074 	movhi	r2,513
 200ed14:	10851004 	addi	r2,r2,5184
 200ed18:	11000017 	ldw	r4,0(r2)
 200ed1c:	20800f17 	ldw	r2,60(r4)
 200ed20:	10000126 	beq	r2,zero,200ed28 <exit+0x30>
 200ed24:	103ee83a 	callr	r2
 200ed28:	8009883a 	mov	r4,r16
 200ed2c:	200f0cc0 	call	200f0cc <_exit>

0200ed30 <memcmp>:
 200ed30:	00c000c4 	movi	r3,3
 200ed34:	1980032e 	bgeu	r3,r6,200ed44 <memcmp+0x14>
 200ed38:	2144b03a 	or	r2,r4,r5
 200ed3c:	10c4703a 	and	r2,r2,r3
 200ed40:	10000f26 	beq	r2,zero,200ed80 <memcmp+0x50>
 200ed44:	31ffffc4 	addi	r7,r6,-1
 200ed48:	3000061e 	bne	r6,zero,200ed64 <memcmp+0x34>
 200ed4c:	00000a06 	br	200ed78 <memcmp+0x48>
 200ed50:	39ffffc4 	addi	r7,r7,-1
 200ed54:	00bfffc4 	movi	r2,-1
 200ed58:	21000044 	addi	r4,r4,1
 200ed5c:	29400044 	addi	r5,r5,1
 200ed60:	38800526 	beq	r7,r2,200ed78 <memcmp+0x48>
 200ed64:	20c00003 	ldbu	r3,0(r4)
 200ed68:	28800003 	ldbu	r2,0(r5)
 200ed6c:	18bff826 	beq	r3,r2,200ed50 <memcmp+0x20>
 200ed70:	1885c83a 	sub	r2,r3,r2
 200ed74:	f800283a 	ret
 200ed78:	0005883a 	mov	r2,zero
 200ed7c:	f800283a 	ret
 200ed80:	180f883a 	mov	r7,r3
 200ed84:	20c00017 	ldw	r3,0(r4)
 200ed88:	28800017 	ldw	r2,0(r5)
 200ed8c:	18bfed1e 	bne	r3,r2,200ed44 <memcmp+0x14>
 200ed90:	31bfff04 	addi	r6,r6,-4
 200ed94:	21000104 	addi	r4,r4,4
 200ed98:	29400104 	addi	r5,r5,4
 200ed9c:	39bff936 	bltu	r7,r6,200ed84 <memcmp+0x54>
 200eda0:	003fe806 	br	200ed44 <memcmp+0x14>

0200eda4 <__register_exitproc>:
 200eda4:	defffa04 	addi	sp,sp,-24
 200eda8:	00808074 	movhi	r2,513
 200edac:	10851004 	addi	r2,r2,5184
 200edb0:	dc000015 	stw	r16,0(sp)
 200edb4:	14000017 	ldw	r16,0(r2)
 200edb8:	dd000415 	stw	r20,16(sp)
 200edbc:	2829883a 	mov	r20,r5
 200edc0:	81405217 	ldw	r5,328(r16)
 200edc4:	dcc00315 	stw	r19,12(sp)
 200edc8:	dc800215 	stw	r18,8(sp)
 200edcc:	dc400115 	stw	r17,4(sp)
 200edd0:	dfc00515 	stw	ra,20(sp)
 200edd4:	2023883a 	mov	r17,r4
 200edd8:	3027883a 	mov	r19,r6
 200eddc:	3825883a 	mov	r18,r7
 200ede0:	28002526 	beq	r5,zero,200ee78 <__register_exitproc+0xd4>
 200ede4:	29000117 	ldw	r4,4(r5)
 200ede8:	008007c4 	movi	r2,31
 200edec:	11002716 	blt	r2,r4,200ee8c <__register_exitproc+0xe8>
 200edf0:	8800101e 	bne	r17,zero,200ee34 <__register_exitproc+0x90>
 200edf4:	2105883a 	add	r2,r4,r4
 200edf8:	1085883a 	add	r2,r2,r2
 200edfc:	20c00044 	addi	r3,r4,1
 200ee00:	1145883a 	add	r2,r2,r5
 200ee04:	0009883a 	mov	r4,zero
 200ee08:	15000215 	stw	r20,8(r2)
 200ee0c:	28c00115 	stw	r3,4(r5)
 200ee10:	2005883a 	mov	r2,r4
 200ee14:	dfc00517 	ldw	ra,20(sp)
 200ee18:	dd000417 	ldw	r20,16(sp)
 200ee1c:	dcc00317 	ldw	r19,12(sp)
 200ee20:	dc800217 	ldw	r18,8(sp)
 200ee24:	dc400117 	ldw	r17,4(sp)
 200ee28:	dc000017 	ldw	r16,0(sp)
 200ee2c:	dec00604 	addi	sp,sp,24
 200ee30:	f800283a 	ret
 200ee34:	29802204 	addi	r6,r5,136
 200ee38:	00800044 	movi	r2,1
 200ee3c:	110e983a 	sll	r7,r2,r4
 200ee40:	30c04017 	ldw	r3,256(r6)
 200ee44:	2105883a 	add	r2,r4,r4
 200ee48:	1085883a 	add	r2,r2,r2
 200ee4c:	1185883a 	add	r2,r2,r6
 200ee50:	19c6b03a 	or	r3,r3,r7
 200ee54:	14802015 	stw	r18,128(r2)
 200ee58:	14c00015 	stw	r19,0(r2)
 200ee5c:	00800084 	movi	r2,2
 200ee60:	30c04015 	stw	r3,256(r6)
 200ee64:	88bfe31e 	bne	r17,r2,200edf4 <__register_exitproc+0x50>
 200ee68:	30804117 	ldw	r2,260(r6)
 200ee6c:	11c4b03a 	or	r2,r2,r7
 200ee70:	30804115 	stw	r2,260(r6)
 200ee74:	003fdf06 	br	200edf4 <__register_exitproc+0x50>
 200ee78:	00808074 	movhi	r2,513
 200ee7c:	108c6104 	addi	r2,r2,12676
 200ee80:	100b883a 	mov	r5,r2
 200ee84:	80805215 	stw	r2,328(r16)
 200ee88:	003fd606 	br	200ede4 <__register_exitproc+0x40>
 200ee8c:	00800034 	movhi	r2,0
 200ee90:	10800004 	addi	r2,r2,0
 200ee94:	1000021e 	bne	r2,zero,200eea0 <__register_exitproc+0xfc>
 200ee98:	013fffc4 	movi	r4,-1
 200ee9c:	003fdc06 	br	200ee10 <__register_exitproc+0x6c>
 200eea0:	01006404 	movi	r4,400
 200eea4:	103ee83a 	callr	r2
 200eea8:	1007883a 	mov	r3,r2
 200eeac:	103ffa26 	beq	r2,zero,200ee98 <__register_exitproc+0xf4>
 200eeb0:	80805217 	ldw	r2,328(r16)
 200eeb4:	180b883a 	mov	r5,r3
 200eeb8:	18000115 	stw	zero,4(r3)
 200eebc:	18800015 	stw	r2,0(r3)
 200eec0:	80c05215 	stw	r3,328(r16)
 200eec4:	18006215 	stw	zero,392(r3)
 200eec8:	18006315 	stw	zero,396(r3)
 200eecc:	0009883a 	mov	r4,zero
 200eed0:	883fc826 	beq	r17,zero,200edf4 <__register_exitproc+0x50>
 200eed4:	003fd706 	br	200ee34 <__register_exitproc+0x90>

0200eed8 <register_fini>:
 200eed8:	f800283a 	ret

0200eedc <__call_exitprocs>:
 200eedc:	00808074 	movhi	r2,513
 200eee0:	10851004 	addi	r2,r2,5184
 200eee4:	10800017 	ldw	r2,0(r2)
 200eee8:	defff304 	addi	sp,sp,-52
 200eeec:	df000b15 	stw	fp,44(sp)
 200eef0:	d8800115 	stw	r2,4(sp)
 200eef4:	00800034 	movhi	r2,0
 200eef8:	10800004 	addi	r2,r2,0
 200eefc:	1005003a 	cmpeq	r2,r2,zero
 200ef00:	d8800215 	stw	r2,8(sp)
 200ef04:	d8800117 	ldw	r2,4(sp)
 200ef08:	dd400815 	stw	r21,32(sp)
 200ef0c:	dd000715 	stw	r20,28(sp)
 200ef10:	10805204 	addi	r2,r2,328
 200ef14:	dfc00c15 	stw	ra,48(sp)
 200ef18:	ddc00a15 	stw	r23,40(sp)
 200ef1c:	dd800915 	stw	r22,36(sp)
 200ef20:	dcc00615 	stw	r19,24(sp)
 200ef24:	dc800515 	stw	r18,20(sp)
 200ef28:	dc400415 	stw	r17,16(sp)
 200ef2c:	dc000315 	stw	r16,12(sp)
 200ef30:	282b883a 	mov	r21,r5
 200ef34:	2039883a 	mov	fp,r4
 200ef38:	d8800015 	stw	r2,0(sp)
 200ef3c:	2829003a 	cmpeq	r20,r5,zero
 200ef40:	d8800117 	ldw	r2,4(sp)
 200ef44:	14405217 	ldw	r17,328(r2)
 200ef48:	88001026 	beq	r17,zero,200ef8c <__call_exitprocs+0xb0>
 200ef4c:	ddc00017 	ldw	r23,0(sp)
 200ef50:	88800117 	ldw	r2,4(r17)
 200ef54:	8c802204 	addi	r18,r17,136
 200ef58:	143fffc4 	addi	r16,r2,-1
 200ef5c:	80000916 	blt	r16,zero,200ef84 <__call_exitprocs+0xa8>
 200ef60:	05bfffc4 	movi	r22,-1
 200ef64:	a000151e 	bne	r20,zero,200efbc <__call_exitprocs+0xe0>
 200ef68:	8409883a 	add	r4,r16,r16
 200ef6c:	2105883a 	add	r2,r4,r4
 200ef70:	1485883a 	add	r2,r2,r18
 200ef74:	10c02017 	ldw	r3,128(r2)
 200ef78:	a8c01126 	beq	r21,r3,200efc0 <__call_exitprocs+0xe4>
 200ef7c:	843fffc4 	addi	r16,r16,-1
 200ef80:	85bff81e 	bne	r16,r22,200ef64 <__call_exitprocs+0x88>
 200ef84:	d8800217 	ldw	r2,8(sp)
 200ef88:	10003126 	beq	r2,zero,200f050 <__call_exitprocs+0x174>
 200ef8c:	dfc00c17 	ldw	ra,48(sp)
 200ef90:	df000b17 	ldw	fp,44(sp)
 200ef94:	ddc00a17 	ldw	r23,40(sp)
 200ef98:	dd800917 	ldw	r22,36(sp)
 200ef9c:	dd400817 	ldw	r21,32(sp)
 200efa0:	dd000717 	ldw	r20,28(sp)
 200efa4:	dcc00617 	ldw	r19,24(sp)
 200efa8:	dc800517 	ldw	r18,20(sp)
 200efac:	dc400417 	ldw	r17,16(sp)
 200efb0:	dc000317 	ldw	r16,12(sp)
 200efb4:	dec00d04 	addi	sp,sp,52
 200efb8:	f800283a 	ret
 200efbc:	8409883a 	add	r4,r16,r16
 200efc0:	88c00117 	ldw	r3,4(r17)
 200efc4:	2105883a 	add	r2,r4,r4
 200efc8:	1445883a 	add	r2,r2,r17
 200efcc:	18ffffc4 	addi	r3,r3,-1
 200efd0:	11800217 	ldw	r6,8(r2)
 200efd4:	1c001526 	beq	r3,r16,200f02c <__call_exitprocs+0x150>
 200efd8:	10000215 	stw	zero,8(r2)
 200efdc:	303fe726 	beq	r6,zero,200ef7c <__call_exitprocs+0xa0>
 200efe0:	00c00044 	movi	r3,1
 200efe4:	1c06983a 	sll	r3,r3,r16
 200efe8:	90804017 	ldw	r2,256(r18)
 200efec:	8cc00117 	ldw	r19,4(r17)
 200eff0:	1884703a 	and	r2,r3,r2
 200eff4:	10001426 	beq	r2,zero,200f048 <__call_exitprocs+0x16c>
 200eff8:	90804117 	ldw	r2,260(r18)
 200effc:	1884703a 	and	r2,r3,r2
 200f000:	10000c1e 	bne	r2,zero,200f034 <__call_exitprocs+0x158>
 200f004:	2105883a 	add	r2,r4,r4
 200f008:	1485883a 	add	r2,r2,r18
 200f00c:	11400017 	ldw	r5,0(r2)
 200f010:	e009883a 	mov	r4,fp
 200f014:	303ee83a 	callr	r6
 200f018:	88800117 	ldw	r2,4(r17)
 200f01c:	98bfc81e 	bne	r19,r2,200ef40 <__call_exitprocs+0x64>
 200f020:	b8800017 	ldw	r2,0(r23)
 200f024:	147fd526 	beq	r2,r17,200ef7c <__call_exitprocs+0xa0>
 200f028:	003fc506 	br	200ef40 <__call_exitprocs+0x64>
 200f02c:	8c000115 	stw	r16,4(r17)
 200f030:	003fea06 	br	200efdc <__call_exitprocs+0x100>
 200f034:	2105883a 	add	r2,r4,r4
 200f038:	1485883a 	add	r2,r2,r18
 200f03c:	11000017 	ldw	r4,0(r2)
 200f040:	303ee83a 	callr	r6
 200f044:	003ff406 	br	200f018 <__call_exitprocs+0x13c>
 200f048:	303ee83a 	callr	r6
 200f04c:	003ff206 	br	200f018 <__call_exitprocs+0x13c>
 200f050:	88800117 	ldw	r2,4(r17)
 200f054:	1000081e 	bne	r2,zero,200f078 <__call_exitprocs+0x19c>
 200f058:	89000017 	ldw	r4,0(r17)
 200f05c:	20000726 	beq	r4,zero,200f07c <__call_exitprocs+0x1a0>
 200f060:	b9000015 	stw	r4,0(r23)
 200f064:	8809883a 	mov	r4,r17
 200f068:	00000000 	call	0 <__alt_mem_sdram_0-0x2000000>
 200f06c:	bc400017 	ldw	r17,0(r23)
 200f070:	883fb71e 	bne	r17,zero,200ef50 <__call_exitprocs+0x74>
 200f074:	003fc506 	br	200ef8c <__call_exitprocs+0xb0>
 200f078:	89000017 	ldw	r4,0(r17)
 200f07c:	882f883a 	mov	r23,r17
 200f080:	2023883a 	mov	r17,r4
 200f084:	883fb21e 	bne	r17,zero,200ef50 <__call_exitprocs+0x74>
 200f088:	003fc006 	br	200ef8c <__call_exitprocs+0xb0>

0200f08c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 200f08c:	defffd04 	addi	sp,sp,-12
 200f090:	df000215 	stw	fp,8(sp)
 200f094:	df000204 	addi	fp,sp,8
 200f098:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 200f09c:	e0bfff17 	ldw	r2,-4(fp)
 200f0a0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 200f0a4:	e0bffe17 	ldw	r2,-8(fp)
 200f0a8:	1005003a 	cmpeq	r2,r2,zero
 200f0ac:	1000021e 	bne	r2,zero,200f0b8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 200f0b0:	002af070 	cmpltui	zero,zero,43969
 200f0b4:	00000106 	br	200f0bc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 200f0b8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 200f0bc:	e037883a 	mov	sp,fp
 200f0c0:	df000017 	ldw	fp,0(sp)
 200f0c4:	dec00104 	addi	sp,sp,4
 200f0c8:	f800283a 	ret

0200f0cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 200f0cc:	defffd04 	addi	sp,sp,-12
 200f0d0:	dfc00215 	stw	ra,8(sp)
 200f0d4:	df000115 	stw	fp,4(sp)
 200f0d8:	df000104 	addi	fp,sp,4
 200f0dc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 200f0e0:	e13fff17 	ldw	r4,-4(fp)
 200f0e4:	200f08c0 	call	200f08c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 200f0e8:	003fff06 	br	200f0e8 <_exit+0x1c>
 200f0ec:	0200eed8 	cmpnei	r8,zero,955
